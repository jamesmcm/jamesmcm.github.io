<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>James McMurray&#x27;s blog</title>
    <subtitle>A technical blog about Rust, Linux and other topics.</subtitle>
    <link rel="self" type="application/atom+xml" href="https://jamesmcm.github.io/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://jamesmcm.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-11-02T00:00:00+00:00</updated>
    <id>https://jamesmcm.github.io/atom.xml</id>
    <entry xml:lang="en">
        <title>Beginner Rust ESP32 development - Snake</title>
        <published>2024-11-02T00:00:00+00:00</published>
        <updated>2024-11-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              James McMurray
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jamesmcm.github.io/blog/beginner-rust-esp32-lcdsnake/"/>
        <id>https://jamesmcm.github.io/blog/beginner-rust-esp32-lcdsnake/</id>
        
        <summary type="html">&lt;p&gt;In this post we will create a basic ESP32 project using Rust and espup.&lt;&#x2F;p&gt;
&lt;p&gt;We will write a Snake game to run on an ESP32 development board with a
connected OLED display and controlled with a joystick.&lt;&#x2F;p&gt;
&lt;p&gt;The code for this example is available on Github in my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;snake_rust_esp32&quot;&gt;snake_rust_esp32 repo&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>My First Clippy Lint</title>
        <published>2022-03-26T00:00:00+00:00</published>
        <updated>2022-03-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              James McMurray
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jamesmcm.github.io/blog/my-first-clippy-lint/"/>
        <id>https://jamesmcm.github.io/blog/my-first-clippy-lint/</id>
        
        <summary type="html">&lt;p&gt;Recently I wrote my first &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&quot;&gt;Clippy&lt;&#x2F;a&gt; lint. It was much easier to
implement and test than I had expected. In this post I&#x27;ll review the
process of creating or contributing to a Clippy lint, the implementation itself and
how this reflects Rust&#x27;s values of empowerment.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Writing a simple AWS Lambda Custom Runtime in Rust</title>
        <published>2020-10-24T00:00:00+00:00</published>
        <updated>2020-10-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              James McMurray
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jamesmcm.github.io/blog/lambda-runtime/"/>
        <id>https://jamesmcm.github.io/blog/lambda-runtime/</id>
        
        <summary type="html">&lt;p&gt;I was recently reading more about the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;lambda_runtime&quot;&gt;lambda_runtime crate&lt;&#x2F;a&gt;
and came across &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;awslabs&#x2F;aws-lambda-rust-runtime&#x2F;issues&#x2F;259&quot;&gt;this issue&lt;&#x2F;a&gt;
where it is mentioned that the &lt;code&gt;#[lambda]&lt;&#x2F;code&gt; procedural macro can be
misleading and cause problems if used naively.&lt;&#x2F;p&gt;
&lt;p&gt;In this post we will implement our own simple custom runtime for
AWS Lambda in Rust, and understand the reasons behind this issue.&lt;&#x2F;p&gt;
&lt;p&gt;The code used in this blog post is available on Github in
my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;micro_lambda&quot;&gt;micro_lambda repository&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>What should I program?</title>
        <published>2020-10-11T00:00:00+00:00</published>
        <updated>2020-10-11T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              James McMurray
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jamesmcm.github.io/blog/programming-projects/"/>
        <id>https://jamesmcm.github.io/blog/programming-projects/</id>
        
        <summary type="html">&lt;p&gt;Doing projects is often the best way to get more programming experience
and learn about new concepts and problem domains. However, a common issue
is finding feasible projects of a reasonable scope that can
produce something useful in a few weekends.&lt;&#x2F;p&gt;
&lt;p&gt;In this post I will list some classic project ideas for beginner and
intermediate programmers (most of which should be achievable in 2-3
weekends), along with many other project ideas I&#x27;ve had but have never
had time to implement (and a few which I did).&lt;&#x2F;p&gt;
&lt;p&gt;There are many long lists of project ideas available on Github, like
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;danistefanovic&#x2F;build-your-own-x&quot;&gt;build-your-own-x&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aceking007&#x2F;100ProjectsOfCode&quot;&gt;100 Projects of Code&lt;&#x2F;a&gt;
but these often lack a real description and justification of the
projects. In this article I will go more in-depth with the different project ideas.&lt;&#x2F;p&gt;
&lt;p&gt;Within each section the projects are ordered in ascending difficulty &#x2F;
time investment.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>My Rust 2021 roadmap: crates, concision, and community</title>
        <published>2020-09-24T00:00:00+00:00</published>
        <updated>2020-09-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              James McMurray
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jamesmcm.github.io/blog/rust2021/"/>
        <id>https://jamesmcm.github.io/blog/rust2021/</id>
        
        <summary type="html">&lt;p&gt;The Rust core team recently released a &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2020&#x2F;09&#x2F;03&#x2F;Planning-2021-Roadmap.html&quot;&gt;call for blog posts&lt;&#x2F;a&gt; as part of
the 2021 roadmap for Rust. In this post I will detail my own experience
with Rust, and areas I&#x27;d like to
see improved during 2021.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>How to fix high CPU usage by the CacheDelete daemon in OS X Catalina</title>
        <published>2020-09-20T00:00:00+00:00</published>
        <updated>2020-09-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              James McMurray
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jamesmcm.github.io/blog/catalina-cachedelete/"/>
        <id>https://jamesmcm.github.io/blog/catalina-cachedelete/</id>
        
        <summary type="html">&lt;p&gt;I recently had an ongoing issue with the &lt;code&gt;deleted&lt;&#x2F;code&gt; CacheDelete daemon
using huge amounts of CPU time almost constantly. This post covers how I
fixed it and a few tips for OS X recovery and performance improvements.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Why governments should adopt and invest in FOSS</title>
        <published>2020-09-12T00:00:00+00:00</published>
        <updated>2020-09-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              James McMurray
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jamesmcm.github.io/blog/foss-government/"/>
        <id>https://jamesmcm.github.io/blog/foss-government/</id>
        
        <summary type="html">&lt;p&gt;This post covers why I believe local and national governments should
adopt and invest in &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;philosophy&#x2F;free-sw.en.html&quot;&gt;Free and Open Source Software&lt;&#x2F;a&gt; (FOSS).&lt;&#x2F;p&gt;
&lt;p&gt;This has been in the news recently due to the city of Munich renewing
it&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;www.zdnet.com&#x2F;article&#x2F;linux-not-windows-why-munich-is-shifting-back-from-microsoft-to-open-source-again&#x2F;&quot;&gt;LiMux Linux distribution&lt;&#x2F;a&gt;
thanks to an agreement between the local SDP and Green politicians, and
the efforts of the &lt;a href=&quot;https:&#x2F;&#x2F;publiccode.eu&#x2F;&quot;&gt;Public Money, Public Code&lt;&#x2F;a&gt; campaign.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Using ALMA for persistent LiveUSB installations of Arch Linux</title>
        <published>2020-09-09T00:00:00+00:00</published>
        <updated>2020-09-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              James McMurray
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jamesmcm.github.io/blog/alma/"/>
        <id>https://jamesmcm.github.io/blog/alma/</id>
        
        <summary type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;r-darwish&#x2F;alma&quot;&gt;ALMA&lt;&#x2F;a&gt; (available as &lt;a href=&quot;https:&#x2F;&#x2F;aur.archlinux.org&#x2F;packages&#x2F;alma-git&#x2F;&quot;&gt;alma-git on the AUR&lt;&#x2F;a&gt;) is a tool for creating
persistent LiveUSB installations of Arch Linux. With one command you
can generate a customised installation on a
USB stick (or any other removable media) including the packages and
config files you want, with full persistence.&lt;&#x2F;p&gt;
&lt;p&gt;This is very useful for disk recovery and system maintenance, and a
great tool for all Linux users. Especially with the customisation
options provided by collections of preset files (such as
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;arch-i3-usb&quot;&gt;arch-i3-usb&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Retrospective of my first useful Rust project</title>
        <published>2020-09-05T00:00:00+00:00</published>
        <updated>2020-09-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              James McMurray
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jamesmcm.github.io/blog/vopono/"/>
        <id>https://jamesmcm.github.io/blog/vopono/</id>
        
        <summary type="html">&lt;p&gt;This post is a retrospective of my first &quot;useful&quot; Rust project. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&quot;&gt;vopono&lt;&#x2F;a&gt;
is a Linux program to launch applications in temporary network
namespaces (managed by vopono), in order to run specific applications
through VPN connections, without affecting the rest of your system.&lt;&#x2F;p&gt;
&lt;p&gt;vopono is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&quot;&gt;available on Github&lt;&#x2F;a&gt; (and in the &lt;a href=&quot;https:&#x2F;&#x2F;aur.archlinux.org&#x2F;packages&#x2F;vopono&#x2F;&quot;&gt;AUR on Arch Linux&lt;&#x2F;a&gt;) and
licensed under the GPLv3 license (&lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;philosophy&#x2F;pragmatic.html&quot;&gt;see reasoning here&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ll consider the motivation and background to creating vopono, the
upsides and downsides of writing it in Rust (and existing issues), and
some points about starting new side projects in general. I hope this
helps new Rust programmers starting their own first projects, or for
other programmers to consider using Rust.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Serverless Data Ingestion with Rust and AWS SES</title>
        <published>2020-08-29T00:00:00+00:00</published>
        <updated>2020-08-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              James McMurray
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jamesmcm.github.io/blog/rust-ses/"/>
        <id>https://jamesmcm.github.io/blog/rust-ses/</id>
        
        <summary type="html">&lt;p&gt;In this post we will set up a simple, serverless data ingestion pipeline using Rust,
AWS Lambda and AWS SES with Workmail.&lt;&#x2F;p&gt;
&lt;p&gt;We will handle multiple types of
AWS events with one Lambda function, parse received emails
with the mailparse crate, and send email with SES and the lettre crate.&lt;&#x2F;p&gt;
&lt;p&gt;The complete code for this example is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;rust_ses_example&quot;&gt;available on GitHub here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>An introduction to Data Oriented Design with Rust</title>
        <published>2020-07-25T00:00:00+00:00</published>
        <updated>2020-07-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              James McMurray
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jamesmcm.github.io/blog/intro-dod/"/>
        <id>https://jamesmcm.github.io/blog/intro-dod/</id>
        
        <summary type="html">&lt;p&gt;In the post we will investigate the main concepts of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Data-oriented_design&quot;&gt;Data-oriented
Design&lt;&#x2F;a&gt; using Rust.&lt;&#x2F;p&gt;
&lt;p&gt;The source code for this example is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;data-oriented-example&quot;&gt;available on Github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>A practical introduction to async programming in Rust</title>
        <published>2020-05-06T00:00:00+00:00</published>
        <updated>2020-05-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              James McMurray
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jamesmcm.github.io/blog/a-practical-introduction-to-async-programming-in-rust/"/>
        <id>https://jamesmcm.github.io/blog/a-practical-introduction-to-async-programming-in-rust/</id>
        
        <summary type="html">&lt;p&gt;In this post we will explore a brief example of asynchronous programming
in Rust with the Tokio runtime, demonstrating different execution scenarios. This post is aimed
at beginners to asynchronous programming.&lt;&#x2F;p&gt;
&lt;p&gt;The source code for this example is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;async-rust-example&quot;&gt;available on Github&lt;&#x2F;a&gt;.
A &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;async-rust-example&#x2F;tree&#x2F;async-std&quot;&gt;branch&lt;&#x2F;a&gt; using the async-std runtime is also available (contributed by
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BartMassey&quot;&gt;@BartMassey&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Data Ingestion with Rust and AWS Lambda</title>
        <published>2020-04-19T00:00:00+00:00</published>
        <updated>2020-04-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              James McMurray
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jamesmcm.github.io/blog/data-engineering-with-rust-and-aws-lambda/"/>
        <id>https://jamesmcm.github.io/blog/data-engineering-with-rust-and-aws-lambda/</id>
        
        <summary type="html">&lt;p&gt;In this post we will set up a very simple data ingestion process with Rust and AWS Lambda.&lt;&#x2F;p&gt;
&lt;p&gt;The complete code for this example is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;rust-lambda-test&quot;&gt;available on GitHub here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>The Expectation Maximisation (EM) Algorithm</title>
        <published>2014-10-24T00:00:00+00:00</published>
        <updated>2014-10-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              James McMurray
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jamesmcm.github.io/blog/em1/"/>
        <id>https://jamesmcm.github.io/blog/em1/</id>
        
        <summary type="html">&lt;p&gt;In this post I will briefly introduce the EM algorithm with two simple examples. The EM algorithm uses an iterative approach to find the Maximum Likelihood estimate for a model with latent variables.&lt;&#x2F;p&gt;
&lt;p&gt;Note I will not provide a thorough coverage of the mathematics but rather focus on two examples of Gaussian Mixture Models.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Resources to learn Spanish</title>
        <published>2014-08-21T00:00:00+00:00</published>
        <updated>2014-08-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              James McMurray
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jamesmcm.github.io/blog/spresource/"/>
        <id>https://jamesmcm.github.io/blog/spresource/</id>
        
        <summary type="html">&lt;p&gt;In this post I list some resources which have helped me to learn Spanish, I hope that they will help you too!&lt;&#x2F;p&gt;
&lt;p&gt;All of the listed resources are (mostly) free, except News In Slow Spanish (and the Latino version), and clearly the textbooks, TV series and films.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Introduction to Mendelian Randomization</title>
        <published>2014-08-17T00:00:00+00:00</published>
        <updated>2014-08-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              James McMurray
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jamesmcm.github.io/blog/mendelian/"/>
        <id>https://jamesmcm.github.io/blog/mendelian/</id>
        
        <summary type="html">&lt;p&gt;Mendelian Randomization is an approach to test for a &lt;strong&gt;causal&lt;&#x2F;strong&gt; effect from &lt;strong&gt;observational&lt;&#x2F;strong&gt; data in the presence of certain &lt;strong&gt;confounding&lt;&#x2F;strong&gt; factors.
It uses the measured variation of genes (of known function) to &lt;strong&gt;bound&lt;&#x2F;strong&gt; the causal effect of a modifiable exposure (environment) on a phenotype (disease). The fundamental idea is that the genotypes are &lt;strong&gt;randomly assigned&lt;&#x2F;strong&gt; (due to recombination in meiosis under certain assumptions), and this allows them to be used as an &lt;strong&gt;instrumental variable&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>First Post</title>
        <published>2014-08-04T00:00:00+00:00</published>
        <updated>2014-08-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              James McMurray
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jamesmcm.github.io/blog/first/"/>
        <id>https://jamesmcm.github.io/blog/first/</id>
        
        <summary type="html">&lt;p&gt;I&#x27;ve started this blog to save resources which have helped me in learning languages, concepts in statistics, and anything else which I think might help others too.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
</feed>
