<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>James McMurray&#x27;s blog</title>
	<subtitle>A technical blog about Rust, Linux and other topics.</subtitle>
	<link href="https://jamesmcm.github.io/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://jamesmcm.github.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2022-03-26T00:00:00+00:00</updated>
	<id>https://jamesmcm.github.io/atom.xml</id>
	<entry xml:lang="en">
		<title>My First Clippy Lint</title>
		<published>2022-03-26T00:00:00+00:00</published>
		<updated>2022-03-26T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jamesmcm.github.io/blog/my-first-clippy-lint/" type="text/html"/>
		<id>https://jamesmcm.github.io/blog/my-first-clippy-lint/</id>
		<content type="html">&lt;p&gt;Recently I wrote my first &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&quot;&gt;Clippy&lt;&#x2F;a&gt; lint. It was much easier to
implement and test than I had expected. In this post I&#x27;ll review the
process of creating or contributing to a Clippy lint, the implementation itself and
how this reflects Rust&#x27;s values of empowerment.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Whilst writing some quick prototyping code back in October, I came
across an issue accidentally triggering a recursive definition of
the &lt;code&gt;Display&lt;&#x2F;code&gt; trait, with code similar to &lt;a href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=690cb006ae868d481ed830540bf1b52c&quot;&gt;the following&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;TestType;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;std::ops::Deref &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;TestType {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Target = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;deref&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Target {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;std::fmt::Display &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;TestType {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;std::fmt::Formatter) -&amp;gt; std::fmt::Result {
&lt;&#x2F;span&gt;&lt;span&gt;        write!(f, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note the subtle issue of the single deref in &lt;code&gt;fmt()&lt;&#x2F;code&gt;, the code works
correctly if &lt;code&gt;&amp;amp;*self&lt;&#x2F;code&gt; is replaced with &lt;code&gt;&amp;amp;**self&lt;&#x2F;code&gt; since &lt;code&gt;self&lt;&#x2F;code&gt; is already
a reference inside the method. This mistake leads to infinite recursion since it tries to format
&lt;code&gt;self&lt;&#x2F;code&gt; with &lt;code&gt;Display&lt;&#x2F;code&gt; whilst inside the definition for &lt;code&gt;Display&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;However, the real issue was that neither rustc nor Clippy gave any
warning about the infinite recursion. rustc does have
its own lint for &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rustc&#x2F;lints&#x2F;listing&#x2F;warn-by-default.html#unconditional-recursion&quot;&gt;unconditional recursion&lt;&#x2F;a&gt;,
however in this case it is not triggered due to it not being a direct
call of the same function (i.e. there some layers of function calls due
to the formatting machinery).&lt;&#x2F;p&gt;
&lt;p&gt;Being so used to rustc and Clippy detecting all sorts of issues, this
was disappointing. So I created &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;issues&#x2F;7830&quot;&gt;an issue for Clippy&lt;&#x2F;a&gt;
and was referred to a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;issues&#x2F;2691&quot;&gt;much earlier issue&lt;&#x2F;a&gt; (from April 2018!)
for the underlying problem (the recursive Display implementation).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;implementing-the-lint&quot;&gt;Implementing the lint&lt;&#x2F;h2&gt;
&lt;p&gt;The rough procedure for implementing a new lint is as follows:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Decide on the lint type (early pass or late pass)&lt;&#x2F;li&gt;
&lt;li&gt;Write test cases (including positive and negative cases, and likely
false positives and negatives) - in this case they are UI tests since
we want to check that the user-facing output of the lint is correct.&lt;&#x2F;li&gt;
&lt;li&gt;Implementing the lint (checking similar lints for help and possible complications)&lt;&#x2F;li&gt;
&lt;li&gt;Checking test output is correct (i.e. only triggers where wanted)&lt;&#x2F;li&gt;
&lt;li&gt;Updating the expected test output and lint register&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are two lint pass types - early and late. The early lint pass is
faster but has no access to type lookups (only the Abstract Syntax
Tree (AST)). In this case we need the type information, so we use the late
pass.&lt;&#x2F;p&gt;
&lt;p&gt;When we implement the lint pass, we write code that will be executed for
each matching node in the AST. Note that we can store state in the Lint
struct itself, which is useful for keeping track of where we are in the
code (i.e. to keep information from outer parts of the AST) - here we
use this to only check expressions when inside the Display or Debug impl
block.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lint-pass-overview&quot;&gt;Lint pass overview&lt;&#x2F;h3&gt;
&lt;p&gt;To start with we need to be able to detect when we are inside a Display
or Debug impl block.&lt;&#x2F;p&gt;
&lt;p&gt;In this code set the &lt;code&gt;self.format_trait_impl&lt;&#x2F;code&gt; field
when we are inside the &lt;code&gt;Impl&lt;&#x2F;code&gt; of a format trait (Display or Debug)
and unset it once we leave that &lt;code&gt;Impl&lt;&#x2F;code&gt; block:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;FormatImpl {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Whether we are inside a Display or Debug trait impl - None for neither
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format_trait_impl&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;FormatTrait&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;tcx&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; LateLintPass&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;tcx&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;FormatImpl {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;check_impl_item&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cx&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;LateContext&amp;lt;&amp;#39;_&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;impl_item&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;ImplItem&amp;lt;&amp;#39;_&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Check if Impl is for Display or Debug
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.format_trait_impl = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_format_trait_impl&lt;&#x2F;span&gt;&lt;span&gt;(cx, impl_item);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;check_impl_item_post&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cx&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;LateContext&amp;lt;&amp;#39;_&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;impl_item&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;ImplItem&amp;lt;&amp;#39;_&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Assume no nested Impl of Debug and Display within eachother
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_format_trait_impl&lt;&#x2F;span&gt;&lt;span&gt;(cx, impl_item).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_some&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.format_trait_impl = None;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;check_impl_item&lt;&#x2F;code&gt; is triggered at the start of an Impl block, and
&lt;code&gt;check_impl_item_post&lt;&#x2F;code&gt; when we leave it.&lt;&#x2F;p&gt;
&lt;p&gt;This use of state means that we can then do our Expression level checks
only when we&#x27;re inside the relevant Impl blocks:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;tcx&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; LateLintPass&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;tcx&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;FormatImpl {
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;check_expr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cx&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;LateContext&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;tcx&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;expr&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;tcx &lt;&#x2F;span&gt;&lt;span&gt;Expr&amp;lt;&amp;#39;_&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;Some(format_trait_impl) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.format_trait_impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; format_trait_impl.name == sym::Display {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;check_to_string_in_display&lt;&#x2F;span&gt;&lt;span&gt;(cx, expr);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;check_self_in_format_args&lt;&#x2F;span&gt;&lt;span&gt;(cx, expr, format_trait_impl);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;check_print_in_format_impl&lt;&#x2F;span&gt;&lt;span&gt;(cx, expr, format_trait_impl);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;to_string_in_display&lt;&#x2F;code&gt; check is only relevant for the Display trait,
so we check for it explicitly there.&lt;&#x2F;p&gt;
&lt;p&gt;Note the use of separate functions for different lint checks. This
allows us to combine checking related lints in the same lint pass whilst
keeping the code readable.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;to-string-in-display&quot;&gt;to_string_in_display&lt;&#x2F;h3&gt;
&lt;p&gt;The check for the use of &lt;code&gt;to_string()&lt;&#x2F;code&gt; on self whilst inside the Display
impl is quite straightforward:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;check_to_string_in_display&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cx&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;LateContext&amp;lt;&amp;#39;_&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;expr&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;Expr&amp;lt;&amp;#39;_&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    if_chain! {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Get the hir_id of the object we are calling the method on
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;ExprKind::MethodCall(path, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span&gt; self_arg, ..], _) = expr.kind;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Is the method to_string() ?
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; path.ident.name == sym!(to_string);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Is the method a part of the ToString trait? (i.e. not to_string() implemented
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; separately)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(expr_def_id) = cx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;typeck_results&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;type_dependent_def_id&lt;&#x2F;span&gt;&lt;span&gt;(expr.hir_id);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_diag_trait_item&lt;&#x2F;span&gt;&lt;span&gt;(cx, expr_def_id, sym::ToString);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Is the method is called on self?
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;ExprKind::Path(QPath::Resolved(_, path)) = self_arg.kind;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;[segment] = path.segments;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; segment.ident.name == kw::SelfLower;
&lt;&#x2F;span&gt;&lt;span&gt;        then {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;span_lint&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                cx,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;RECURSIVE_FORMAT_IMPL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                expr.span,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;using `self.to_string` in `fmt::Display` implementation will cause infinite recursion&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            );
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note the use of the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;if_chain&#x2F;latest&#x2F;if_chain&#x2F;&quot;&gt;if_chain!&lt;&#x2F;a&gt; macro to 
chain if conditions without rightward drift (this is used throughout
Clippy).&lt;&#x2F;p&gt;
&lt;p&gt;The pattern &lt;code&gt;if let Some(XXX) = YYY;&lt;&#x2F;code&gt; is common when using if
chains, to allow us to refer to &lt;code&gt;XXX&lt;&#x2F;code&gt; later in the if chain (and stop
checking if it is None).&lt;&#x2F;p&gt;
&lt;p&gt;It is the &lt;code&gt;span_lint()&lt;&#x2F;code&gt; call that actually returns output for the
specific lint (i.e. &lt;code&gt;RECURSIVE_FORMAT_IMPL&lt;&#x2F;code&gt; in this case). This output
(to stderr) is what is compared in the UI test.&lt;&#x2F;p&gt;
&lt;p&gt;Also note the use of &lt;a href=&quot;https:&#x2F;&#x2F;rustc-dev-guide.rust-lang.org&#x2F;diagnostics&#x2F;diagnostic-items.html&quot;&gt;diagnostic items&lt;&#x2F;a&gt; with the
&lt;code&gt;is_diag_trait_item()&lt;&#x2F;code&gt; check. This is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;issues&#x2F;5393&quot;&gt;recommended over using hardcoded paths&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ui-test-example&quot;&gt;UI Test example&lt;&#x2F;h4&gt;
&lt;p&gt;One UI test (in &lt;code&gt;tests&#x2F;ui&#x2F;recursive_format_impl.rs&lt;&#x2F;code&gt;) for the above check is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;warn&lt;&#x2F;span&gt;&lt;span&gt;(clippy::recursive_format_impl)]
&lt;&#x2F;span&gt;&lt;span&gt;#![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allow&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    clippy::inherent_to_string_shadow_display,
&lt;&#x2F;span&gt;&lt;span&gt;    clippy::to_string_in_format_args,
&lt;&#x2F;span&gt;&lt;span&gt;    clippy::deref_addrof
&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::fmt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;A;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;A {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span&gt;B {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;A {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;fmt::Display &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;A {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;fmt::Formatter) -&amp;gt; fmt::Result {
&lt;&#x2F;span&gt;&lt;span&gt;        write!(f, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: A) {
&lt;&#x2F;span&gt;&lt;span&gt;    a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With the expected output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;error: using `self.to_string` in `fmt::Display` implementation will cause infinite recursion
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; $DIR&#x2F;recursive_format_impl.rs:29:25
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;LL |         write!(f, &amp;quot;{}&amp;quot;, self.to_string())
&lt;&#x2F;span&gt;&lt;span&gt;   |                         ^^^^^^^^^^^^^^^^
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;   = note: `-D clippy::recursive-format-impl` implied by `-D warnings`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;i.e. it only triggers for the &lt;code&gt;fmt::Display&lt;&#x2F;code&gt; impl for A and not in the impl of
trait &lt;code&gt;B&lt;&#x2F;code&gt; for struct &lt;code&gt;A&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;check-self-in-format-args&quot;&gt;check_self_in_format_args&lt;&#x2F;h3&gt;
&lt;p&gt;The original case to solve is slightly more complicated. First we need
to find the use of the format macro e.g. &lt;code&gt;write!(...)&lt;&#x2F;code&gt; inside the
Display&#x2F;Debug impl, and then we need to check the arguments inside the macro call
(to check whether any of them resolve to &lt;code&gt;self&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Here we use some of the shared Clippy utils like &lt;code&gt;root_macro_call_first_node()&lt;&#x2F;code&gt; which 
make it much easier to deal with macros. This makes the first part quite
straightforward:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;check_self_in_format_args&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;tcx&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cx&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;LateContext&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;tcx&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;expr&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;tcx &lt;&#x2F;span&gt;&lt;span&gt;Expr&amp;lt;&amp;#39;_&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;impl_trait&lt;&#x2F;span&gt;&lt;span&gt;: FormatTrait) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; First find the call of the format macro
&lt;&#x2F;span&gt;&lt;span&gt;    if_chain! {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(outer_macro) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;root_macro_call_first_node&lt;&#x2F;span&gt;&lt;span&gt;(cx, expr);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let&lt;&#x2F;span&gt;&lt;span&gt; macro_def_id = outer_macro.def_id;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(format_args) = FormatArgsExpn::find_nested(cx, expr, outer_macro.expn);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_format_macro&lt;&#x2F;span&gt;&lt;span&gt;(cx, macro_def_id);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(args) = format_args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        then {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; arg in args {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; It is okay to use a Display method in a Debug impl, and vice versa
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; arg.format_trait != impl_trait.name {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Check if arg resolves to self
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;check_format_arg_self&lt;&#x2F;span&gt;&lt;span&gt;(cx, expr, &amp;amp;arg, impl_trait);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As noted in the original example, checking the arguments to the format
macro is slightly complicated by the fact we need to handle references
and de-references. Here this is done with the use of the
&lt;code&gt;peel_ref_operators()&lt;&#x2F;code&gt; utils function.&lt;&#x2F;p&gt;
&lt;p&gt;After that, it&#x27;s just a case of checking whether the result is &lt;code&gt;self&lt;&#x2F;code&gt; or
not.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;check_format_arg_self&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cx&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;LateContext&amp;lt;&amp;#39;_&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;expr&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;Expr&amp;lt;&amp;#39;_&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;FormatArgsArg&amp;lt;&amp;#39;_&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;impl_trait&lt;&#x2F;span&gt;&lt;span&gt;: FormatTrait) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Check each arg in format calls - do we ever use Display on self (directly or via deref)?
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Handle multiple dereferencing of references e.g. &amp;amp;&amp;amp;self
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Handle dereference of &amp;amp;self -&amp;gt; self that is equivalent (i.e. via *self in fmt() impl)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Since the argument to fmt is itself a reference: &amp;amp;self
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; reference = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;peel_ref_operators&lt;&#x2F;span&gt;&lt;span&gt;(cx, arg.value);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; map = cx.tcx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;hir&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Is the reference self?
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;path_to_local&lt;&#x2F;span&gt;&lt;span&gt;(reference).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| map.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;(x)) == Some(kw::SelfLower) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; FormatTrait { name, .. } = impl_trait;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;span_lint&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            cx,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;RECURSIVE_FORMAT_IMPL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            expr.span,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;amp;format!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;using `self` as `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{name}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;` in `impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{name}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;` will cause infinite recursion&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;        );
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;things-to-consider&quot;&gt;Things to consider&lt;&#x2F;h3&gt;
&lt;p&gt;Note that we never execute the code itself, Clippy is entirely static
analysis. However, the fact that we have access to the type information
means we can still handle things like checking what the final type of an
expression will be after applying dereferences, etc. as done here.&lt;&#x2F;p&gt;
&lt;p&gt;However, one must take care not to create false positives by
accidentally over-simplifying the checks. For example, my original code
just compared the final type of the expression of the argument in the
format macro with the &lt;code&gt;Self&lt;&#x2F;code&gt; type in the impl block, to avoid dealing with references and de-references directly.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; arg_ty = cx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;typeck_results&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expr_ty_adjusted&lt;&#x2F;span&gt;&lt;span&gt;(arg.value);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; self_ty = cx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;typeck_results&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;node_type&lt;&#x2F;span&gt;&lt;span&gt;(self_hir_id);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; self_ty == arg_ty;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But this approach doesn&#x27;t work with enums (thanks to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;pull&#x2F;8188#issuecomment-1002426663&quot;&gt;@mikerite spotting
this so quickly!&lt;&#x2F;a&gt;)
such as in the following example (now a test case):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;Tree {
&lt;&#x2F;span&gt;&lt;span&gt;    Leaf,
&lt;&#x2F;span&gt;&lt;span&gt;    Node(Vec&amp;lt;Tree&amp;gt;),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;fmt::Display &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Tree {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;fmt::Formatter) -&amp;gt; fmt::Result {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            Tree::Leaf =&amp;gt; write!(f, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;            Tree::Node(children) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                write!(f, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)?;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; child in children.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                    write!(f, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, child)?;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                write!(f, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code is fine and won&#x27;t trigger infinite recursion since Nodes will
always end in leaves, or have no children. But this would trigger a false positive
if we only compare the types, since both enum variants have the same type when checked
(since enum variants are not their own types yet - see the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;1450&quot;&gt;Types for enum variants RFC&lt;&#x2F;a&gt; and 
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;2593&quot;&gt;Enum variant types RFC&lt;&#x2F;a&gt; for details on possible future changes to that).&lt;&#x2F;p&gt;
&lt;p&gt;The corrected lint check works since &lt;code&gt;self&lt;&#x2F;code&gt; never refers to the same
entity as &lt;code&gt;child&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Bear in mind that false negatives are greatly preferable to false
positives, so always try to think of possible edge cases for testing,
and lean towards more conservative solutions.&lt;&#x2F;p&gt;
&lt;p&gt;Note it is still possible to write code that will trigger infinite
recursion by similar means, but not be detected here. Such as calling
&lt;code&gt;to_string()&lt;&#x2F;code&gt; on a type inside our Display impl, whose Display impl in turn calls &lt;code&gt;to_string()&lt;&#x2F;code&gt;
on this type, etc. The aim is only to cover cases which are likely to
come up when writing code in practice (after all we cannot solve the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Halting_problem&quot;&gt;Halting problem&lt;&#x2F;a&gt;!).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;If you run Clippy on &lt;a href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=690cb006ae868d481ed830540bf1b52c&quot;&gt;the original example&lt;&#x2F;a&gt; you
will now see the following error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;error: using `self` as `Display` in `impl Display` will cause infinite recursion
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; src&#x2F;main.rs:15:9
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;15 |         write!(f, &amp;quot;{}&amp;quot;, &amp;amp;*self)
&lt;&#x2F;span&gt;&lt;span&gt;   |         ^^^^^^^^^^^^^^^^^^^^^^^
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;   = note: `#[deny(clippy::recursive_format_impl)]` on by default
&lt;&#x2F;span&gt;&lt;span&gt;   = help: for further information visit https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rust-clippy&#x2F;master&#x2F;index.html#recursive_format_impl
&lt;&#x2F;span&gt;&lt;span&gt;   = note: this error originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s a great feeling to go from first hitting this issue, all the way to
seeing the check running directly in the Rust playground.&lt;&#x2F;p&gt;
&lt;p&gt;At the time of writing, the main code for the lint is available at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;blob&#x2F;master&#x2F;clippy_lints&#x2F;src&#x2F;format_impl.rs&quot;&gt;clippy_lints&#x2F;src&#x2F;format_impl.rs&lt;&#x2F;a&gt;
and the UI tests are available at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;blob&#x2F;master&#x2F;tests&#x2F;ui&#x2F;recursive_format_impl.rs&quot;&gt;tests&#x2F;ui&#x2F;recursive_format_impl.rs&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;blob&#x2F;master&#x2F;tests&#x2F;ui&#x2F;recursive_format_impl.stderr&quot;&gt;tests&#x2F;ui&#x2F;recursive_format_impl.stderr&lt;&#x2F;a&gt;.
My original Pull Request (with corrections) is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;pull&#x2F;8188&quot;&gt;#8188&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;Overall, I was very impressed by how easy it was to write the lint. The
Clippy team has done great work on providing examples, quick code
reviews and a lot of easy-to-use shared utils code.&lt;&#x2F;p&gt;
&lt;p&gt;If you ever find a similar nagging issue, no matter how small, I highly
encourage you to at least create an issue on Github so you can open
discussion around possible solutions and similar issues. In my case, it
took me almost two months to go from first seeing the issue to 
realising I could actually add the lint myself.&lt;&#x2F;p&gt;
&lt;p&gt;If you do wish to contribute a lint to Clippy, I recommend
reading the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;blob&#x2F;master&#x2F;CONTRIBUTING.md&quot;&gt;Contribution guidelines&lt;&#x2F;a&gt;,
the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;blob&#x2F;master&#x2F;doc&#x2F;basics.md&quot;&gt;basics for hacking on Clippy&lt;&#x2F;a&gt;
and the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;blob&#x2F;master&#x2F;doc&#x2F;adding_lints.md&quot;&gt;documentation on adding lints&lt;&#x2F;a&gt;, 
and posting on the &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.zulipchat.com&#x2F;#narrow&#x2F;stream&#x2F;257328-clippy&quot;&gt;clippy Zulip stream&lt;&#x2F;a&gt; for additional help&#x2F;discussion.
The &lt;a href=&quot;https:&#x2F;&#x2F;rustc-dev-guide.rust-lang.org&#x2F;hir.html&quot;&gt;rustc dev guide&lt;&#x2F;a&gt;
can be useful for additional documentation on the High-level
Intermediate Representation (HIR), Diagnostic Items, and other concepts.
Finally, the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;blob&#x2F;master&#x2F;doc&#x2F;common_tools_writing_lints.md&quot;&gt;Common tools for writing lints&lt;&#x2F;a&gt; 
is also useful for recognising common operations (as well as reading
through the existing lints and the &lt;code&gt;clippy_utils&lt;&#x2F;code&gt; crate).&lt;&#x2F;p&gt;
&lt;p&gt;In my opinion this whole experience perfectly demonstrates Rust&#x27;s value
of empowerment for users and developers. I couldn&#x27;t imagine making 
a similar contribution to the tooling of any other language, and it was greatly
facilitated by the efforts of reviewers and prior contributors.&lt;&#x2F;p&gt;
&lt;p&gt;I hope writing up this example as a first-time contributor will help
others to also start contributing. It is through thousands of
contributions like this (how ever small or large) that Rust has become
the least frustrating and most empowering programming language.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Writing a simple AWS Lambda Custom Runtime in Rust</title>
		<published>2020-10-24T00:00:00+00:00</published>
		<updated>2020-10-24T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jamesmcm.github.io/blog/lambda-runtime/" type="text/html"/>
		<id>https://jamesmcm.github.io/blog/lambda-runtime/</id>
		<content type="html">&lt;p&gt;I was recently reading more about the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;lambda_runtime&quot;&gt;lambda_runtime crate&lt;&#x2F;a&gt;
and came across &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;awslabs&#x2F;aws-lambda-rust-runtime&#x2F;issues&#x2F;259&quot;&gt;this issue&lt;&#x2F;a&gt; 
where it is mentioned that the &lt;code&gt;#[lambda]&lt;&#x2F;code&gt; procedural macro can be
misleading and cause problems if used naively.&lt;&#x2F;p&gt;
&lt;p&gt;In this post we will implement our own simple custom runtime for
AWS Lambda in Rust, and understand the reasons behind this issue.&lt;&#x2F;p&gt;
&lt;p&gt;The code used in this blog post is available on Github in 
my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;micro_lambda&quot;&gt;micro_lambda repository&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Opinions expressed are solely my own and do not express the views or opinions of my employer.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;aws-lambda&quot;&gt;AWS Lambda&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;lambda&#x2F;&quot;&gt;AWS Lambda&lt;&#x2F;a&gt; is a serverless computing service. I have previously covered
setting up serverless data pipelines &lt;a href=&quot;http:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;2020&#x2F;04&#x2F;19&#x2F;data-engineering-with-rust-and-aws-lambda&#x2F;#en&quot;&gt;from Excel files on S3&lt;&#x2F;a&gt;, and
&lt;a href=&quot;http:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;2020&#x2F;08&#x2F;29&#x2F;rust-ses&#x2F;#en&quot;&gt;from email attachments with SES and Workmail&lt;&#x2F;a&gt; using Rust and the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;awslabs&#x2F;aws-lambda-rust-runtime&quot;&gt;lambda_runtime crate&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;custom-runtimes&quot;&gt;Custom Runtimes&lt;&#x2F;h2&gt;
&lt;p&gt;A &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;lambda&#x2F;latest&#x2F;dg&#x2F;runtimes-custom.html&quot;&gt;Custom Runtime&lt;&#x2F;a&gt; allows you to run any x86_64 binary as an AWS Lambda
function, by providing the runtime code to interact with the &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;lambda&#x2F;latest&#x2F;dg&#x2F;runtimes-api.html&quot;&gt;AWS Lambda
Custom Runtime API&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The idea is you first retrieve some of the Lambda function settings
provided to the executable as environment variables, run any one-time or
shared initialisation code, and then call the handler function (i.e. the
function that will be called for each invocation), passing it the AWS
Lambda event JSON.&lt;&#x2F;p&gt;
&lt;p&gt;In summary, the runtime code should:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Read relevant environment variables, in our case only &lt;code&gt;AWS_LAMBDA_RUNTIME_API&lt;&#x2F;code&gt;
is necessary since we will include the runtime and handler function together in our final binary.&lt;&#x2F;li&gt;
&lt;li&gt;Run any initialisation code - note in our case this could be defined
either as part of the runtime library crate, or in the application
code prior to passing the handler function to the Lambda runtime.&lt;&#x2F;li&gt;
&lt;li&gt;Loop indefinitely, polling the Lambda Runtime API for new
invocations and sending these to the handler function - then POST the
output to either the invocation response or error endpoint.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;It&#x27;s important to note that a single runtime execution may serve several
Lambda function invocations if they arrive close together  - this is
called a &lt;em&gt;warm start&lt;&#x2F;em&gt;. As opposed to a &lt;em&gt;cold start&lt;&#x2F;em&gt; where AWS Lambda has
to spin up the container and start the runtime. For functions that need
to always respond with a very low latency, some users even schedule
dummy invocations (i.e. with a specific Cloudwatch event, etc.)
to keep the runtime running and ensure warm starts.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lambda-runtime-api&quot;&gt;Lambda Runtime API&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;lambda&#x2F;latest&#x2F;dg&#x2F;runtimes-api.html&quot;&gt;AWS Lambda Runtime API&lt;&#x2F;a&gt; currently contains only four endpoints:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Initalization error - for if the initialization steps fail (i.e. doing one-time initializations for global resources, etc.) prior to calling the handler function: POST &lt;code&gt;&#x2F;runtime&#x2F;init&#x2F;error&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Next invocation - an endpoint from which to GET the invocation event and some metadata (AWS Request ID): GET &lt;code&gt;&#x2F;runtime&#x2F;invocation&#x2F;next&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Invocation response - an endpoint to POST the successful response of the handler function: POST &lt;code&gt;&#x2F;runtime&#x2F;invocation&#x2F;${AwsRequestId}&#x2F;response&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Invocation error - an endpoint to POST the error message of the handler function, if it fails: POST &lt;code&gt;&#x2F;runtime&#x2F;invocation&#x2F;${AwsRequestId}&#x2F;error&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The base URL for each API call is &lt;code&gt;http:&#x2F;&#x2F;${AWS_LAMBDA_RUNTIME_API}&#x2F;2018-06-01&#x2F;&lt;&#x2F;code&gt; - note we do not need TLS.&lt;&#x2F;p&gt;
&lt;p&gt;We need to extract the AWS Request ID from the headers returned in the
next invocation response. The body of the response is the JSON for the
triggering event itself (note that the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;LegNeato&#x2F;aws-lambda-events&quot;&gt;aws_lambda_events crate&lt;&#x2F;a&gt; has
templates for deserializing the events from AWS services).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;runtime-library&quot;&gt;Runtime library&lt;&#x2F;h2&gt;
&lt;p&gt;Using all of the above, we can implement a custom runtime in a very
small amount of code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; std::result::Result&amp;lt;String, String&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Could initialise one-time resources here
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; If initialisation error, POST to &#x2F;runtime&#x2F;init&#x2F;error
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; aws_lambda_runtime_api = std::env::var(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;AWS_LAMBDA_RUNTIME_API&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Loop getting new invocation events and passing to handler
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; invocation = ureq::get(&amp;amp;format!(
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;2018-06-01&#x2F;runtime&#x2F;invocation&#x2F;next&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            aws_lambda_runtime_api
&lt;&#x2F;span&gt;&lt;span&gt;        ))
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;call&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Extract AWS Request ID for in order to post responses
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; request_id = invocation
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;header&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Lambda-Runtime-Aws-Request-Id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Run the handler function and get the output (note above we
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; specified this will be a Result&amp;lt;String, String&amp;gt; )
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; response = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span&gt;(invocation.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_string&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; response {
&lt;&#x2F;span&gt;&lt;span&gt;	    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; If succeeded post output to response
&lt;&#x2F;span&gt;&lt;span&gt;            Ok(res) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _resp = ureq::post(&amp;amp;format!(
&lt;&#x2F;span&gt;&lt;span&gt;                    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;2018-06-01&#x2F;runtime&#x2F;invocation&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;response&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                    aws_lambda_runtime_api, request_id
&lt;&#x2F;span&gt;&lt;span&gt;                ))
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send_string&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;res);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            Err(err) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; If invocation error, POST to &#x2F;runtime&#x2F;invocation&#x2F;AwsRequestId&#x2F;error
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _resp = ureq::post(&amp;amp;format!(
&lt;&#x2F;span&gt;&lt;span&gt;                    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;2018-06-01&#x2F;runtime&#x2F;invocation&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;error&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                    aws_lambda_runtime_api, request_id
&lt;&#x2F;span&gt;&lt;span&gt;                ))
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send_string&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;err.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this case we just call &lt;code&gt;lambda()&lt;&#x2F;code&gt; with a function that takes a &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;
(which will be the event JSON), and returns a &lt;code&gt;Result&amp;lt;String, String&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Note that in practice you would want to support different response and error types
(perhaps anything that implements Display), and possibly also
asynchronous handler functions, etc. - this is what the lambda_runtime
crate does.&lt;&#x2F;p&gt;
&lt;p&gt;This code is available on Github in 
my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;micro_lambda&quot;&gt;micro_lambda repository&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to follow along, the 
&lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;lambda&#x2F;latest&#x2F;dg&#x2F;runtimes-walkthrough.html&quot;&gt;tutorial on publishing a custom runtime&lt;&#x2F;a&gt; is
also very useful - covering an example of an AWS Lambda custom runtime in bash.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;example-lambda-function&quot;&gt;Example Lambda function&lt;&#x2F;h2&gt;
&lt;p&gt;Using the above library crate, a Lambda function might look like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;micro_lambda::lambda;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Put one-time initialisations (loggers, etc.)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; before calling lambda()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;(handler);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; std::result::Result&amp;lt;String, String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, event);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; event.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fail&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Err(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ERROR&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SUCCESS&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can then upload this to AWS Lambda, and verify that it works for a
successful test case:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;lambda-runtime&#x2F;lambda_success.png&quot; alt=&quot;Success test case&quot; title=&quot;Success test case&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And for an error test case:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;lambda-runtime&#x2F;lambda_error.png&quot; alt=&quot;Error test case&quot; title=&quot;Error test case&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Note when deploying, you will likely want to use static linking by using
the musl target to avoid issues with glibc version mismatches:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cargo build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --release --target&lt;&#x2F;span&gt;&lt;span&gt;=x86_64-unknown-linux-musl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cp .&#x2F;target&#x2F;x86_64-unknown-linux-musl&#x2F;release&#x2F;bootstrap .&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; strip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --strip-all&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;bootstrap
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; zip bootstrap.zip bootstrap
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you do use dynamic linking with glibc, then consider setting the
Lambda function to use Amazon Linux 2 (AL2) in the AWS Lambda Console, so the
container will have a newer version of glibc at least.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lambda-runtime-and-lambda&quot;&gt;lambda_runtime and #[lambda]&lt;&#x2F;h2&gt;
&lt;p&gt;Now we can understand the comment about the &lt;code&gt;#[lambda]&lt;&#x2F;code&gt; macro in the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;awslabs&#x2F;aws-lambda-rust-runtime&#x2F;issues&#x2F;259&quot;&gt;aforementioned Github issue&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Due to how cold&#x2F;warm starts work on Lambda,
the naive approach of setting up resources (such as loggers)
within a #[lambda]-decorated block will cause the logger initializer
to panic in a warm start.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The &lt;code&gt;#[lambda]&lt;&#x2F;code&gt; macro allows you to write &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;awslabs&#x2F;aws-lambda-rust-runtime&#x2F;blob&#x2F;master&#x2F;lambda&#x2F;examples&#x2F;hello.rs&quot;&gt;simple code&lt;&#x2F;a&gt; like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;: Value, _: Context) -&amp;gt; Result&amp;lt;Value, Error&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(event)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But it is important to note that in this case the function being wrapped
is treated as the &lt;em&gt;handler function&lt;&#x2F;em&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;awslabs&#x2F;aws-lambda-rust-runtime&#x2F;blob&#x2F;master&#x2F;lambda&#x2F;examples&#x2F;hello-without-macro.rs&quot;&gt;here is the relevant code&lt;&#x2F;a&gt;).
That is, any initialisation should take
place &lt;em&gt;before&lt;&#x2F;em&gt; the handler function is called, so that it is only run
once even if there are multiple invocations before the runtime is
terminated (this is a &amp;quot;warm start&amp;quot;).&lt;&#x2F;p&gt;
&lt;p&gt;This causes problems when new users see the above example, and put
logger intialisation code, etc. in there directly, which will then fail
in the cases of warm starts - which might appear as sporadic and
confusing failures to the developer.&lt;&#x2F;p&gt;
&lt;p&gt;This can be fixed by 
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;awslabs&#x2F;aws-lambda-rust-runtime&#x2F;blob&#x2F;master&#x2F;lambda&#x2F;examples&#x2F;hello-without-macro.rs&quot;&gt;separating out the handler invocation&lt;&#x2F;a&gt;,
just like we did in our earlier code. In this case it could be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;(), Error&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Put any one-time initialisation code up here
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Before lambda::run is called!
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; func = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;handler_fn&lt;&#x2F;span&gt;&lt;span&gt;(func);
&lt;&#x2F;span&gt;&lt;span&gt;    lambda::run(func).await?;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;: Value, _: Context) -&amp;gt; Result&amp;lt;Value, Error&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(event)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;I hope it&#x27;s clear now how the &lt;code&gt;#[lambda]&lt;&#x2F;code&gt; macro can cause confusion, and
how to avoid this issue if you write your own Lambda functions.&lt;&#x2F;p&gt;
&lt;p&gt;This might seem a bit overkill for covering such a simple issue, but as
Richard Feynman said:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;What I cannot create, I do not understand.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;If you look at the the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;micro_lambda&quot;&gt;micro_lambda repository&lt;&#x2F;a&gt;,
you&#x27;ll see I tried to reduce the binary size by some means. I&#x27;d
originally wanted to write this as 
a &lt;a href=&quot;https:&#x2F;&#x2F;rust-embedded.github.io&#x2F;book&#x2F;intro&#x2F;no-std.html&quot;&gt;#[no_std] crate&lt;&#x2F;a&gt;
but the requirement to make HTTP requests made this too difficult,
considering the networking required. If you do know how to handle this
well please create an issue or PR on the repo!&lt;&#x2F;p&gt;
&lt;p&gt;Another possible extension of this would be to support the 
&lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;lambda&#x2F;latest&#x2F;dg&#x2F;runtimes-extensions-api.html&quot;&gt;AWS Lambda Extensions API&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>What should I program?</title>
		<published>2020-10-11T00:00:00+00:00</published>
		<updated>2020-10-11T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jamesmcm.github.io/blog/programming-projects/" type="text/html"/>
		<id>https://jamesmcm.github.io/blog/programming-projects/</id>
		<content type="html">&lt;p&gt;Doing projects is often the best way to get more programming experience
and learn about new concepts and problem domains. However, a common issue 
is finding feasible projects of a reasonable scope that can 
produce something useful in a few weekends.&lt;&#x2F;p&gt;
&lt;p&gt;In this post I will list some classic project ideas for beginner and
intermediate programmers (most of which should be achievable in 2-3
weekends), along with many other project ideas I&#x27;ve had but have never
had time to implement (and a few which I did).&lt;&#x2F;p&gt;
&lt;p&gt;There are many long lists of project ideas available on Github, like
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;danistefanovic&#x2F;build-your-own-x&quot;&gt;build-your-own-x&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aceking007&#x2F;100ProjectsOfCode&quot;&gt;100 Projects of Code&lt;&#x2F;a&gt;
but these often lack a real description and justification of the
projects. In this article I will go more in-depth with the different project ideas.&lt;&#x2F;p&gt;
&lt;p&gt;Within each section the projects are ordered in ascending difficulty &#x2F;
time investment.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Opinions expressed are solely my own and do not express the views or opinions of my employer.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;classic-projects&quot;&gt;Classic projects&lt;&#x2F;h1&gt;
&lt;p&gt;In this section I list some classic project ideas, in ascending order of
time investment &#x2F; difficulty. I&#x27;d recommend these to all new
programmers.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sudoku-solver&quot;&gt;Sudoku solver&lt;&#x2F;h2&gt;
&lt;p&gt;Since a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Sudoku&quot;&gt;Sudoku&lt;&#x2F;a&gt; grid is only 9x9, it is feasible to just use Depth First
Search and check if the grid is still valid at each step (backtracking
when it isn&#x27;t).&lt;&#x2F;p&gt;
&lt;p&gt;This approach means this is a very simple problem which can be implemented in
less than an hour, and could be good experience if you are new to graph
search algorithms.&lt;&#x2F;p&gt;
&lt;p&gt;Here is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;scala-sudoku-solver&#x2F;blob&#x2F;master&#x2F;src&#x2F;main&#x2F;scala&#x2F;sudoku&#x2F;Main.scala&quot;&gt;my implementation in Scala&lt;&#x2F;a&gt; (this was my first Scala
program).&lt;&#x2F;p&gt;
&lt;p&gt;To make it more interesting, you could solve it using &lt;a href=&quot;https:&#x2F;&#x2F;www.adrian.idv.hk&#x2F;2019-01-30-simanneal&#x2F;&quot;&gt;simulated annealing&lt;&#x2F;a&gt; or
&lt;a href=&quot;https:&#x2F;&#x2F;www.researchgate.net&#x2F;publication&#x2F;256087959_Finding_Solutions_to_Sudoku_Puzzles_Using_Human_Intuitive_Heuristics&quot;&gt;other methods&lt;&#x2F;a&gt;.
Another interesting project using graph search algorithms is &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Maze_solving_algorithm&quot;&gt;maze solving&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tcp-client-server-or-proxy&quot;&gt;TCP client&#x2F;server or proxy&lt;&#x2F;h2&gt;
&lt;p&gt;Writing a TCP client and server, or a TCP proxy server, will force you
to work with multithreading or asynchronous programming (or both - see
&lt;a href=&quot;http:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;2020&#x2F;05&#x2F;06&#x2F;a-practical-introduction-to-async-programming-in-rust&#x2F;#en&quot;&gt;my previous post on asynchronous programming&lt;&#x2F;a&gt; 
if you are unsure of the difference).&lt;&#x2F;p&gt;
&lt;p&gt;I recently wrote a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;basic_tcp_proxy&quot;&gt;simple synchronous TCP proxy server&lt;&#x2F;a&gt; in Rust for
use in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&quot;&gt;vopono&lt;&#x2F;a&gt; without adding a 
lot of async dependencies. You could also write a
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dpohanlon&#x2F;Transfer&quot;&gt;simple file transfer program&lt;&#x2F;a&gt;
for example.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chip-8-emulator&quot;&gt;CHIP-8 emulator&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;CHIP-8&quot;&gt;CHIP-8&lt;&#x2F;a&gt; is an interpreted
programming language, that was used on several microcomputers in the
late 1970s. &lt;&#x2F;p&gt;
&lt;p&gt;The language is effectively a high-level instruction set,
where the opcodes correspond to different instructions from low-level
mathematical operations to high-level operations like drawing on the
screen.&lt;&#x2F;p&gt;
&lt;p&gt;I highly recommend reading 
&lt;a href=&quot;http:&#x2F;&#x2F;devernay.free.fr&#x2F;hacks&#x2F;chip8&#x2F;C8TECH10.HTM&quot;&gt;Cowgod&#x27;s Chip-8 Technical Reference&lt;&#x2F;a&gt;
if you choose to do this project. I wrote &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;chip8go&quot;&gt;an implementation in Go&lt;&#x2F;a&gt;
which includes the documentation of the opcodes and some issues which I hit 
mentioned in the README.&lt;&#x2F;p&gt;
&lt;p&gt;Here is my CHIP-8 interpreter running Breakout:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;programming-projects&#x2F;breakout.png&quot; alt=&quot;My CHIP-8 interpreter running Breakout&quot; title=&quot;My CHIP-8 interpreter running Breakout&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you enjoy building an emulator&#x2F;Virtual Machine I&#x27;d also recommend the 
&lt;a href=&quot;https:&#x2F;&#x2F;adventofcode.com&#x2F;2019&#x2F;day&#x2F;2&quot;&gt;Advent of Code 2019&lt;&#x2F;a&gt; intcode problems
(starting on day 2) which involve building a VM to execute the intcode instructions.&lt;&#x2F;p&gt;
&lt;p&gt;Then if you really want a greater challenge you could try implementing a 
NES or Gameboy emulator (also check out &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;EmuDev&#x2F;&quot;&gt;Reddit&#x27;s &#x2F;r&#x2F;EmuDev&lt;&#x2F;a&gt;). The &lt;a href=&quot;http:&#x2F;&#x2F;wiki.nesdev.com&#x2F;w&#x2F;index.php&#x2F;Nesdev_Wiki&quot;&gt;NesDev Wiki&lt;&#x2F;a&gt;
is a great resource for the former, combined with &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=nViZg02IMQo&amp;amp;list=PLrOv9FMX8xJHqMvSGB_9G9nZZ_4IgteYf&quot;&gt;OneLoneCoder&#x27;s video series&lt;&#x2F;a&gt;. 
For the Gameboy the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gbdev&#x2F;awesome-gbdev&quot;&gt;gbdev community&lt;&#x2F;a&gt; 
has a lot of comprehensive documentation. Here is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BlueBlazin&#x2F;gbemu&quot;&gt;a Gameboy emulator compiled to WebAssembly&lt;&#x2F;a&gt; for
example.&lt;&#x2F;p&gt;
&lt;p&gt;A great advanced project idea would be a SNES emulator compiled to WebAssembly
that could play peer-to-peer multiplayer over the internet by using
WebRTC and verifying that both players have the same ROM. The (possibly
copyrighted) ROM itself would not need to be sent over the network.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;nand2tetris&quot;&gt;Nand2Tetris&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;www.nand2tetris.org&#x2F;&quot;&gt;Nand2Tetris course&lt;&#x2F;a&gt; covers everything
from building an &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Arithmetic_logic_unit&quot;&gt;Arithmetic Logic Unit&lt;&#x2F;a&gt; using a simple Hardware
Description Language in the &lt;a href=&quot;https:&#x2F;&#x2F;www.coursera.org&#x2F;learn&#x2F;build-a-computer&quot;&gt;first course&lt;&#x2F;a&gt;, to building an assembler for a
simple instruction set and a compiler for a simple Java-inspired language
in the &lt;a href=&quot;https:&#x2F;&#x2F;www.coursera.org&#x2F;learn&#x2F;nand2tetris2&quot;&gt;second course&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This is the best course I have ever taken, and I wholeheartedly
recommend it to anyone who hasn&#x27;t completed it already. It is a very
hands-on and fun computer architecture course with the basics of
compilers and operating systems development included too. If you do try
this course, I&#x27;ve uploaded the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;HackKeepUp&quot;&gt;KeepUp game I made for Week 8 to Github&lt;&#x2F;a&gt; so you can try it out.&lt;&#x2F;p&gt;
&lt;p&gt;Here is my assembled game running on the Hack Virtual Machine:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;programming-projects&#x2F;hackku.png&quot; alt=&quot;My KeepUp game running in the Hack Virtual Machine&quot; title=&quot;My KeepUp game running in the Hack Virtual Machine&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you find the course interesting, for computer architecture projects
(in addition to the emulator ones mentioned above), you could try
&lt;a href=&quot;http:&#x2F;&#x2F;www.projectoberon.com&#x2F;&quot;&gt;Project Oberon&lt;&#x2F;a&gt;, for a simpler project
there is also the &lt;a href=&quot;https:&#x2F;&#x2F;justinmeiners.github.io&#x2F;lc3-vm&#x2F;&quot;&gt;Write your own Virtual Machine&lt;&#x2F;a&gt; tutorial.&lt;&#x2F;p&gt;
&lt;p&gt;For compilers and programming language development, you might be
interested in reading &lt;a href=&quot;https:&#x2F;&#x2F;craftinginterpreters.com&#x2F;&quot;&gt;Crafting Interpreters&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;interpreterbook.com&#x2F;&quot;&gt;Writing an interpreter in Go&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;compilerbook.com&#x2F;&quot;&gt;Writing a compiler in Go&lt;&#x2F;a&gt; and the 
&lt;a href=&quot;https:&#x2F;&#x2F;createlang.rs&#x2F;&quot;&gt;Create your own programming language with Rust&lt;&#x2F;a&gt;
online book.&lt;&#x2F;p&gt;
&lt;p&gt;For Operating Systems development, the &lt;a href=&quot;https:&#x2F;&#x2F;wiki.osdev.org&#x2F;Expanded_Main_Page&quot;&gt;osdev Wiki&lt;&#x2F;a&gt;
has a lot of comprehensive resources. There is also the 
&lt;a href=&quot;https:&#x2F;&#x2F;os.phil-opp.com&#x2F;&quot;&gt;Writing an OS in Rust&lt;&#x2F;a&gt; blog series, and the
rust-embedded group&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-embedded&#x2F;rust-raspberrypi-OS-tutorials&quot;&gt;Rust RaspberryPi OS tutorials&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Code-Language-Computer-Hardware-Software&#x2F;dp&#x2F;0735611319&quot;&gt;Charles Petzold&#x27;s Code&lt;&#x2F;a&gt;
is a lighter and slightly dated book covering similar areas in computer
architecture, which I&#x27;d still recommend reading as a companion book and
some appreciation of the history (just like &lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Just-Fun-Story-Accidental-Revolutionary&#x2F;dp&#x2F;0066620732&#x2F;&quot;&gt;Linus Torvald&#x27;s biography&lt;&#x2F;a&gt; is also
good for a very light read about the history of Linux).&lt;&#x2F;p&gt;
&lt;p&gt;Finally, since this entry is actually a course, I also wanted to
recommend other excellent online courses I have completed:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Andrew Ng&#x27;s famous &lt;a href=&quot;https:&#x2F;&#x2F;www.coursera.org&#x2F;learn&#x2F;machine-learning&quot;&gt;Machine Learning course&lt;&#x2F;a&gt; (even if it is slightly
dated still using Octave now).&lt;&#x2F;li&gt;
&lt;li&gt;Stanford&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;online.stanford.edu&#x2F;courses&#x2F;soe-ycs0007-mining-massive-data-sets&quot;&gt;Mining Massive Datasets&lt;&#x2F;a&gt;
(&lt;a href=&quot;http:&#x2F;&#x2F;www.mmds.org&#x2F;&quot;&gt;and the book here&lt;&#x2F;a&gt;) covering different algorithms for processing large datasets.&lt;&#x2F;li&gt;
&lt;li&gt;Dan Boneh&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;www.coursera.org&#x2F;learn&#x2F;crypto&quot;&gt;Cryptography&lt;&#x2F;a&gt; course
(&lt;a href=&quot;http:&#x2F;&#x2F;toc.cryptobook.us&#x2F;&quot;&gt;and the book here&lt;&#x2F;a&gt;) - I&#x27;d also recommend completing
the &lt;a href=&quot;https:&#x2F;&#x2F;cryptopals.com&#x2F;&quot;&gt;cryptopals problems&lt;&#x2F;a&gt; if you find this interesting.&lt;&#x2F;li&gt;
&lt;li&gt;Stanford&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;www.coursera.org&#x2F;specializations&#x2F;algorithms&quot;&gt;Algorithms&lt;&#x2F;a&gt;
(&lt;a href=&quot;http:&#x2F;&#x2F;www.algorithmsilluminated.org&#x2F;&quot;&gt;and the book here&lt;&#x2F;a&gt;) course covering
popular algorithms and data structures.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;ray-tracer&quot;&gt;Ray Tracer&lt;&#x2F;h2&gt;
&lt;p&gt;Implementing a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Ray_tracing_(graphics)&quot;&gt;Ray Tracer&lt;&#x2F;a&gt; is a great project for producing a visible
result that you can share with others. I highly recommend &lt;a href=&quot;https:&#x2F;&#x2F;pragprog.com&#x2F;titles&#x2F;jbtracer&#x2F;the-ray-tracer-challenge&#x2F;&quot;&gt;The Ray Tracer Challenge book&lt;&#x2F;a&gt;
(and don&#x27;t forget &lt;a href=&quot;http:&#x2F;&#x2F;www.raytracerchallenge.com&#x2F;#bonus&quot;&gt;the bonus chapters&lt;&#x2F;a&gt; at the end!).
The book uses Test-Driven Development and does not prescribe a specific
programming language.&lt;&#x2F;p&gt;
&lt;p&gt;I implemented the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;raytracer_challenge_scala&quot;&gt;project in Scala&lt;&#x2F;a&gt;.
If I were to do it again, I&#x27;d recommend making sure your primitives are
as fast as possible (i.e. use the appropriate linear algebra libraries)
to ensure better performance later on. I&#x27;d also recommend implementing
it such that it can compile to WebAssembly or JavaScript - e.g. with &lt;a href=&quot;https:&#x2F;&#x2F;sotrh.github.io&#x2F;learn-wgpu&#x2F;&quot;&gt;wgpu in Rust&lt;&#x2F;a&gt;
so that it is easy to show to
others whilst keeping good performance.&lt;&#x2F;p&gt;
&lt;p&gt;Here is an example image from my ray tracer implementation based on The Ray Tracer Challenge (the Scala logo model was created in Blender):&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;programming-projects&#x2F;scala_colour_big.png&quot; alt=&quot;Example image from my Ray Tracer implementation&quot; title=&quot;Example image from my Ray Tracer implementation&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There is also the &lt;a href=&quot;https:&#x2F;&#x2F;raytracing.github.io&#x2F;&quot;&gt;Ray Tracing in One Weekend series&lt;&#x2F;a&gt;
for an alternative resource aimed at C++.&lt;&#x2F;p&gt;
&lt;p&gt;Graphics programming is a very deep rabbit hole. If you find the Ray
Tracer project interesting, I&#x27;d definitely recommend Bisqwit&#x27;s YouTube channel
with videos on &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=HQYsFshbkYw&quot;&gt;DOOM-style rendering&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=PahbNFypubE&quot;&gt;Polygon Rasterisation&lt;&#x2F;a&gt; and 
&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=Nwfm6cpskIM&quot;&gt;Illumination&lt;&#x2F;a&gt; mostly in C
and C++.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;my-project-ideas&quot;&gt;My project ideas&lt;&#x2F;h1&gt;
&lt;p&gt;The above project ideas are very popular and almost a rite of passage
for new programmers now. In this section I will present many different
project ideas I&#x27;ve had but have not had time to fully implement (or even
begin!).&lt;&#x2F;p&gt;
&lt;p&gt;As in the previous section, projects are sorted by approximate difficulty in
ascending order.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;scrabble-solver&quot;&gt;Scrabble solver&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Scrabble&quot;&gt;Scrabble&lt;&#x2F;a&gt; &#x2F; Words With Friends 
is a popular word game where you must form the best words from your character
tiles to score the highest points against your opponent.&lt;&#x2F;p&gt;
&lt;p&gt;I wrote a simple &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;scala-scrabble-solver&quot;&gt;Scrabble solver in Scala&lt;&#x2F;a&gt;
which uses a more-or-less brute force approach of scoring every possible
word, using &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Regular_expression&quot;&gt;regular expressions&lt;&#x2F;a&gt;
to find possibilities from the word list for each
possible board position. The main issue is that it can be very slow for
complicated boards (i.e. near late-game) taking ~3-4 minutes to produce
the best solution, since it finds all possible moves and then ranks them.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;d really like to re-implement this in Rust so it could be built for
WebAssembly. Note that in WebAssembly multiple threads are not yet
supported in most browsers, so the solution would need to be
single-threaded. This also makes the performance very important and it
would be necessary to either improve the algorithm if possible (maybe
some sort of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Trie&quot;&gt;Trie structure&lt;&#x2F;a&gt; could be used instead of separate
regular expressions) or use heuristics to discard many positions&#x2F;moves
so they don&#x27;t all need to be evaluated.&lt;&#x2F;p&gt;
&lt;p&gt;But remember that the board bonuses can mean that score isn&#x27;t directly
correlated with word length, which can make it tricky to define a
heuristic to discard positions&#x2F;moves. Also you may often have the 3rd and 5th
letter of a word constrained but not the first letter for example, so
the data structure for the word list would need to account for that.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;crusader-kings-3-save-game-file-analyzer&quot;&gt;Crusader Kings 3 save-game file analyzer&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;store.steampowered.com&#x2F;app&#x2F;1158310&#x2F;Crusader_Kings_III&#x2F;&quot;&gt;Crusader Kings 3&lt;&#x2F;a&gt; 
is an excellent Grand Strategy game available on GNU&#x2F;Linux. Overall, the
game is a great improvement to its predecessor, however one feature that
it lacks is the &amp;quot;Chronicle&amp;quot; which, in Crusader Kings 2, documented the
history of your dynasty and their rise to power.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;d be great to build a WebAssembly based tool that could parse CK3
save game files and show the history of the game (using the title owner
change dates and their respective dynasties), the trees of different
characters&#x27; dynasties, and graphs for the number of alive dynasty
members over time, and other interesting metrics.&lt;&#x2F;p&gt;
&lt;p&gt;Whilst running the game in debug
mode - without Ironman mode so achivements are disabled - it is possible
to export a save game in JSON format that is easy to parse. However,
for Ironman saves in the normal game (the most common scenario for
players unlocking achievements) the savegame is serialised in a
different, binary format.&lt;&#x2F;p&gt;
&lt;p&gt;The idea would be to first handle deserialising the relevant parts of
the JSON debug saves to useful structs, and then build this to
WebAssembly with a frontend framework (e.g. &lt;a href=&quot;https:&#x2F;&#x2F;seed-rs.org&#x2F;&quot;&gt;Seed&lt;&#x2F;a&gt;)
and some JavaScript (e.g. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;plotly&#x2F;plotly.js&quot;&gt;plotly.js&lt;&#x2F;a&gt;) 
to create the visualisations.&lt;&#x2F;p&gt;
&lt;p&gt;Once something is useful for the debug saves, then a deserialiser for
the Ironman saves could be created. From my brief analysis of the save
files, it seems the fields are in the same order as in the debug saves
and I was already able to extract character IDs, names and faiths for
example.&lt;&#x2F;p&gt;
&lt;p&gt;The end result could be something like &lt;a href=&quot;https:&#x2F;&#x2F;rakaly.com&#x2F;eu4&quot;&gt;Rakaly&lt;&#x2F;a&gt;
(&lt;a href=&quot;https:&#x2F;&#x2F;nickb.dev&#x2F;blog&#x2F;my-bet-on-rust-has-been-vindicated&quot;&gt;also written in Rust&lt;&#x2F;a&gt;,
note the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rakaly&#x2F;eu4save&quot;&gt;save game analysis crate is FOSS&lt;&#x2F;a&gt;)
is for Europa Universalis 4 save files
but focussed on the Chronicle functionality. Rakaly has already dealt
with the Ironman issue for EU4 saves too, so it is not insurmountable.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;using-an-xbox-one-controller-as-a-midi-synthesizer&quot;&gt;Using an Xbox One controller as a MIDI synthesizer&lt;&#x2F;h2&gt;
&lt;p&gt;Another interesting project would be to be able to use an Xbox One controller to create
music with a software &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;MIDI&quot;&gt;MIDI&lt;&#x2F;a&gt; synthesizer.
I found two repositories on Github doing this already:
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;quotepilgrim&#x2F;midibox360&quot;&gt;midibox360&lt;&#x2F;a&gt; and 
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;maxmechanic&#x2F;xbox-midi-controller&quot;&gt;xbox-midi-controller&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I tried out midixbox360 but the latency was too high to be usable so I
wrote my own test in Rust. I have the put the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;xboxone_midi&quot;&gt;test code on Github&lt;&#x2F;a&gt;,
unfortunately it also has latency issues (though slightly less severe).&lt;&#x2F;p&gt;
&lt;p&gt;At some point I will try the following steps to improve that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Using a wired headset to remove any dependency on Bluetooth audio.&lt;&#x2F;li&gt;
&lt;li&gt;Using the JACK audio system instead of ALSA (and using the &lt;code&gt;jack&lt;&#x2F;code&gt;
feature in the &lt;code&gt;midir&lt;&#x2F;code&gt; crate)&lt;&#x2F;li&gt;
&lt;li&gt;Using a different software MIDI synthesizer (so far I only tried
&lt;a href=&quot;http:&#x2F;&#x2F;timidity.sourceforge.net&#x2F;&quot;&gt;TiMidity++&lt;&#x2F;a&gt; and adjusting the buffer size)&lt;&#x2F;li&gt;
&lt;li&gt;Using a Linux kernel &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;Professional_audio#Realtime_kernel&quot;&gt;with realtime patches&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Real-time audio is a complicated domain due to the requirement for such
low latency in order for it to be usable, but it&#x27;d be great to solve
these issues at some point.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;alexa-skill-for-reddit-usage&quot;&gt;Alexa skill for Reddit usage&lt;&#x2F;h2&gt;
&lt;p&gt;As an Echo Dot owner, it&#x27;d be great to write a
&lt;a href=&quot;https:&#x2F;&#x2F;developer.amazon.com&#x2F;en-US&#x2F;docs&#x2F;alexa&#x2F;custom-skills&#x2F;understanding-custom-skills.html&quot;&gt;Custom Alexa skill&lt;&#x2F;a&gt;
to read and vote on Reddit stories and comments.&lt;&#x2F;p&gt;
&lt;p&gt;I investigated this before and wrote a simple Hello World skill in Rust
and AWS Lambda, using the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arienmalec&#x2F;alexa_rust&quot;&gt;alexa_rust crate&lt;&#x2F;a&gt; 
(the tutorial in the crate README is quite comprehensive).
The Alexa Skill can be hosted in AWS Lambda, and just needs to handle
the Alexa requests like a state machine, with most of the hard work
being in &lt;a href=&quot;https:&#x2F;&#x2F;developer.amazon.com&#x2F;en-US&#x2F;docs&#x2F;alexa&#x2F;custom-skills&#x2F;create-the-interaction-model-for-your-skill.html&quot;&gt;defining the interaction model&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The main issues I noticed when setting up the skill were:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There is no way to allow free narration to Alexa, so it wouldn&#x27;t be
possible to post comments (narrated by the user) as far as I know.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Authentication is also tricky, for example, we&#x27;d need the user to
provide their Reddit API key somehow (and save it). Maybe this is possible in the
skill configuration in the Alexa app (like how the response Cards appear).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;It&#x27;s also a bit awkward to deploy since you are on the hook for hosting
costs (although AWS Lambda gives 1 million free requests). It&#x27;s a shame
there isn&#x27;t some sort of free hosting for FOSS community skills (i.e.
I&#x27;m not building a skill for my own company&#x2F;service), especially as this
could be a great tool for accessibility for those with poor eyesight or
arthritis, etc. that would struggle to use a smartphone or computer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;alma-docker-support-alma-hub&quot;&gt;ALMA docker support + ALMA Hub&lt;&#x2F;h2&gt;
&lt;p&gt;As &lt;a href=&quot;http:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;2020&#x2F;09&#x2F;09&#x2F;alma&#x2F;#en&quot;&gt;mentioned in a previous blog post&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;r-darwish&#x2F;alma&quot;&gt;ALMA&lt;&#x2F;a&gt; is a tool for
creating persistent LiveUSB installations of Arch Linux, that can be
configured with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;arch-i3-usb&quot;&gt;a collection of preset files&lt;&#x2F;a&gt;
(also see &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;madskjeldgaard&#x2F;arch-linux-computermusic-usb&quot;&gt;this collection&lt;&#x2F;a&gt; 
aimed at audio production).&lt;&#x2F;p&gt;
&lt;p&gt;If support were added to install directly to a partition (i.e. not
formatting the entire disk and installing a bootloader), and it were
possible to run in Docker then it might be possible to use ALMA as a
universal Arch Linux installer. &lt;&#x2F;p&gt;
&lt;p&gt;It would give you the opportunity to try
out the &amp;quot;meta-distribution&amp;quot; of preset files on a LiveUSB or a VM first
(as already exists),
and then install it directly to a disk or partition, even from Windows
(via Docker).&lt;&#x2F;p&gt;
&lt;p&gt;There would likely be a lot of permissions issues to resolve and so on,
but I think this would be a great project and remove the need for a lot
of simplified Arch Linux based distributions like EndeavourOS, Manjaro,
etc.&lt;&#x2F;p&gt;
&lt;p&gt;Eventually the meta-distributions of preset file collections could be
shared on an &amp;quot;ALMA Hub&amp;quot; website - providing screenshots and summaries of
the different configurations available.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;linux-cli-hex-editor&quot;&gt;Linux CLI Hex editor&lt;&#x2F;h2&gt;
&lt;p&gt;Whilst analysing the Crusader Kings 3 save games mentioned above, it was
a pain not being able to use neovim directly. It is possible to just run
&lt;code&gt;xxd&lt;&#x2F;code&gt; on the buffer and put neovim in xxd mode, but then searching for
series of bytes is difficult as it depends on the formatting (i.e. if
xxd split the line or not).&lt;&#x2F;p&gt;
&lt;p&gt;Overall I found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;afrantzis&#x2F;bless&quot;&gt;bless&lt;&#x2F;a&gt; to be the
best hex editor (&lt;a href=&quot;https:&#x2F;&#x2F;wiki.gnome.org&#x2F;Apps&#x2F;Ghex&quot;&gt;ghex&lt;&#x2F;a&gt; 
is a close second), but it&#x27;d be great to have something like this on the
command line, or if possible, as a neovim plugin.&lt;&#x2F;p&gt;
&lt;p&gt;Mainly it&#x27;d need to be able to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Show separate panes for bytes and text, with the selected text
synchronised between them.&lt;&#x2F;li&gt;
&lt;li&gt;Search backwards and forwards for a series of bytes or ASCII or UTF-8
text from a given position, and give the offset in bytes from the
starting position.&lt;&#x2F;li&gt;
&lt;li&gt;Show UTF-8 decoded text for valid UTF-8 bytes (this should be
optional), useful for reading UTF-8 encoded strings - note in this
case several bytes would correspond to one UTF-8 character so the
interface would need to be adjusted.&lt;&#x2F;li&gt;
&lt;li&gt;Search by decimal values (converted in to bytes using big-endian or
little-endian hexadecimal).&lt;&#x2F;li&gt;
&lt;li&gt;Ability to copy from bytes or text columns.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Bless covers most of those use cases, but I&#x27;d really love to have it
inside of neovim. I&#x27;ve never written a neovim plugin before so I&#x27;m not sure how
feasible this would be.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;linux-packet-editor&quot;&gt;Linux packet editor&lt;&#x2F;h2&gt;
&lt;p&gt;In the olden days, there was a very easy-to-use packet editor on Windows
called the Winsock Packet Editor (WPE Pro). This made it easy to just
select an application and analyse or modify its traffic.&lt;&#x2F;p&gt;
&lt;p&gt;A screenshot of WPE Pro running on Windows XP:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;programming-projects&#x2F;wpe2.JPG&quot; alt=&quot;WPE Pro running on Windows XP&quot; title=&quot;WPE Pro running on Windows XP&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;d be great to build something similar on Linux for modern systems,
perhaps using temporary network namespaces and nftables to mark the
packets and run the namespace connection through a proxy server run by
the packet editor.&lt;&#x2F;p&gt;
&lt;p&gt;Things are slightly more complicated nowadays, as almost all connections
will use TLS, so it is necessary to Man-in-the-Middle these connections
(see &lt;a href=&quot;https:&#x2F;&#x2F;mitmproxy.org&#x2F;&quot;&gt;mitmproxy&lt;&#x2F;a&gt; for example).&lt;&#x2F;p&gt;
&lt;p&gt;Note that for memory editing, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;scanmem&#x2F;scanmem&quot;&gt;scanmem&#x2F;GameConqueror&lt;&#x2F;a&gt;
exists on Linux, although it is not quite as advanced as CheatEngine.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;command-line-interface-chiptune-tracker&quot;&gt;Command-line Interface Chiptune Tracker&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Chiptune&quot;&gt;Chiptunes&lt;&#x2F;a&gt; are a type of synthesised music
generated with waveform generators (i.e. an &amp;quot;instrument&amp;quot; in a track might be a sine
wave, with different notes representing different frequencies). Here is
a famous example track: &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=9F0_OOv7EPw&quot;&gt;To Norway With Love&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;These are usually created with &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Music_tracker&quot;&gt;music trackers&lt;&#x2F;a&gt;,
a good example on Linux is &lt;a href=&quot;https:&#x2F;&#x2F;milkytracker.org&#x2F;&quot;&gt;MilkyTracker&lt;&#x2F;a&gt; 
(I recommend &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=N2s04YYO0Wg&amp;amp;list=PLgQLAgklMBxEuPzQUNKc2xSJu5pXx7xVx&quot;&gt;this tutorial series&lt;&#x2F;a&gt; for getting started).&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;d be great to create a CLI-based music tracker and an open library
for music tracker development (so it could be extended to WebAssembly
for web-based trackers, etc.)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;joust-battle-royale&quot;&gt;Joust Battle Royale&lt;&#x2F;h2&gt;
&lt;p&gt;After completing the &lt;a href=&quot;https:&#x2F;&#x2F;rustwasm.github.io&#x2F;docs&#x2F;book&#x2F;&quot;&gt;Rust WebAssembly tutorial&lt;&#x2F;a&gt; using Conway&#x27;s Game
Of Life, and the &lt;a href=&quot;https:&#x2F;&#x2F;erwabook.com&#x2F;intro&#x2F;index.html&quot;&gt;Introduction to Rust Web Applications&lt;&#x2F;a&gt; tutorial, I thought
it&#x27;d be good to try to build a multiplayer browser-based game in WebAssembly.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately time constraints meant I didn&#x27;t get too far, but what I
implemented &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;joust.rs&quot;&gt;is available on Github here&lt;&#x2F;a&gt;.
The idea was to implement a Battle Royale version of Joust - with many
players trying to eliminate eachother and survive as the stage becomes
smaller.&lt;&#x2F;p&gt;
&lt;p&gt;Note that real-time multiplayer in the browser is hard, as the browser is
restricted to websockets and cannot use UDP.&lt;&#x2F;p&gt;
&lt;p&gt;That said, there are some good examples for inspiration such as
&lt;a href=&quot;https:&#x2F;&#x2F;cratebeforeattack.com&#x2F;&quot;&gt;Crate Before Attack&lt;&#x2F;a&gt; a Worms-style game
written in Rust and WebAssembly, and &lt;a href=&quot;https:&#x2F;&#x2F;www.mattkeeter.com&#x2F;projects&#x2F;pont&#x2F;&quot;&gt;Pont&lt;&#x2F;a&gt;
which is an implementation of the Qwirkle board game in Rust and
WebAssembly.&lt;&#x2F;p&gt;
&lt;p&gt;At some point I&#x27;d like to retry this idea, perhaps with a less real-time
dependent game, as WebAssembly offers a great opportunity for massively
accessible games - which would work perfectly for games like &lt;a href=&quot;https:&#x2F;&#x2F;store.steampowered.com&#x2F;app&#x2F;945360&#x2F;Among_Us&#x2F;&quot;&gt;Among Us&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;self-hosted-google-keep-alternative&quot;&gt;Self-hosted Google Keep alternative&lt;&#x2F;h2&gt;
&lt;p&gt;When using &lt;a href=&quot;https:&#x2F;&#x2F;keep.google.com&#x2F;&quot;&gt;Google Keep&lt;&#x2F;a&gt; I often wish I could
just edit &lt;a href=&quot;https:&#x2F;&#x2F;orgmode.org&#x2F;&quot;&gt;org-mode&lt;&#x2F;a&gt; style markdown and save notes that way.&lt;&#x2F;p&gt;
&lt;p&gt;The idea here would be to build a web app that opens a markdown editor
when clicking to edit the notes, which supports the TODO and deadline
dates styling of org-mode, but has a clean presentation when just
viewing the notes (like Google Keep).&lt;&#x2F;p&gt;
&lt;p&gt;Ideally it would also support &lt;a href=&quot;https:&#x2F;&#x2F;pygments.org&#x2F;&quot;&gt;pygments&lt;&#x2F;a&gt; style
syntax highlighting for code blocks and &lt;a href=&quot;https:&#x2F;&#x2F;www.mathjax.org&#x2F;&quot;&gt;MathJax&lt;&#x2F;a&gt;
for LaTeX equations support.&lt;&#x2F;p&gt;
&lt;p&gt;This a nice project as it would be very useful, and is very extensible
(i.e. later creating an Android app, etc.)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ai-for-democracy-3&quot;&gt;AI for Democracy 3&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;store.steampowered.com&#x2F;app&#x2F;245470&#x2F;Democracy_3&#x2F;&quot;&gt;Democracy 3&lt;&#x2F;a&gt;
is a political&#x2F;economic management video game where you
choose social and economic policies to try to win re-election whilst
balancing the economy and popularity with different demographics.&lt;&#x2F;p&gt;
&lt;p&gt;The main game view of Democracy 3 showing the relationships between different variables:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;programming-projects&#x2F;democracy3.jpg&quot; alt=&quot;The main game view of Democracy 3&quot; title=&quot;The main game view of Democracy 3&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The idea here would be to build an AI that can play the game
successfully, managing the different policy choices 
(&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Project_Cybersyn&quot;&gt;Project Cybersyn&lt;&#x2F;a&gt; style).&lt;&#x2F;p&gt;
&lt;p&gt;I investigated this briefly about 5 years ago. All of the equations relating different variables and policies can be
extracted from the game files - note that many have non-linear
relationships. &lt;&#x2F;p&gt;
&lt;p&gt;The main challenges would be:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Building a simulation of the game, using the equations in the game
files (practically re-implementing the bulk of the game). So that
different policies can be quickly evaluated.&lt;&#x2F;li&gt;
&lt;li&gt;Building an AI that can effectively learn and optimise the
relationships between the directly modifiable variables, intermediate variables
and the final outcome (i.e. election popularity and budget) without
knowing the relationships a priori.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Once a fast simulation is possible, at least many different methods
could be tried for the policy model itself such as 
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Q-learning&quot;&gt;Q-learning&lt;&#x2F;a&gt; or
&lt;a href=&quot;https:&#x2F;&#x2F;deepmind.com&#x2F;research&#x2F;publications&#x2F;playing-atari-deep-reinforcement-learning&quot;&gt;Deep Q-learning&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For learning more about Artificial Intelligence, I enjoyed Udacity&#x27;s
&lt;a href=&quot;https:&#x2F;&#x2F;www.udacity.com&#x2F;course&#x2F;ai-artificial-intelligence-nanodegree--nd898&quot;&gt;Artificial Intelligence course&lt;&#x2F;a&gt;
back when it used to be free to audit, unfortunately it is now stupidly
expensive, but you might be able to get a similar experience by reading
&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Artificial-Intelligence-Modern-Approach-3rd&#x2F;dp&#x2F;0136042597&quot;&gt;Peter Norvig&#x27;s Artificial Intelligence: A Modern Approach&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;foss-engine-for-netstorm&quot;&gt;FOSS engine for Netstorm&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;NetStorm:_Islands_At_War&quot;&gt;Netstorm&lt;&#x2F;a&gt; is
a Real-Time Strategy game released in late 1997. Unlike popular RTS
games, the game is more similar to Populous in that you only directly 
control one High Priest and a few other units.&lt;&#x2F;p&gt;
&lt;p&gt;Most of the gameplay revolves around building a network of bridges from randomly available
Tetris-style bridge patterns, and tower defences which have different
ranges and attack patterns. This creates unique puzzle-style competitive
gameplay when played in multiplayer.&lt;&#x2F;p&gt;
&lt;p&gt;A screenshot of Netstorm:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;programming-projects&#x2F;netstorm.png&quot; alt=&quot;Netstorm: Islands At War&quot; title=&quot;Netstorm: Islands At War&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There is still a &lt;a href=&quot;http:&#x2F;&#x2F;www.netstormhq.net&#x2F;&quot;&gt;popular community&lt;&#x2F;a&gt; based
around patched versions of the original game. The project idea here
would be to implement a new engine for the game, that can run natively
on Linux, requiring the base game assets.&lt;&#x2F;p&gt;
&lt;p&gt;There are already many popular examples of FOSS game engine
reimplementations such as &lt;a href=&quot;https:&#x2F;&#x2F;openrct2.org&#x2F;&quot;&gt;OpenRCT2&lt;&#x2F;a&gt; for Rollercoaster Tycoon 2,
&lt;a href=&quot;https:&#x2F;&#x2F;openxcom.org&#x2F;&quot;&gt;OpenXCOM&lt;&#x2F;a&gt; for X-COM: UFO Defense, and &lt;a href=&quot;http:&#x2F;&#x2F;exult.sourceforge.net&#x2F;&quot;&gt;Exult&lt;&#x2F;a&gt; for Ultima VII.&lt;&#x2F;p&gt;
&lt;p&gt;A FOSS implementation of the game engine would allow for builds on more
platforms, server improvements for multiplayer, and mod creation (i.e.
perhaps a mod for &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=HAh03WuGrsU&quot;&gt;Factorio-style controls&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;If you do choose to investigate this project, I&#x27;d recommend reading
&lt;a href=&quot;https:&#x2F;&#x2F;mamclain.com&#x2F;?page=Blog_Programing_CPP_Data_Padding_and_Alignment&quot;&gt;this article on reverse engineering in C++&lt;&#x2F;a&gt;
which mentions NetStorm explicitly, and also to review the source code
for the incomplete &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;samcday&#x2F;javastorm&quot;&gt;JavaStorm reimplementation&lt;&#x2F;a&gt; and 
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tomjepp&#x2F;NetStormSharp&quot;&gt;NetStormSharp&lt;&#x2F;a&gt; which contains
code to read the TARC (archive) and SHP (graphics) formats of the game files.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;d be great to see more advanced games get FOSS engine implementations
too, such as &lt;a href=&quot;https:&#x2F;&#x2F;vic2.paradoxwikis.com&#x2F;Victoria_2_Wiki&quot;&gt;Victoria 2&lt;&#x2F;a&gt;
which has a large following, but is not
available on Linux and still has no sequel in development.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;completed-projects&quot;&gt;Completed projects&lt;&#x2F;h1&gt;
&lt;p&gt;With all of the unfinished or unimplemented projects mentioned above,
I&#x27;d also like to mention two projects which started out as interesting
ideas just like those, but which I did finish and actively maintain.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;s3rename&quot;&gt;s3rename&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;s3rename&quot;&gt;s3rename&lt;&#x2F;a&gt; is a cross-platform CLI tool for mass-renaming S3 keys. The
idea for this project originally came from having to rename loads of
keys in an S3 bucket for use with AWS Glue (which requires specific
syntax for a partition hierarchy).&lt;&#x2F;p&gt;
&lt;p&gt;At the time I was using a Python script to generate AWS CLI commands, but
this was very slow to run (since all the AWS CLI commands were
independent), and it was a pain to modify the script for different
transformations needed.&lt;&#x2F;p&gt;
&lt;p&gt;s3rename allows you to use sed-style regexes to define the rename
operations, and is implemented in Rust with Tokio for asynchronous
operations so it can process many operations at a time (and is much
faster than calling the AWS CLI separately).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;vopono&quot;&gt;vopono&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&quot;&gt;vopono&lt;&#x2F;a&gt; allows you to run
specific applications via VPN connections
with temporary network namespaces on Linux. For example,
you can run Firefox through a VPN
whilst the rest of your system is unaffected.&lt;&#x2F;p&gt;
&lt;p&gt;This originally came from a bash script I had for running OpenVPN in a
network namespace. After porting that to Rust, vopono now has many more
features including Wireguard support, built-in killswitches for OpenVPN
and Wireguard, automatic configuration support for many popular VPN
providers and port forwarding support for running servers and daemons
inside the VPN whilst still being accessible from the host.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h1&gt;
&lt;p&gt;I hope the project ideas above inspire you to build something yourself, be it
a new implementation of a classic project, or something completely new.&lt;&#x2F;p&gt;
&lt;p&gt;I greatly recommend trying to find something creative and enjoyable which
can be useful within a few weekends to keep motivation high. For
example, I personally use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&quot;&gt;vopono&lt;&#x2F;a&gt; for all of my VPN usage now, and
that helped a lot to inspire me to keep improving it and covering more
use cases.&lt;&#x2F;p&gt;
&lt;p&gt;If you are an absolute beginner, or still getting comfortable with a new
programming language, then I do recommend doing some small problems on 
websites like &lt;a href=&quot;https:&#x2F;&#x2F;leetcode.com&#x2F;&quot;&gt;Leetcode&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;rosalind.info&#x2F;about&#x2F;&quot;&gt;Project Rosalind&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;adventofcode.com&#x2F;&quot;&gt;Advent Of Code&lt;&#x2F;a&gt;,
and &lt;a href=&quot;https:&#x2F;&#x2F;projecteuler.net&#x2F;&quot;&gt;Project Euler&lt;&#x2F;a&gt; for example. However, as
you get more comfortable with programming, I think it is more rewarding
to work on larger projects (even if they are still very small in scope
compared to professional work).&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s worth noting that what is considered as a good beginner
project has changed over time. In the past, writing your own &lt;a href=&quot;http:&#x2F;&#x2F;wiki.haskell.org&#x2F;Roll_your_own_IRC_bot&quot;&gt;IRC bot&lt;&#x2F;a&gt; 
(or even client or server) was considered as a rite of passage, but now that the
popularity of IRC has sadly dwindled, this is less common (perhaps you
could write a &lt;a href=&quot;https:&#x2F;&#x2F;brendan.abolivier.bzh&#x2F;enter-the-matrix&#x2F;&quot;&gt;Matrix client&lt;&#x2F;a&gt; instead).&lt;&#x2F;p&gt;
&lt;p&gt;The same is true for email clients, rudimentary web browsers, CLI text
editors, etc. which don&#x27;t make as great starter projects now due to the
consolidation of webmail, the increased complexity of modern web pages
(with Javascript support effectively mandatory), and the development of
extensive plugin support for popular text editors.&lt;&#x2F;p&gt;
&lt;p&gt;But the list above is far from comprehensive, for example, there is the
whole world of embedded development from fully-fledged Single-Board
Computers like the Raspberry Pi, to microcontrollers like the Arduino.
The &lt;a href=&quot;https:&#x2F;&#x2F;docs.rust-embedded.org&#x2F;discovery&#x2F;&quot;&gt;Embedded Rust Discovery&lt;&#x2F;a&gt;
online book introduces embedded programming with the STM32F3DISCOVERY
board for example. You might also consider writing &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;erikgrinaker&#x2F;toydb&quot;&gt;your own database&lt;&#x2F;a&gt;
or building &lt;a href=&quot;https:&#x2F;&#x2F;cstack.github.io&#x2F;db_tutorial&#x2F;&quot;&gt;a sqlite clone&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you are interested in programming projects like these, I&#x27;d recommed
joining the &lt;a href=&quot;https:&#x2F;&#x2F;community.onelonecoder.com&#x2F;&quot;&gt;OneLoneCoder community&lt;&#x2F;a&gt; and Discord server,
which has a channel dedicated to sharing projects with the community
(often focussed on video games).&lt;&#x2F;p&gt;
&lt;p&gt;Finally, many of the projects mentioned above depend upon &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;philosophy&#x2F;free-sw.en.html&quot;&gt;Free Software&lt;&#x2F;a&gt;,
or at least &lt;a href=&quot;https:&#x2F;&#x2F;fsfe.org&#x2F;freesoftware&#x2F;standards&#x2F;def.en.html&quot;&gt;Open Standards&lt;&#x2F;a&gt;,
so I&#x27;d highly recommend reading 
&lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;doc&#x2F;fsfs3-hardcover.pdf&quot;&gt;Free Software, Free Society (PDF)&lt;&#x2F;a&gt;
about the history and importance of the Free Software movement.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>My Rust 2021 roadmap: crates, concision, and community</title>
		<published>2020-09-24T00:00:00+00:00</published>
		<updated>2020-09-24T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jamesmcm.github.io/blog/rust2021/" type="text/html"/>
		<id>https://jamesmcm.github.io/blog/rust2021/</id>
		<content type="html">&lt;p&gt;The Rust core team recently released a &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2020&#x2F;09&#x2F;03&#x2F;Planning-2021-Roadmap.html&quot;&gt;call for blog posts&lt;&#x2F;a&gt; as part of
the 2021 roadmap for Rust. In this post I will detail my own experience
with Rust, and areas I&#x27;d like to
see improved during 2021.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Opinions expressed are solely my own and do not express the views or opinions of my employer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-background&quot;&gt;My background&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m currently a Data Engineer and over the last few months I have
proposed and started implementing the migration of our serverless data
ingestion pipelines to Rust. The requirements of these pipelines vary
but usually involve receiving some external data (e.g. via email or S3, possibly
via &lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;blogs&#x2F;aws&#x2F;new-aws-transfer-for-sftp-fully-managed-sftp-service-for-amazon-s3&#x2F;&quot;&gt;SFTP to S3&lt;&#x2F;a&gt;), 
validating and transforming that data (with AWS Lambda) and loading it to a data
warehouse.&lt;&#x2F;p&gt;
&lt;p&gt;I originally proposed switching to Rust due to having deployment issues
with Python (when depending on native modules, like NumPy) due to
possible glibc version mismatches as well as the total size of the deployed
package.&lt;&#x2F;p&gt;
&lt;p&gt;Rust solves these issues by allowing us to compile a statically linked
binary with musl, and feature flags allow us to include useful code from
a shared crate without building in the entire crate and its
dependencies (for parts we don&#x27;t need). &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctz&#x2F;rustls&quot;&gt;Rustls&lt;&#x2F;a&gt; also allows us to avoid any OpenSSL-related deployment
issues.&lt;&#x2F;p&gt;
&lt;p&gt;Carrying out this proposal has given me direct experience in solving
business problems in Rust, working with other team members to introduce
Rust to the team, and deployment in an enterprise environment (although
the hard parts of deployment are largely handled by other teams).&lt;&#x2F;p&gt;
&lt;p&gt;I have published two personal programs written in Rust: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&quot;&gt;vopono&lt;&#x2F;a&gt; for
running specific applications through VPN connections, and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;s3rename&quot;&gt;s3rename&lt;&#x2F;a&gt;
for mass-renaming keys in an S3 bucket. I have also written a few prior
blog posts on Rust, the most popular being &lt;a href=&quot;http:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;2020&#x2F;07&#x2F;25&#x2F;intro-dod&#x2F;#en&quot;&gt;about data-oriented design in Rust&lt;&#x2F;a&gt;
and &lt;a href=&quot;http:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;2020&#x2F;05&#x2F;06&#x2F;a-practical-introduction-to-async-programming-in-rust&#x2F;#en&quot;&gt;an introduction to async programming&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To summarise: As a data engineer, I want to be able to easily test and
deploy statically linked Rust binaries on various platforms and
architectures, and interact with popular services and protocols without
friction.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;considerations&quot;&gt;Considerations&lt;&#x2F;h2&gt;
&lt;p&gt;When working as an engineer in an agile team, sprint velocity and
speed of delivery is key. Engineers want to use the language and tooling
that will help them to complete their tasks as quickly as possible,
without frustration or the need to dig deep in to the implementations of
dependencies.&lt;&#x2F;p&gt;
&lt;p&gt;Amongst engineers I have seen two main reasons for push-back against
Rust deployment:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The language is perceived to be very difficult to write (mostly due to
lifetimes), low-level and slow to develop in.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The language is perceived to be very new, with an immature and
unstable ecosystem that might be lacking critical functionality and
could lead to a loss of development time if some dependencies have to
be created in-house.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These aren&#x27;t issues that can be solved directly necessarily (especially
the perception itself), but we can consider how the community can help
to turn around these perceptions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;development-speed&quot;&gt;Development speed&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;low-level&quot;&gt;Low-level?&lt;&#x2F;h4&gt;
&lt;p&gt;The first misconception is that Rust is a low-level language and that
the experience might be similar to writing C (i.e. dealing directly with
malloc, etc.). I think a lot of this comes from Rust often being
compared to C and C++ implementations in benchmarks, and being more
strongly adopted in the systems programming community. &lt;&#x2F;p&gt;
&lt;p&gt;I think this will largely be countered by Rust usage becoming more widespread in other
domains, such as Web Development with crates like Actix, Rocket, Hyper, etc. on the
backend and Seed and Yew on the frontend, and Data Engineering with crates
like ndarray, Serde, Polars, Calamine, Amadeus and Ballista.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;difficult-to-write&quot;&gt;Difficult to write?&lt;&#x2F;h4&gt;
&lt;p&gt;Rust is also often perceived as difficult to write, particularly due to
the lifetime notation. Here I think a lot of great work has already
been done with non-lexical lifetimes greatly simplifying the necessary
notation in many cases, and rust-analyzer providing a fast debug loop
(along with the ongoing efforts to improve error messages). &lt;&#x2F;p&gt;
&lt;p&gt;The main thing to note here for the future, in my opinion, is just how much
language and syntax improvements can help new users and further adoption. I hope Rust
continues to work on making the code more concise for the developer in
the majority of use cases. For Rust 2021 and beyond this might include
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;2909&quot;&gt;assignment with destructuring&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;44762&quot;&gt;auto-dereferencing in operators&lt;&#x2F;a&gt;,
and &lt;a href=&quot;https:&#x2F;&#x2F;internals.rust-lang.org&#x2F;t&#x2F;pre-rfc-lifetime-elision-1-1-structs-with-one-reference-field&#x2F;4914&quot;&gt;lifetime elision in structs&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;slower-to-implement&quot;&gt;Slower to implement?&lt;&#x2F;h4&gt;
&lt;p&gt;Related to the above point, Rust is often considered slower to develop
in (usually when compared to dynamic scripting languages like Python or
JavaScript). Here I think it&#x27;s important to note that hitting lots of error messages
from the compiler or borrow checker during development doesn&#x27;t
necessarily mean development is slower - as those errors are probably
catching lots of issues that might go unnoticed in other languages
(until you hit an issue in production).&lt;&#x2F;p&gt;
&lt;p&gt;In German there is a saying &amp;quot;Wenn schon, denn schon.&amp;quot;, which roughly translates
to &amp;quot;if you&#x27;re going to do it, do it properly&amp;quot;. This is where I believe Rust
excels - whilst you might hit a few lifetime and ownership issues during
the development of your program, in the end you are saved from a whole
class of bugs and also aren&#x27;t bound by issues like the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Global_interpreter_lock&quot;&gt;Global Interpreter Lock&lt;&#x2F;a&gt; 
or the lack of type safety as in simpler scripting languages.&lt;&#x2F;p&gt;
&lt;p&gt;But it is important to ensure
that the feedback loop is fast for the developer. Here I think the great
improvements in rust-analyzer have helped already, and hopefully there
will be further improvements to compile speeds to make this even faster
in the future.&lt;&#x2F;p&gt;
&lt;p&gt;Ultimately with the great tooling available, I think the development
speed can actually be faster in Rust than Python or Ruby when you
consider the whole software life cycle including fixing bugs and scaling
up the system.&lt;&#x2F;p&gt;
&lt;p&gt;However, development speed is also greatly affected by the availability
of relevant libraries.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;crates-and-ecosystem&quot;&gt;Crates and ecosystem&lt;&#x2F;h3&gt;
&lt;p&gt;Rust &lt;em&gt;is&lt;&#x2F;em&gt; still a very new language, with the first stable release in
2015 and more widespread adoption with the release of Rust 2018. This
leads to a common concern that Rust may be lacking some libraries, and
so could cost significant developer time compared to languages with a
larger and more mature ecosystem.&lt;&#x2F;p&gt;
&lt;p&gt;There are already many excellent crates unique to Rust, such as Serde
which I miss when working with other languages. The great accessibility
of cargo, &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;&quot;&gt;crates.io&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;&quot;&gt;docs.rs&lt;&#x2F;a&gt; also make it easy to discover new crates.&lt;&#x2F;p&gt;
&lt;p&gt;However, there are still some areas for improvement for the ecosystem as
a whole. For example, Rusoto is still slightly less user-friendly than
&lt;a href=&quot;https:&#x2F;&#x2F;boto3.amazonaws.com&#x2F;v1&#x2F;documentation&#x2F;api&#x2F;latest&#x2F;index.html&quot;&gt;boto3&lt;&#x2F;a&gt; (i.e. having to create &lt;code&gt;_Request&lt;&#x2F;code&gt; structs for each client
request).&lt;&#x2F;p&gt;
&lt;p&gt;Another example would be the need to provide root CA certificates (i.e. in a
PEM file) to rustls for use with &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;tokio-postgres-rustls&quot;&gt;tokio-postgres-rustls&lt;&#x2F;a&gt; for example.
This is a minor issue, but one that is not necessary in more &amp;quot;batteries-included&amp;quot; libraries in other
languages (e.g. psycopg2 in Python).&lt;&#x2F;p&gt;
&lt;p&gt;These are small examples but can impact the learning curve for new
developers. As a community, I think we should try to create issues for
any such &amp;quot;paper-cuts&amp;quot; we come across and contribute pull requests where
possible.&lt;&#x2F;p&gt;
&lt;p&gt;Documentation is also relevant to this. Overall, Rust has excellent
documentation with the combination of rustdoc and mdBook being used to
provide crate documentation and detailed developer and contributor
guides. Throughout 2021 we should aim to expand existing documentation,
and ensure that it is accessible for new developers to do so too - for
example, contributing common use cases to &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang-nursery.github.io&#x2F;rust-cookbook&#x2F;&quot;&gt;the Rust cookbook&lt;&#x2F;a&gt;. 
Myself, I struggled greatly with Serde&#x27;s &lt;code&gt;deserialize_with&lt;&#x2F;code&gt; field attribute until looking at examples.&lt;&#x2F;p&gt;
&lt;p&gt;Hopefully in the future, the establishment of the &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2020&#x2F;08&#x2F;18&#x2F;laying-the-foundation-for-rusts-future.html&quot;&gt;Rust foundation&lt;&#x2F;a&gt;
will eventually be able to provide commercial support to critical projects like
Rustls, Serde, and Tokio to ensure the crates are maintained and
improved in the long-term. I think this would help a lot with the adoption
of Rust in enterprise.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;d also be great if Rust support were added to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;jsii&quot;&gt;jsii&lt;&#x2F;a&gt;
so Rust could be used with the AWS &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-cdk&quot;&gt;Cloud Development Kit&lt;&#x2F;a&gt; directly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;other-small-issues&quot;&gt;Other small issues&lt;&#x2F;h2&gt;
&lt;p&gt;There are some other small issues I&#x27;d love to see improved during 2021.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;auto-ref-in-pattern-matching&quot;&gt;Auto Ref in pattern matching&lt;&#x2F;h3&gt;
&lt;p&gt;I couldn&#x27;t find an RFC for this, but it&#x27;d great to be able to use a
static &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; when matching on an enum containing a &lt;code&gt;String&lt;&#x2F;code&gt;. i.e. so
&lt;a href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=284089e5b13b5925449574ce2c5e41f2&quot;&gt;this would be possible&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;MyEnum {
&lt;&#x2F;span&gt;&lt;span&gt;    WithString(String),
&lt;&#x2F;span&gt;&lt;span&gt;    Other,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; myenum = MyEnum::WithString(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; myenum {
&lt;&#x2F;span&gt;&lt;span&gt;        MyEnum::WithString(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) =&amp;gt; {println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Was string&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)},
&lt;&#x2F;span&gt;&lt;span&gt;        _ =&amp;gt; {},
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Currently it is necessary to use a match guard (as far as I know). The
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;42640&quot;&gt;closest RFC I could find&lt;&#x2F;a&gt; handles auto deref but not ref. 
Note that is already implemented.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;blocking-futures-without-an-async-runtime&quot;&gt;Blocking Futures without an async runtime&lt;&#x2F;h3&gt;
&lt;p&gt;At the moment if any crate returns a Future, the developer has to use an
async runtime even if just to block on the future synchronously - i.e. &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.2.22&#x2F;tokio&#x2F;runtime&#x2F;struct.Runtime.html#method.block_on&quot;&gt;tokio&#x27;s
block_on&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;d be nice if this were built in to the standard library (for the
blocking, synchronous case only) if possible.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lifetimes-of-trait-objects-defaults-to-static&quot;&gt;Lifetimes of trait objects defaults to &#x27;static&lt;&#x2F;h3&gt;
&lt;p&gt;I have been caught out a few times by the lifetime of a trait object
defaulting to &lt;code&gt;&#x27;static&lt;&#x2F;code&gt;. Recently, in this &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mitsuhiko&#x2F;dialoguer&#x2F;pull&#x2F;81&#x2F;files#diff-25c234b5525af56f20a73cb80796026bR47&quot;&gt;PR to the dialoguer crate&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Specifically the original struct:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Input&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prompt&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;T&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;show_default&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;initial_text&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;theme&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; dyn Theme,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;permit_empty&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;validator&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;Box&amp;lt;dyn Fn(&amp;amp;T) -&amp;gt; Option&amp;lt;String&amp;gt;&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Requires that the validator closure has a &lt;code&gt;&#x27;static&lt;&#x2F;code&gt; lifetime, not the
&lt;code&gt;&#x27;a&lt;&#x2F;code&gt; of the struct. This can be fixed by specifying the &lt;code&gt;&#x27;a&lt;&#x2F;code&gt; lifetime
explicitly:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    validator: Option&amp;lt;Box&amp;lt;dyn Fn(&amp;amp;T) -&amp;gt; Option&amp;lt;String&amp;gt; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, I found the fact that it defaults to &lt;code&gt;&#x27;static&lt;&#x2F;code&gt; quite
unintuitive, this seems to be decided by the
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;lifetime-elision.html#default-trait-object-lifetimes&quot;&gt;default trait object lifetime rules&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;d be nice if this could be adjusted similar to the
&lt;a href=&quot;https:&#x2F;&#x2F;internals.rust-lang.org&#x2F;t&#x2F;pre-rfc-lifetime-elision-1-1-structs-with-one-reference-field&#x2F;4914&quot;&gt;lifetime elision in structs&lt;&#x2F;a&gt; 
RFC mentioned above so that if the containing struct has a specified
lifetime then the trait object would default to that lifetime (the
developer could always specify &lt;code&gt;&#x27;static&lt;&#x2F;code&gt; if required). Perhaps
this is impractical or undesirable due to other consequences though.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;deref-in-closure-signature&quot;&gt;Deref in closure signature&lt;&#x2F;h3&gt;
&lt;p&gt;Related to the PR mentioned in the previous section, we have a
&lt;code&gt;Validator&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; that must implement the validate method:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;Validator&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Err: Debug + Display;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;validate&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;T) -&amp;gt; Result&amp;lt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Err&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, this means if we want to validate a &lt;code&gt;String&lt;&#x2F;code&gt; we must pass a
&lt;code&gt;&amp;amp;String&lt;&#x2F;code&gt; to validate. We cannot pass an &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;. If &lt;code&gt;T&lt;&#x2F;code&gt; were an &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;
itself then we could use &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;beta&#x2F;std&#x2F;convert&#x2F;trait.AsRef.html&quot;&gt;AsRef&lt;&#x2F;a&gt;
to accept a &lt;code&gt;String&lt;&#x2F;code&gt; in the signature, but the other way around doesn&#x27;t
seem possible even though in the end the &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; and &lt;code&gt;&amp;amp;String&lt;&#x2F;code&gt; are
equivalent for our purposes. &lt;&#x2F;p&gt;
&lt;p&gt;That is, we&#x27;d like to accept any type which
&lt;code&gt;T&lt;&#x2F;code&gt; could ref in to, not any type which could ref in to &lt;code&gt;T&lt;&#x2F;code&gt; (which is
what &lt;code&gt;AsRef&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; provides us). Perhaps there are reasons this isn&#x27;t
viable and the type arguments used above should change, but it was a
frustrating issue to hit as a developer.&lt;&#x2F;p&gt;
&lt;p&gt;As a side note related to &lt;code&gt;AsRef&lt;&#x2F;code&gt;, it&#x27;d be nice to &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;3ntsbn&#x2F;whats_the_point_of_asref&#x2F;cvr5n5f&#x2F;&quot;&gt;introduce the syntax
mentioned here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve covered a lot of different issues here, but I really wanted to
emphasise my own experience in introducing Rust to a team and the common
concerns that come up.&lt;&#x2F;p&gt;
&lt;p&gt;In summary, during 2021 I&#x27;d like to see:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Rust expand to more domains outside of systems programming (i.e. web
development and data engineering).&lt;&#x2F;li&gt;
&lt;li&gt;Further language syntax improvements to keep Rust concise.&lt;&#x2F;li&gt;
&lt;li&gt;Continued improvements in IDE support (especially outside of VS Code).&lt;&#x2F;li&gt;
&lt;li&gt;Expanded documentation of common crates and use case examples (i.e.
&lt;a href=&quot;https:&#x2F;&#x2F;rust-lang-nursery.github.io&#x2F;rust-cookbook&#x2F;&quot;&gt;the Rust cookbook&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In my opinion, a major part of making this possible is making it easier
for newer Rust developers to contribute to Rust itself (and major
crates). For example, I have written about some issues I&#x27;ve had above
and linked to some related RFCs - but I would have no idea where to
start with testing implementations to solve any of those issues.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;forge.rust-lang.org&#x2F;&quot;&gt;Rust Forge&lt;&#x2F;a&gt; is a good start for this,
but I&#x27;d also love to see some worked examples of implementing features
and bug fixes. For example, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jonhoo&quot;&gt;Jon Gjengset&lt;&#x2F;a&gt;&#x27;s Crust of Rust series
has been excellent for covering the basics of the implementations of
some common Rust concepts, and it&#x27;d be great to see more blog posts focussed
on making improvements to Rust itself (or major crates).&lt;&#x2F;p&gt;
&lt;p&gt;Other possibilities are to host specific training sessions for new
contributors like &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=aS26sqT09Pw&quot;&gt;the Veloren project has done&lt;&#x2F;a&gt;,
or to host community bug-squashing days aimed at new contributors like
Arch Linux and KDE have done.&lt;&#x2F;p&gt;
&lt;p&gt;Having a larger pool of contributors would help to alleviate the
workload on current maintainers, and bring a more diverse range of
perspectives from different problem domains and platforms.&lt;&#x2F;p&gt;
&lt;p&gt;Overall, Rust is already in an excellent position with the most
welcoming community and most comprehensive documentation that I have
seen in any ecosystem. I look forward to what 2021 will bring!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>How to fix high CPU usage by the CacheDelete daemon in OS X Catalina</title>
		<published>2020-09-20T00:00:00+00:00</published>
		<updated>2020-09-20T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jamesmcm.github.io/blog/catalina-cachedelete/" type="text/html"/>
		<id>https://jamesmcm.github.io/blog/catalina-cachedelete/</id>
		<content type="html">&lt;p&gt;I recently had an ongoing issue with the &lt;code&gt;deleted&lt;&#x2F;code&gt; CacheDelete daemon
using huge amounts of CPU time almost constantly. This post covers how I
fixed it and a few tips for OS X recovery and performance improvements.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Opinions expressed are solely my own and do not express the views or opinions of my employer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;deleted-daemon&quot;&gt;deleted daemon&lt;&#x2F;h2&gt;
&lt;p&gt;The problem I had was that the &lt;code&gt;deleted&lt;&#x2F;code&gt; daemon was often taking 90%+ of
CPU usage on my 2017 Macbook Pro, resulting in massive stuttering when trying to use the
system.&lt;&#x2F;p&gt;
&lt;p&gt;Looking up details for the process, I found that &lt;a href=&quot;https:&#x2F;&#x2F;apple.stackexchange.com&#x2F;questions&#x2F;254810&#x2F;what-is-the-deleted-daemon-in-macos&quot;&gt;the daemon is
responsible for purging caches&lt;&#x2F;a&gt;
and had caused issues for others. Unfortunately, on Catalina it is not
trivial to disable due to the read-only System volume and the built-in
&lt;a href=&quot;https:&#x2F;&#x2F;support.apple.com&#x2F;en-us&#x2F;HT204899&quot;&gt;System Integrity Protection&lt;&#x2F;a&gt;
that forbids any changes to system files, even as root.&lt;&#x2F;p&gt;
&lt;p&gt;By looking at the output of &lt;code&gt;ps&lt;&#x2F;code&gt; we can see that the binaries are stored
in &lt;code&gt;&#x2F;System&#x2F;Library&#x2F;PrivateFrameworks&#x2F;CacheDelete.framework&#x2F;&lt;&#x2F;code&gt;, meanwhile
the page linked above mentions that the registered applications with the
daemon are contained in plist files in &lt;code&gt;&#x2F;System&#x2F;Library&#x2F;CacheDelete&#x2F;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In order to fix this issue, we can simply move all of those plist files.
Then &lt;code&gt;deleted&lt;&#x2F;code&gt; will no longer run. Do &lt;strong&gt;not&lt;&#x2F;strong&gt; remove the &lt;code&gt;deleted&lt;&#x2F;code&gt;
binary itself or your system will fail to boot (at login if on a system
with an encrypted disk).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;removing-the-plist-files&quot;&gt;Removing the plist files&lt;&#x2F;h2&gt;
&lt;p&gt;First we need to disable the System Integrity Protection (SIP), this must be
done in recovery mode. To access recovery mode reboot the Macbook and
press Cmd+R whilst it is booting up, the screen should flash white and
take you to a recovery shell with options to reinstall OS X.&lt;&#x2F;p&gt;
&lt;p&gt;In the menu bar at the top, select &lt;code&gt;Utilities &amp;gt; Terminal&lt;&#x2F;code&gt; to access the
terminal and then run &lt;code&gt;csrutil disable&lt;&#x2F;code&gt;. You should receive a message
that the SIP is now disabled. Reboot the machine.&lt;&#x2F;p&gt;
&lt;p&gt;Log in as usual and open a terminal window. First you must mount the
System volume as writeable:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo mount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -uw&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then move the CacheDelete plist files:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; sudo mv &#x2F;System&#x2F;Library&#x2F;CacheDelete &#x2F;System&#x2F;Library&#x2F;CacheDeleteBackup
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now reboot and &lt;code&gt;deleted&lt;&#x2F;code&gt; should no longer run.&lt;&#x2F;p&gt;
&lt;p&gt;Note if you also moved
the actual binaries above then the system will no longer boot, this is
easy to fix (assuming you didn&#x27;t remove them completely) but involves a
few extra steps if your hard disk is encrypted.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mounting-an-encrypted-hard-disk-from-recovery&quot;&gt;Mounting an encrypted hard disk from recovery&lt;&#x2F;h3&gt;
&lt;p&gt;First boot to recover mode and open a terminal as above. Then you need to unlock the encrypted disk.&lt;&#x2F;p&gt;
&lt;p&gt;Use &lt;code&gt;diskutil apfs list&lt;&#x2F;code&gt; to find the correct volume (check the capacity
and label), and copy the Logical Volume UUID (it will be something like
&lt;code&gt;B807C2A0-577F-3DB0-9002-F82B9137696C&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Then unlock the disk with your disk password (this may be the same as
your user password):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; diskutil apfs unlockVolume B807C2A0-577F-3DB0-9002-F82B9137696C
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once it is unlocked correctly, you can mount it with diskutil by name,
e.g.&amp;quot;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; diskutil mount disk2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then find it mounted in &lt;code&gt;&#x2F;Volumes&#x2F;${LABEL}&lt;&#x2F;code&gt;, there you can make any
necessary fixes and then reboot.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;other-fixes&quot;&gt;Other fixes&lt;&#x2F;h2&gt;
&lt;p&gt;The above steps fixed the issue I had with CacheDelete which was a
major problem for a few weeks. But I also recommend the following
improvements.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;disabling-spotlight&quot;&gt;Disabling Spotlight&lt;&#x2F;h3&gt;
&lt;p&gt;Spotlight (the OS X file searcher) indexes all files for rapid
searching, but this indexing can be CPU and Disk IO intensive and run at
inopportune times (you may see this as the &lt;code&gt;mds_stores&lt;&#x2F;code&gt; process). Since I never use Spotlight, I just disable it
completely (I only use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BurntSushi&#x2F;ripgrep&quot;&gt;ripgrep&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sudo launchctl unload -w &#x2F;System&#x2F;Library&#x2F;LaunchDaemons&#x2F;com.apple.metadata.mds.plist
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that you need the SIP disabled to run that.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;disabling-transparency&quot;&gt;Disabling transparency&lt;&#x2F;h3&gt;
&lt;p&gt;Disabling transparency helps to reduce CPU usage by the &lt;code&gt;WindowServer&lt;&#x2F;code&gt;
process.&lt;&#x2F;p&gt;
&lt;p&gt;Simply go to the accessibility settings and check Reduce Transparency
under Display.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;I hope this helps anyone else facing the same issue, it was a huge
frustration for weeks. I&#x27;ve written this as much for my own reference
too!&lt;&#x2F;p&gt;
&lt;p&gt;Hopefully one day we&#x27;ll be able to use Arch Linux at work too.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Why governments should adopt and invest in FOSS</title>
		<published>2020-09-12T00:00:00+00:00</published>
		<updated>2020-09-12T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jamesmcm.github.io/blog/foss-government/" type="text/html"/>
		<id>https://jamesmcm.github.io/blog/foss-government/</id>
		<content type="html">&lt;p&gt;This post covers why I believe local and national governments should
adopt and invest in &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;philosophy&#x2F;free-sw.en.html&quot;&gt;Free and Open Source Software&lt;&#x2F;a&gt; (FOSS).&lt;&#x2F;p&gt;
&lt;p&gt;This has been in the news recently due to the city of Munich renewing 
it&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;www.zdnet.com&#x2F;article&#x2F;linux-not-windows-why-munich-is-shifting-back-from-microsoft-to-open-source-again&#x2F;&quot;&gt;LiMux Linux distribution&lt;&#x2F;a&gt;
thanks to an agreement between the local SDP and Green politicians, and
the efforts of the &lt;a href=&quot;https:&#x2F;&#x2F;publiccode.eu&#x2F;&quot;&gt;Public Money, Public Code&lt;&#x2F;a&gt; campaign.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Opinions expressed are solely my own and do not express the views or opinions of my employer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;limux&quot;&gt;LiMux&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;LiMux&quot;&gt;LiMux&lt;&#x2F;a&gt; is a project by the German city of Munich to migrate its desktop
infrastructure to FOSS solutions, specifically to the LiMux Linux
distribution (based on Ubuntu) and LibreOffice (initially to OpenOffice). The project was started in 2004, and
migration began in 2006. &lt;&#x2F;p&gt;
&lt;p&gt;By the end of 2013, 15,000 desktops had been migrated successfully.
However, in September 2016 &lt;a href=&quot;https:&#x2F;&#x2F;mspoweruser.com&#x2F;microsoft-germany-moves-into-a-new-headquarters&#x2F;&quot;&gt;Microsoft announced the opening of a new headquarters in Munich&lt;&#x2F;a&gt;, and then
in 2017 the &lt;a href=&quot;https:&#x2F;&#x2F;www.techrepublic.com&#x2F;article&#x2F;end-of-an-open-source-era-linux-pioneer-munich-confirms-switch-to-windows-10&#x2F;&quot;&gt;city council decided to switch back to Microsoft Windows and Office&lt;&#x2F;a&gt;.
The timing of this decision led to many accusations of effective
bribery, using the potential office opening to pressure the council in to using
Microsoft products (note that there is no evidence of a kick-back scheme
&lt;a href=&quot;https:&#x2F;&#x2F;www.zdnet.com&#x2F;article&#x2F;microsoft-to-pay-25m-to-doj-and-sec-in-hungary-bribery-case&#x2F;&quot;&gt;like practiced by Microsoft Hungary&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Fortunately &lt;a href=&quot;https:&#x2F;&#x2F;fsfe.org&#x2F;news&#x2F;2020&#x2F;news-20200506-01.en.html&quot;&gt;this decision has now been reversed&lt;&#x2F;a&gt;, and LiMux 
development and roll-out will continue.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;other-cities&quot;&gt;Other cities&lt;&#x2F;h2&gt;
&lt;p&gt;Munich is not the only city choosing Free Software solutions, many
others are beginning to see the potential benefits too. In Catalonia,
Barcelona&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;ajuntament.barcelona.cat&#x2F;digital&#x2F;es&#x2F;transformacion-digital&#x2F;tecnologia-para-un-gobierno-mejor&#x2F;software-libre&quot;&gt;Digital Transformation programme supports Free Software&lt;&#x2F;a&gt;.
From first-hand experience this means that the government transport &#x2F;
road organisation use LibreOffice for all documents - so local driving
schools, etc. do not need a copy of Microsoft Office to handle the
necessary digital paperwork.&lt;&#x2F;p&gt;
&lt;p&gt;In Valencia, &lt;a href=&quot;https:&#x2F;&#x2F;www.muylinux.com&#x2F;2013&#x2F;08&#x2F;22&#x2F;generalitat-valenciana-libreoffice&#x2F;&quot;&gt;the local government migrated its administration and
schools to LibreOffice&lt;&#x2F;a&gt;
saving 1.5 million euros per year, and saving students and other
end-users from having to purchase their own copies of Microsoft Office.&lt;&#x2F;p&gt;
&lt;p&gt;However, it is not always straightforward. &lt;a href=&quot;https:&#x2F;&#x2F;lwn.net&#x2F;Articles&#x2F;737818&#x2F;&quot;&gt;Munich faced a lot of push-back in some areas&lt;&#x2F;a&gt;, and the &lt;a href=&quot;https:&#x2F;&#x2F;cronicaglobal.elespanol.com&#x2F;politica&#x2F;colau-gasta-4-5-millones-en-microsoft-mientras-promete-software-libre_32165_102.html&quot;&gt;city of Barcelona still pays almost 5 million
euros&lt;&#x2F;a&gt;
in license costs to Microsoft.&lt;&#x2F;p&gt;
&lt;p&gt;The main issue here is not so much the direct cost to the city itself
(which is substantial, but not critical compared to other costs -
especially since any migration will incur a significant short-term
cost), but more that the cost must be paid over and over again by all
users separately. Barcelona continues to pay millions to Microsoft every
year, but so will other cities in Spain and across Europe, and then so will all
users of those services that may have to use a copy of Microsoft Office for
compatibility reasons (i.e. students and small businesses).&lt;&#x2F;p&gt;
&lt;p&gt;The same cost is paid over and over again to a foreign company that will
not hire local developers or invest in the local economy, and &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Criticism_of_Microsoft#Vendor_lock-in&quot;&gt;uses vendor lock-in&lt;&#x2F;a&gt;
to eventually control all of the critical infrastructure.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;benefits-of-foss&quot;&gt;Benefits of FOSS&lt;&#x2F;h2&gt;
&lt;p&gt;The most commonly cited benefit of Free Software is certainly the cost
savings vs. proprietary licensing. Whilst this can be a benefit
in some circumstances, I think it overlooks many greater far-reaching
benefits, and may not actually manifest itself in the short-term due to
the additional costs of the actual migration (i.e. costs of deployment
and training).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shared-investment&quot;&gt;Shared investment&lt;&#x2F;h3&gt;
&lt;p&gt;The main benefit of using FOSS solutions is that any investment in the
development and improvement of the software also benefits all other
users of the software.&lt;&#x2F;p&gt;
&lt;p&gt;That is, whilst the city of Munich might need &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;WollMux&#x2F;WollMux&quot;&gt;some improvements in
handling templates&lt;&#x2F;a&gt;, other cities
might need other improvements - however they can all benefit from
each others&#x27; investment, with no need to pay again just to keep a license.&lt;&#x2F;p&gt;
&lt;p&gt;This helps to build up a commonwealth of high-quality, well-maintained
software which anyone can use. There is no central, unique
owner of the projects (any project could be forked if necessary), so
there is no company that can demand payments just to allow you to keep using the
existing software.&lt;&#x2F;p&gt;
&lt;p&gt;Any investment in development made is truly an investment, leading directly
to project improvements, rather than just money sent to a foreign
company whilst the customers have no ownership of the actual product,
allowing the company to charge even more in the future just for the
right to keep using it (usually this is done by giving discounts for the
early migration which then result in higher prices later once the
customer is locked in).&lt;&#x2F;p&gt;
&lt;p&gt;Note that this initial investment might be higher than the current costs
of existing proprietary software licensing, when considering the
migration and training costs and possible development costs. However,
unlike those licensing costs it is a one-time cost, and the customer
retains some ownership over the resulting product (i.e. there is not a
license that can be revoked).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;freedom-for-development&quot;&gt;Freedom for development&lt;&#x2F;h3&gt;
&lt;p&gt;There is also more freedom in the development process. The fact that the
products aren&#x27;t owned by a company means that contributions can be made
by anyone, anywhere. &lt;&#x2F;p&gt;
&lt;p&gt;Users of the software (such as the cities mentioned above) could fund
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hng&#x2F;tech-coops&quot;&gt;local co-operatives of developers&lt;&#x2F;a&gt; to add desired features and maintain
the projects, instead of being forced to fund a foreign corporation with
no local investment.&lt;&#x2F;p&gt;
&lt;p&gt;In the long-term this might also help to break up some of the monopolistic
Big Tech companies, and result in a freer society and business
environment for everyone.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;national-security&quot;&gt;National security&lt;&#x2F;h3&gt;
&lt;p&gt;In Europe especially, the current dependence on proprietary software
often means a dependence on foreign corporations which operate in
co-operation with their country&#x27;s intelligence service. As revealed by
Edward Snowden, &lt;a href=&quot;https:&#x2F;&#x2F;www.theguardian.com&#x2F;world&#x2F;2013&#x2F;jul&#x2F;11&#x2F;microsoft-nsa-collaboration-user-data&quot;&gt;Microsoft provided backdoor access to encrypted messages&lt;&#x2F;a&gt; to
the NSA, CIA and FBI as part of the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;PRISM_(surveillance_program)&quot;&gt;PRISM programme&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It is indefensible that such a company can run the critical infrastructure
of the vast majority of local and central government administrations, as
well as personal computers. Especially when the &lt;a href=&quot;https:&#x2F;&#x2F;www.theguardian.com&#x2F;us-news&#x2F;2015&#x2F;jul&#x2F;08&#x2F;nsa-tapped-german-chancellery-decades-wikileaks-claims-merkel&quot;&gt;NSA has been proven to
intercept communications of supposedly allied nations&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With FOSS software there is no central company to be pressured by
intelligence services or build in backdoors. All of the code can be
scrutinised by developers and users. &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Linus%27s_law&quot;&gt;Linus&#x27;s Law&lt;&#x2F;a&gt; states:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given enough eyeballs, all bugs are shallow.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The same concept applies to introducing backdoors to access private data. It
might be possible to pressure or bribe one company to do so, but it
isn&#x27;t possible to do the same to tens of thousands of independent users and
developers.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bigger-picture&quot;&gt;Bigger picture&lt;&#x2F;h2&gt;
&lt;p&gt;The effects of co-ordinated FOSS adoption are much more far-reaching and
positive than solely saving the costs of current software licenses.&lt;&#x2F;p&gt;
&lt;p&gt;The adoption of FOSS and investment by many governments (at all levels)
would help to create a commonwealth of quality Free Software for all
citizens and government bodies to benefit from.&lt;&#x2F;p&gt;
&lt;p&gt;It would also allow development of these projects to be done from
anywhere, allowing users to fund local developers or co-operatives. This
would help to break up the massive, monopolistic Big Tech companies, and
could also be used as a way of bringing investment and jobs to parts of
the country&#x2F;region that require it.&lt;&#x2F;p&gt;
&lt;p&gt;This would also be highly beneficial to developers, as they would have
more control over their own work (as they are not tied to the few
employers that own these popular products), and would also likely be
able to negotiate a larger portion of the compensation directly since
there would not be the overhead of salespeople and lawyers, etc. present in
current large software companies.&lt;&#x2F;p&gt;
&lt;p&gt;All Free Software users would benefit from the greater usage and
investment - GNU&#x2F;Linux users could expect better hardware support for
example, as it becomes more commonplace.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-to-get-there&quot;&gt;How to get there&lt;&#x2F;h2&gt;
&lt;p&gt;Whilst the benefits of adopting FOSS are clear, the cases in Munich and
Hungary show that it will not be an easy path to greater adoption. We
cannot just rely on central government eventually carry out the adoption
as the few representatives are easily pressured by the beneficiaries of
the status quo, and are serving a much larger political platform.&lt;&#x2F;p&gt;
&lt;p&gt;Ultimately, I think the solution lies in applying &amp;quot;Linus&#x27;s Law&amp;quot; to
politics itself. It is no coincidence that the successes in FOSS
adoption so far have been concentrated in local government - in specific
city councils and regional administrations, because it is easier for
engaged groups of citizens to have a direct effect in local government.&lt;&#x2F;p&gt;
&lt;p&gt;At a national level, it might be possible for a large software company
to pressure a few political leaders and policy makers, however, it is
much harder to do the same to a whole board of a dozen or more local
councillors (especially across the multitude of different counties and
regional administrations). There is &amp;quot;safety in numbers&amp;quot; as it becomes
unfeasible to pressure and manipulate large groups of
politically-engaged citizens.&lt;&#x2F;p&gt;
&lt;p&gt;It it is the responsibility of every citizen in a democratic society not
only to inform themselves and vote in national elections, but also to really partake in the
political system: by joining a political party, taking part in local and
regional elections, and ensuring that the democratic standards are
upheld both inside the party and in political institutions.&lt;&#x2F;p&gt;
&lt;p&gt;This should have support from across the political spectrum, as
guaranteeing the security and privacy of citizens&#x27; data whilst also
cutting out the middlemen of massive foreign corporations, shouldn&#x27;t be
a controversial policy.&lt;&#x2F;p&gt;
&lt;p&gt;Efforts in local politics have already proven successful, such as the
LiMux project and others mentioned previously. So if you agree with the
points raised here I hope you will join whichever local political party
you agree most with, and help to bring about FOSS adoption by your
government.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;Greater FOSS adoption by our governments benefits the administrations
themselves by being free from repeated software licensing costs.&lt;&#x2F;p&gt;
&lt;p&gt;It would benefit us as citizens by helping to ensure that our data is kept secure and private from foreign
intelligence services. It would also benefit us as FOSS users by providing a
greater user base, ultimately leading to better hardware and software
support. &lt;&#x2F;p&gt;
&lt;p&gt;Finally, it would benefit us as developers by providing greater
freedom in the possibilities of employment (since many different
employers could work on contracts for FOSS improvement), leading to a
better geographical distribution of opportunities and not being subject
to bad corporate practices such as non-compete agreements and
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;High-Tech_Employee_Antitrust_Litigation&quot;&gt;anti-poaching agreements between large software companies&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you agree with the points in this post, please consider:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Joining a local political party which you agree with, and supporting
FOSS adoption&lt;&#x2F;li&gt;
&lt;li&gt;Joining the &lt;a href=&quot;https:&#x2F;&#x2F;publiccode.eu&#x2F;&quot;&gt;Public Money, Public Code campaign&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Supporting the &lt;a href=&quot;https:&#x2F;&#x2F;fsfe.org&#x2F;&quot;&gt;Free Software Foundation Europe (FSFE)&lt;&#x2F;a&gt; (or your &lt;a href=&quot;https:&#x2F;&#x2F;www.fsf.org&#x2F;&quot;&gt;local Free Software Foundation&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Using ALMA for persistent LiveUSB installations of Arch Linux</title>
		<published>2020-09-09T00:00:00+00:00</published>
		<updated>2020-09-09T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jamesmcm.github.io/blog/alma/" type="text/html"/>
		<id>https://jamesmcm.github.io/blog/alma/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;r-darwish&#x2F;alma&quot;&gt;ALMA&lt;&#x2F;a&gt; (available as &lt;a href=&quot;https:&#x2F;&#x2F;aur.archlinux.org&#x2F;packages&#x2F;alma-git&#x2F;&quot;&gt;alma-git on the AUR&lt;&#x2F;a&gt;) is a tool for creating
persistent LiveUSB installations of Arch Linux. With one command you
can generate a customised installation on a
USB stick (or any other removable media) including the packages and 
config files you want, with full persistence.&lt;&#x2F;p&gt;
&lt;p&gt;This is very useful for disk recovery and system maintenance, and a
great tool for all Linux users. Especially with the customisation
options provided by collections of preset files (such as
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;arch-i3-usb&quot;&gt;arch-i3-usb&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Opinions expressed are solely my own and do not express the views or opinions of my employer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;alma&quot;&gt;ALMA&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;r-darwish&#x2F;alma&quot;&gt;ALMA&lt;&#x2F;a&gt; is a tool, written in Rust, to
automate the installation of Arch Linux to removable media with
persistent storage (i.e. it is usable as a normal system, booted from
USB).&lt;&#x2F;p&gt;
&lt;p&gt;ALMA creates an ext4 partition, installs Arch Linux and sets the locale
and installs GRUB for you. Full disk encryption is also available with
the &lt;code&gt;alma -e&lt;&#x2F;code&gt; option, using &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;Dm-crypt&#x2F;Encrypting_an_entire_system&quot;&gt;LUKS&lt;&#x2F;a&gt;,
where you will be prompted for the password.&lt;&#x2F;p&gt;
&lt;p&gt;Note ALMA is available in the AUR as &lt;a href=&quot;https:&#x2F;&#x2F;aur.archlinux.org&#x2F;packages&#x2F;alma-git&#x2F;&quot;&gt;alma-git&lt;&#x2F;a&gt;.
I recommend the git version because there are some significant unreleased changes.&lt;&#x2F;p&gt;
&lt;p&gt;However, what really makes ALMA powerful is the ability to customise
your installation with preset files.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;preset-files&quot;&gt;Preset files&lt;&#x2F;h2&gt;
&lt;p&gt;Preset files are &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;TOML&quot;&gt;TOML files&lt;&#x2F;a&gt; which specify one or more of the
following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A list of Arch Linux packages to install: &lt;code&gt;packages&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;A list of AUR packages to install (which will be handled by the
user-specified AUR helper, by default this is &lt;code&gt;yay&lt;&#x2F;code&gt;): &lt;code&gt;aur_packages&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;A bash script to execute &lt;strong&gt;after&lt;&#x2F;strong&gt; installation of the above packages:
&lt;code&gt;script&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;A list of directories (in the directory of preset files) which should
be mounted when the bash script is run: &lt;code&gt;shared_directories&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;A list of required environment variables to be used in the script
(these must be passed to ALMA in the environment): &lt;code&gt;environment_variables&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Here is an example for installing &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alacritty&#x2F;alacritty&quot;&gt;alacritty&lt;&#x2F;a&gt; and copying its config
file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;packages &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;alacritty&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shared_directories &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;alacritty_config&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mkdir -p &#x2F;home&#x2F;${ALMA_USER}&#x2F;.config&#x2F;alacritty&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cp &#x2F;shared_dirs&#x2F;alacritty_config&#x2F;alacritty.yml &#x2F;home&#x2F;${ALMA_USER}&#x2F;.config&#x2F;alacritty&#x2F;alacritty.yml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;chown -R ${ALMA_USER} &#x2F;home&#x2F;${ALMA_USER}&#x2F;.config&#x2F;alacritty
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;chgrp -R ${ALMA_USER} &#x2F;home&#x2F;${ALMA_USER}&#x2F;.config&#x2F;alacritty
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;environment_variables &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ALMA_USER&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The environment variable &lt;code&gt;ALMA_USER&lt;&#x2F;code&gt; would be the username, created in
an earlier preset file.&lt;&#x2F;p&gt;
&lt;p&gt;What makes ALMA so useful is that these preset files are &lt;em&gt;composable&lt;&#x2F;em&gt;.
They will be executed in alphanumeric order, so you can create a
collection of preset files for your own customised installation of Arch
Linux, and then swap out preset files for different package
configurations, etc. (i.e. for different sizes of removeable media).&lt;&#x2F;p&gt;
&lt;p&gt;An example of this is my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;arch-i3-usb&quot;&gt;arch-i3-usb&lt;&#x2F;a&gt; collection, where I have a
&amp;quot;minimal&amp;quot; preset collection in &lt;code&gt;&#x2F;preset&lt;&#x2F;code&gt; and additional preset files in
&lt;code&gt;&#x2F;additional&lt;&#x2F;code&gt; for a more comprehensive installation.&lt;&#x2F;p&gt;
&lt;p&gt;This provides a full installation with i3, thunar, alacritty, neovim,
fish and firefox ready to use.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;alma&#x2F;archqemu.png&quot; alt=&quot;arch-i3-usb standard installation running in qemu&quot; title=&quot;arch-i3-usb standard installation in qemu&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;known-issue-package-initialisation&quot;&gt;Known issue - package initialisation&lt;&#x2F;h3&gt;
&lt;p&gt;One known issue is that if you install a package which requires some
initialisation step (such as setting the Rust toolchain after installing
rustup) then you can&#x27;t install dependent packages by the normal preset
lists because &lt;em&gt;all&lt;&#x2F;em&gt; of the package installation takes place before any
user scripts are run.&lt;&#x2F;p&gt;
&lt;p&gt;i.e. the order is:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;All non-AUR packages are installed&lt;&#x2F;li&gt;
&lt;li&gt;If AUR packages are present in the toml files, yay (or another specified AUR helper) is installed&lt;&#x2F;li&gt;
&lt;li&gt;All AUR packages are installed.&lt;&#x2F;li&gt;
&lt;li&gt;Preset scripts are executed according to their filenames in alphanumeric order.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This means that in cases that need initialisation steps (such as Rust
packages built from source), you will need to workaround this in the
preset file. Here is an example for i3status-rust:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;packages &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;i3-wm&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;i3lock&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;i3status&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dmenu&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;arandr&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rustup&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;powerline-fonts&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ttf-font-awesome&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;upower&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;aur_packages &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;autotiling&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ttf-font-awesome-4&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shared_directories &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;i3_config&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;script &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sudo -u ${ALMA_USER} rustup toolchain install nightly
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sudo -u ${ALMA_USER} rustup default nightly
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sudo -u ${ALMA_USER} yay -S --nocleanmenu --nodiffmenu --noeditmenu --noupgrademenu --useask --removemake --norebuild --noconfirm --answeredit None --answerclean None --mflags --noconfirm i3status-rust-git
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;environment_variables &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ALMA_USER&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;near-future-improvements&quot;&gt;Near-future improvements&lt;&#x2F;h2&gt;
&lt;p&gt;There are a number of small improvements that could be made in the
near-future.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;secureboot-support&quot;&gt;SecureBoot support&lt;&#x2F;h3&gt;
&lt;p&gt;Support for &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;Unified_Extensible_Firmware_Interface&#x2F;Secure_Boot&quot;&gt;SecureBoot&lt;&#x2F;a&gt;
could be added (probably to ALMA directly since it is a common
requirement). The main difficulty here is testing, since you need to
test it on actual hardware, and deal with adding the signed keys to the
BIOS, etc.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;better-error-handling-and-script-debugging&quot;&gt;Better error handling and script debugging&lt;&#x2F;h3&gt;
&lt;p&gt;At the moment any failure in a user script results in the whole installation
failing. This could be improved by allowing the user to edit, repeat, or
skip a failed user script (showing the user the script output).&lt;&#x2F;p&gt;
&lt;p&gt;A subcommand could also be added allowing the preset developer to lint
their scripts with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;koalaman&#x2F;shellcheck&quot;&gt;shellcheck&lt;&#x2F;a&gt; to catch syntax errors.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;more-preset-examples&quot;&gt;More preset examples&lt;&#x2F;h3&gt;
&lt;p&gt;It would be very useful to add a preset example for loading config files
from a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;twpayne&#x2F;chezmoi&quot;&gt;chezmoi&lt;&#x2F;a&gt; repo (and other
dotfiles managers) instead of just mounting shared directories.&lt;&#x2F;p&gt;
&lt;p&gt;It would also be useful to add a preset example for &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;Dm-crypt&#x2F;Encrypting_a_non-root_file_system&quot;&gt;home partition encryption&lt;&#x2F;a&gt;
(i.e. not the whole disk) and unencrypting on login with polkit, etc. -
for cases where full disk encryption is not desirable (i.e. on a USB
with other partitions for general file transfer on FAT32).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;far-future-almahub&quot;&gt;Far future: ALMAhub?&lt;&#x2F;h2&gt;
&lt;p&gt;In the more distant future, it would be great to allow ALMA to install
to a specified (already existing) partition instead of wiping the disk.
GRUB installation could also be optional in this case. This, plus an
option to disable the few LiveUSB optimisations (like storing journal
log data in memory, no swap, etc.), would allow ALMA to function as an
installer for normal Arch Linux installations too.&lt;&#x2F;p&gt;
&lt;p&gt;With these additions, and the composable preset files, one could build a
repository like the AUR for hosting different collections of preset
files. So you could browse the repository, choose a configuration that
appeals to you, install it to LiveUSB to try it out, and then use that
same LiveUSB to install it to disk if you like it.&lt;&#x2F;p&gt;
&lt;p&gt;The repository would need to be easily auditable (like the AUR) since
these preset files can install arbitrary packages and run arbitrary
commands, so it is clearly a possible security risk (like any custom
installer for Linux
distributions).&lt;&#x2F;p&gt;
&lt;p&gt;Another huge addition would be the ability to run ALMA in a minimal
Docker container, so it could be run on non-Arch Linux platforms. It
would be great if it could be run on Windows and Ubuntu so as to
bootstrap the installation process (i.e. first to LiveUSB, then create
the necessary partitions on disk from the live environment and install
to disk from there).&lt;&#x2F;p&gt;
&lt;p&gt;These are much larger additions, but I think that it would be incredibly
useful to the Linux community as a whole to be able to share different
configurations as installations directly. This is especially true for
newer users, with the ability to try them out as a persistent LiveUSB first.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;Hopefully you will find ALMA as useful as I have, and create a LiveUSB
installation for future debugging and system recovery.&lt;&#x2F;p&gt;
&lt;p&gt;If you also find the possible future improvements interesting, please
share your preset collections, or even contribute to ALMA directly!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Retrospective of my first useful Rust project</title>
		<published>2020-09-05T00:00:00+00:00</published>
		<updated>2020-09-05T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jamesmcm.github.io/blog/vopono/" type="text/html"/>
		<id>https://jamesmcm.github.io/blog/vopono/</id>
		<content type="html">&lt;p&gt;This post is a retrospective of my first &amp;quot;useful&amp;quot; Rust project. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&quot;&gt;vopono&lt;&#x2F;a&gt; 
is a Linux program to launch applications in temporary network
namespaces (managed by vopono), in order to run specific applications
through VPN connections, without affecting the rest of your system.&lt;&#x2F;p&gt;
&lt;p&gt;vopono is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&quot;&gt;available on Github&lt;&#x2F;a&gt; (and in the &lt;a href=&quot;https:&#x2F;&#x2F;aur.archlinux.org&#x2F;packages&#x2F;vopono&#x2F;&quot;&gt;AUR on Arch Linux&lt;&#x2F;a&gt;) and
licensed under the GPLv3 license (&lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;philosophy&#x2F;pragmatic.html&quot;&gt;see reasoning here&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ll consider the motivation and background to creating vopono, the
upsides and downsides of writing it in Rust (and existing issues), and
some points about starting new side projects in general. I hope this
helps new Rust programmers starting their own first projects, or for
other programmers to consider using Rust.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Opinions expressed are solely my own and do not express the views or opinions of my employer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;background&quot;&gt;Background&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve used VPN services for many years, previously as a customer of
PrivateInternetAccess, and now with Mullvad (since
&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=21584958&quot;&gt;PrivateInternetAccess was purchased by a less scrupulous parent company&lt;&#x2F;a&gt;), as it is very
useful for working around network traffic restrictions (e.g. SSH access
restrictions or blocked websites) whilst travelling.&lt;&#x2F;p&gt;
&lt;p&gt;However, I often wanted to be able to quickly connect to the VPN without
disrupting other ongoing connections (i.e. video calls, etc.). In 2015,
I learnt how network namespaces could do this (on Linux), and pieced together some
bash scripts for OpenVPN &lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;questions&#x2F;149293&#x2F;feed-all-traffic-through-openvpn-for-a-specific-network-namespace-only&quot;&gt;from this StackExchange post&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I used this for a few years, but it was a bit inconvenient having to
manually launch the network namespace. Especially if you wanted to
connect to different servers in order to test geolocation for example.&lt;&#x2F;p&gt;
&lt;p&gt;In April 2020, Wireguard was merged in to the Linux kernel
5.6, and became much more readily available with VPN providers. This,
combined with the switch to Mullvad, inspired me to add Wireguard
support to the scripts I was using. But I thought it would be best to
also address the issues of manually managing the network namespaces and
create a comprehensive application to handle OpenVPN and Wireguard
connections for various VPN providers, and create and destroy the
network namespaces on demand. &lt;&#x2F;p&gt;
&lt;p&gt;This was the start of vopono, my first
useful Rust project (I suppose &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;s3rename&quot;&gt;s3rename&lt;&#x2F;a&gt; was also useful, but a much smaller
scope).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;benefits-of-rust&quot;&gt;Benefits of Rust&lt;&#x2F;h2&gt;
&lt;p&gt;I chose to write vopono in Rust as I am still learning the language, and
greatly appreciate the ease of debugging with tools like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-analyzer&#x2F;rust-analyzer&quot;&gt;rust-analyzer&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&quot;&gt;clippy&lt;&#x2F;a&gt;. There are many
other benefits too:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;enums&quot;&gt;Enums&lt;&#x2F;h3&gt;
&lt;p&gt;Rust&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch06-01-defining-an-enum.html&quot;&gt;native enum support&lt;&#x2F;a&gt; makes reasoning and debugging much easier
when dealing with enumerated values (like the choice between the TCP and
UDP protocols for OpenVPN connections). The Rust compiler forces us to
handle every possible value helping to prevent bugs from ever being
written.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;structopt&quot;&gt;StructOpt&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;structopt&quot;&gt;StructOpt&lt;&#x2F;a&gt; is a great crate for handling command-line options and
arguments via derived trait implementations over your structs defining
commands and subcommands. This allows you to abstract away dealing with command-line arguments directly,
and for the relevant code to be somewhat self-documenting (as &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;rust-by-example&#x2F;meta&#x2F;doc.html&quot;&gt;doc comments&lt;&#x2F;a&gt; are used to provide the user-facing help output).&lt;&#x2F;p&gt;
&lt;p&gt;Note that some developers prefer to use &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;clap&quot;&gt;clap&lt;&#x2F;a&gt; directly.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;result-and-anyhow&quot;&gt;Result and anyhow&lt;&#x2F;h3&gt;
&lt;p&gt;Rust&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;result&#x2F;enum.Result.html&quot;&gt;Result enum&lt;&#x2F;a&gt; 
and &lt;code&gt;?&lt;&#x2F;code&gt; operator (the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;edition-guide&#x2F;rust-2018&#x2F;error-handling-and-panics&#x2F;the-question-mark-operator-for-easier-error-handling.html&quot;&gt;try operator&lt;&#x2F;a&gt;)
make it simple and ergonomic to handle operations which may fail
(which are almost all operations when dealing with disk IO and
launching processes).&lt;&#x2F;p&gt;
&lt;p&gt;It is also very convenient when working with fallible operations over a
collection, where we may want to return to the user a list of operations
which failed. In Rust, we can 
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;rust-by-example&#x2F;error&#x2F;iter_result.html&quot;&gt;filter and map over a collection of Results&lt;&#x2F;a&gt; 
to a collection of Errors and then return that to the user - this feels
very natural compared to other languages.&lt;&#x2F;p&gt;
&lt;p&gt;Combined with the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;anyhow&quot;&gt;anyhow crate&lt;&#x2F;a&gt;, it is easy to provide useful error
messages to the end-user whilst also keeping the code very concise.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;serde&quot;&gt;Serde&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;serde&quot;&gt;Serde crate&lt;&#x2F;a&gt; provides traits you can derive on your structs,
allowing for easy serialization and deserialization. &lt;&#x2F;p&gt;
&lt;p&gt;In vopono this is used to serialize and deserialize lockfiles, so that
if you launch a new application in an existing network namespace (via
vopono), the namespace will not be destroyed until &lt;em&gt;both&lt;&#x2F;em&gt; applications
have terminated.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;drop&quot;&gt;Drop&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;ops&#x2F;trait.Drop.html&quot;&gt;Drop trait&lt;&#x2F;a&gt; allows us to run a destructor when a struct is
dropped (i.e. goes out of scope). This is used in vopono to
automatically destroy the network namespaces when the application is
closed. I initially got the idea for using &lt;code&gt;Drop&lt;&#x2F;code&gt; this way from the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;r-darwish&#x2F;alma&quot;&gt;ALMA source code&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Note this causes some issues (discussed below) when we want to skip
destructors in some cases. Also if vopono is instantly terminated (i.e.
&lt;code&gt;kill -9&lt;&#x2F;code&gt;) these will likely not run, so vopono is written to clean up
any orphaned resources when it is executed - i.e. namespaces or
lockfiles with no running applications.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cargo&quot;&gt;Cargo&lt;&#x2F;h3&gt;
&lt;p&gt;The Cargo package manager itself is a great benefit of using Rust. For
example, when writing vopono it made it trivial to add the
&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;compound_duration&quot;&gt;compound_duration&lt;&#x2F;a&gt; crate,
used only for reporting the uptime of running network namespaces.&lt;&#x2F;p&gt;
&lt;p&gt;The specification of the software license in the &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; file is
also a great feature, making it easy to verify that your dependencies
have compatible licenses.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;include-str-macro&quot;&gt;include_str macro&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;macro.include_str.html&quot;&gt;include_str macro&lt;&#x2F;a&gt; can be used to include a file on disk as a
static string in the binary at compile time. This is used in vopono for
providers where we cannot download certain files by other means e.g.
with TigerVPN because the configuration details are behind a login with
a captcha and there is no API.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rustls&quot;&gt;Rustls&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;rustls&quot;&gt;Rustls&lt;&#x2F;a&gt; is a TLS library which can be
used in place of OpenSSL. This is used in the &lt;code&gt;vopono sync&lt;&#x2F;code&gt; command,
which gets provider configuration files.&lt;&#x2F;p&gt;
&lt;p&gt;This subcommand relies on the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;reqwest&quot;&gt;reqwest crate&lt;&#x2F;a&gt;
to make HTTPS requests, but we want to avoid depending on OpenSSL to make it easier to
build a statically linked binary that will be independent of the runtime
environment. Fortunately we only need to set the &amp;quot;rustls&amp;quot; feature flag
in the reqwest dependency.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;musl-and-static-linking&quot;&gt;musl and static linking&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;x86_64-unknown-linux-musl&lt;&#x2F;code&gt; target can be used to (cross-)compile,
&lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2016&#x2F;05&#x2F;13&#x2F;rustup.html&quot;&gt;statically linking with musl&lt;&#x2F;a&gt; instead of dynamically linking to glibc
(the default target). This means we can deploy the resulting binary
without worrying about glibc version mismatches (if we deploy to a
platform with an earlier version of glibc).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;difficulties&quot;&gt;Difficulties&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;small-standard-library&quot;&gt;Small standard library&lt;&#x2F;h3&gt;
&lt;p&gt;If you come from scripting languages, you may find that Rust has a
smaller standard library compared to those languages. For example, there
is no recursive copy (&lt;code&gt;cp -r&lt;&#x2F;code&gt; equivalent) in the standard library
directly, and I had to do this using the 
&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;walkdir&quot;&gt;walkdir crate&lt;&#x2F;a&gt; and copying each item.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;compile-times&quot;&gt;Compile times&lt;&#x2F;h3&gt;
&lt;p&gt;Rust has longer compile times than most other languages (except perhaps
C++) this is particularly true when using crates which include
procedural macros.&lt;&#x2F;p&gt;
&lt;p&gt;There a few options to &lt;a href=&quot;https:&#x2F;&#x2F;vfoley.xyz&#x2F;rust-compile-speed-tips&#x2F;&quot;&gt;reduce compile times&lt;&#x2F;a&gt;
(also &lt;a href=&quot;https:&#x2F;&#x2F;endler.dev&#x2F;2020&#x2F;rust-compile-times&#x2F;&quot;&gt;see this more recent post&lt;&#x2F;a&gt;),
such as using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mozilla&#x2F;sccache&quot;&gt;sccache&lt;&#x2F;a&gt; to cache build artifacts.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;binary-size-and-feature-creep&quot;&gt;Binary size and feature creep&lt;&#x2F;h3&gt;
&lt;p&gt;As more dependencies are added, the final binary size can grow
considerably. To control this, it&#x27;s recommended to use &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;features.html&quot;&gt;feature flags&lt;&#x2F;a&gt;
in your &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; file (and disabling default features) to
include only what you need from large dependencies.&lt;&#x2F;p&gt;
&lt;p&gt;You can also use &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;cargo-udeps&quot;&gt;cargo-udeps&lt;&#x2F;a&gt; to
detect unused dependencies.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;minimum-rust-version-and-dependencies&quot;&gt;Minimum Rust version and dependencies&lt;&#x2F;h3&gt;
&lt;p&gt;The Rust features and parts of the standard library that you use will
result in an effective minimum Rust version for your project. I had &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&#x2F;issues&#x2F;2&quot;&gt;one
issue&lt;&#x2F;a&gt; result from the
&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;compound_duration&quot;&gt;compound_duration crate&lt;&#x2F;a&gt; mentioned above which raised the minimum Rust
version to 1.43.&lt;&#x2F;p&gt;
&lt;p&gt;As far as I know there is no way to automatically determine the minimum
Rust version, although &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;8kkigi&#x2F;how_to_find_out_a_minimum_rust_compiler_version&#x2F;&quot;&gt;this discussion on Reddit&lt;&#x2F;a&gt;
has scripts for compiling with many minor versions until you build
successfully.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ongoing-issues&quot;&gt;Ongoing issues&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;dialoguer-validation-and-passing-references-to-closures&quot;&gt;dialoguer validation and passing references to closures&lt;&#x2F;h3&gt;
&lt;p&gt;vopono uses the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;dialoguer&quot;&gt;dialoguer crate&lt;&#x2F;a&gt; for user input for the &lt;code&gt;vopono sync&lt;&#x2F;code&gt;
command. I also validate the input using the &lt;code&gt;validate_with()&lt;&#x2F;code&gt; method so
that the user gets feedback immediately and can correct any errors.&lt;&#x2F;p&gt;
&lt;p&gt;However, the &lt;code&gt;validate_with()&lt;&#x2F;code&gt; method &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;dialoguer&#x2F;0.6.2&#x2F;dialoguer&#x2F;struct.Input.html#method.validate_with&quot;&gt;requires that the closure used has
a static lifetime&lt;&#x2F;a&gt;.
This is problematic for checking whether the user-entered Wireguard private key
matches the chosen public key, since we need to include the previously-chosen
public key in the closure - but this doesn&#x27;t have a static lifetime.&lt;&#x2F;p&gt;
&lt;p&gt;For now I worked around this with extra clones (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&#x2F;blob&#x2F;master&#x2F;src&#x2F;providers&#x2F;mozilla&#x2F;wireguard.rs#L65&quot;&gt;see devices_clone&lt;&#x2F;a&gt;)
but hopefully a better solution is possible. Perhaps the static lifetime
restriction in dialoguer could also be relaxed (since we know the
closure will terminate before we receive the input and continue).&lt;&#x2F;p&gt;
&lt;p&gt;This is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&#x2F;issues&#x2F;19&quot;&gt;tracked in this issue&lt;&#x2F;a&gt;. If you have any suggestions please add a comment there!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;skipping-destructors&quot;&gt;Skipping destructors&lt;&#x2F;h3&gt;
&lt;p&gt;As mentioned previously, vopono uses the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;ops&#x2F;trait.Drop.html&quot;&gt;Drop trait&lt;&#x2F;a&gt; to
automatically clean up resources when the relevant structs go out of
scope. However, sometimes we don&#x27;t want to trigger these destructors but
still have the structs go out of scope - for example, if we have
multiple vopono processes running applications in the same network
namespace, then we don&#x27;t want to destroy the network namespace until the
final application has terminated. So if other lockfiles still exist, we need
to prevent the clean-up destructors from firing.&lt;&#x2F;p&gt;
&lt;p&gt;For now this is done by putting the relevant structs in a Box, and then
calling &lt;code&gt;Box::leak()&lt;&#x2F;code&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;boxed&#x2F;struct.Box.html#method.leak&quot;&gt;docs here&lt;&#x2F;a&gt;).
This works but feels a bit clunky when dealing with multiple structs&#x2F;fields (e.g. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&#x2F;blob&#x2F;4ebf4b6bdc493c4d95bf6e237136b330723aaf27&#x2F;src&#x2F;netns.rs#L308&quot;&gt;here preventing the destructors when another vopono instance is using the same namespace&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;debug!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Skipping destructors since other vopono instance using this namespace!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; openvpn = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.openvpn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; openvpn = Box::new(openvpn);
&lt;&#x2F;span&gt;&lt;span&gt;Box::leak(openvpn);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One possible alternative might be to use &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;mem&#x2F;struct.ManuallyDrop.html&quot;&gt;std::mem::ManuallyDrop&lt;&#x2F;a&gt;
, however then the &lt;code&gt;drop()&lt;&#x2F;code&gt; method is unsafe, so this might end up being
even less ergonomic.&lt;&#x2F;p&gt;
&lt;p&gt;This is tracked &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&#x2F;issues&#x2F;20&quot;&gt;in this issue&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;vpn-providers-enum-or-structs-with-traits&quot;&gt;VPN Providers - enum or structs with traits?&lt;&#x2F;h3&gt;
&lt;p&gt;The most difficult design decision was regarding how to handle VPN
provider specific code (i.e. the code that generates the OpenVPN and
Wireguard configuration files when using &lt;code&gt;vopono sync&lt;&#x2F;code&gt;), such that it
would be easy for contributors to add support for new VPN providers.&lt;&#x2F;p&gt;
&lt;p&gt;Ideally we would get as close as possible to the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Contributors only need to add new source code files to add support for a new VPN
provider.&lt;&#x2F;li&gt;
&lt;li&gt;The VPN provider specific code is independent of other VPN provider code.&lt;&#x2F;li&gt;
&lt;li&gt;The interfaces that the code must provide are clear to the contributor,
so they know what they need to implement.&lt;&#x2F;li&gt;
&lt;li&gt;They do not need to edit the shared&#x2F;core parts of vopono.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Initially I had planned to use an enum for providers (since we need one
to handle command line arguments anyway) and implement the
code directly on that enum. However, then all the implementation code
would be together in the enum Impl, since we cannot do separate Impl blocks for different
enum variants (note that even the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;varkor&#x2F;rfcs&#x2F;blob&#x2F;enum-variant-types&#x2F;text&#x2F;0000-enum-variant-types.md&quot;&gt;enum variant type RFC&lt;&#x2F;a&gt;
would prohibit this). This breaks the first 2 points above.&lt;&#x2F;p&gt;
&lt;p&gt;Therefore I chose to use traits, creating a base VpnProvider trait, and
then OpenVpnProvider and WireguardProvider traits which have that as a
supertrait. This way the interfaces are clear to any contributors and
each VPN provider can be a separate struct implementing these traits (it
also gives contributors a lot of freedom in how they implement them - as
they can store state in the struct, etc.).&lt;&#x2F;p&gt;
&lt;p&gt;The idea was that we could then pass trait objects to the functions that
use the VPN provider objects with dynamic dispatch, i.e. as &lt;code&gt;Box&amp;lt;dyn VpnProvider&amp;gt;&lt;&#x2F;code&gt;, and then check if the actual struct implements the
necessary &lt;code&gt;WireguardProvider&lt;&#x2F;code&gt; or &lt;code&gt;OpenVpnProvider&lt;&#x2F;code&gt; traits depending on
the command line arguments, and return an error if not.&lt;&#x2F;p&gt;
&lt;p&gt;The problem is that there is no way to try to downcast from a supertrait
trait object to a subtrait. We want something like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;myfn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span&gt;: Box&amp;lt;dyn VpnProvider&amp;gt;) -&amp;gt; anyhow::Result&amp;lt;()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; as_wireguard: Box&amp;lt;dyn WireguardProvider&amp;gt; = try_downcast&amp;lt;WireguardProvider&amp;gt;(obj)?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But no such function exists and, as far as I can tell, the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;downcast-rs&quot;&gt;downcast-rs&lt;&#x2F;a&gt;
crate is for downcasting to concrete types, not subtrait trait objects.
&lt;a href=&quot;https:&#x2F;&#x2F;users.rust-lang.org&#x2F;t&#x2F;casting-from-dyn-t-to-dyn-u-where-u-t-solved&#x2F;32213&quot;&gt;This forum post&lt;&#x2F;a&gt; offers
some possibilities using &lt;code&gt;std::mem::transmute&lt;&#x2F;code&gt; but it is unsafe, and not
guaranteed to be stable (note the need for &lt;code&gt;#[repr(C)]&lt;&#x2F;code&gt; for example).&lt;&#x2F;p&gt;
&lt;p&gt;For now I worked around this by using the fact that we have the enum
from the command line arguments, so &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&#x2F;blob&#x2F;master&#x2F;src&#x2F;providers&#x2F;mod.rs#L42&quot;&gt;we can use that to try to generate
the trait object we want&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Do this since we can&amp;#39;t downcast from Provider to other trait objects
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;VpnProvider {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_dyn_wireguard_provider&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; anyhow::Result&amp;lt;Box&amp;lt;dyn WireguardProvider&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;::Mullvad =&amp;gt; Ok(Box::new(mullvad::Mullvad {})),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;::MozillaVpn =&amp;gt; Ok(Box::new(mozilla::MozillaVPN {})),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;::Custom =&amp;gt; Err(anyhow!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Custom provider uses separate logic&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)),
&lt;&#x2F;span&gt;&lt;span&gt;            _ =&amp;gt; Err(anyhow!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Wireguard not implemented&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But this is a painful workaround as we have a fair amount of boilerplate
code and some extra allocation of trait objects.&lt;&#x2F;p&gt;
&lt;p&gt;This also slightly violates the 4th point in the above requirements,
that contributes now have to also add the enum variant entry to
&lt;code&gt;providers&#x2F;mod.rs&lt;&#x2F;code&gt;, but at least this is just a small boilerplate change
and the rest of the implementation code can be in its own files with a
lot of freedom regarding implementation.&lt;&#x2F;p&gt;
&lt;p&gt;This &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&#x2F;issues&#x2F;21&quot;&gt;issue is tracked on Github here&lt;&#x2F;a&gt;,
please add a comment if you have any suggestions as this is quite a
generic problem.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;releases&quot;&gt;Releases&lt;&#x2F;h2&gt;
&lt;p&gt;Releases of vopono are made &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&#x2F;releases&quot;&gt;on Github&lt;&#x2F;a&gt;, and published to &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;vopono&quot;&gt;crates.io&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;aur.archlinux.org&#x2F;packages&#x2F;vopono-bin&#x2F;&quot;&gt;the AUR&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;github-actions&quot;&gt;Github Actions&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;ebbflow.io&#x2F;&quot;&gt;ebbflow project&lt;&#x2F;a&gt; released &lt;a href=&quot;https:&#x2F;&#x2F;ebbflow.io&#x2F;blog&#x2F;vending-linux-2&quot;&gt;Github action workflow files&lt;&#x2F;a&gt;, which I &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&#x2F;blob&#x2F;master&#x2F;.github&#x2F;workflows&#x2F;rust.yml&quot;&gt;adapted for use in vopono&lt;&#x2F;a&gt;
to generate .deb packages with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mmstick&#x2F;cargo-deb&quot;&gt;cargo-deb&lt;&#x2F;a&gt;,
.rpm packages with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;iqlusioninc&#x2F;cargo-rpm&quot;&gt;cargo-rpm&lt;&#x2F;a&gt; and the stand-alone binaries for release.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;arch-user-repository&quot;&gt;Arch User Repository&lt;&#x2F;h3&gt;
&lt;p&gt;Releasing a package on &lt;a href=&quot;https:&#x2F;&#x2F;aur.archlinux.org&#x2F;&quot;&gt;the AUR&lt;&#x2F;a&gt; is very simple. Review &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;AUR_submission_guidelines&quot;&gt;this wiki
page for submitting packages&lt;&#x2F;a&gt;,
and &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;PKGBUILD&quot;&gt;this wiki page for the PKGBUILD syntax&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;Overall it has been a longer project than I originally envisioned, but
I&#x27;m glad I chose to use Rust and add the extra features like automatic
killswitches (so traffic outside the VPN in the network namespace is
blocked) and Wireguard support.&lt;&#x2F;p&gt;
&lt;p&gt;If you are considering starting a new project in Rust, I hope the issues
covered above are useful. Finally, when
considering new projects my main advice would be to build something
that you can use yourself, and that will be useful to you. There will be
times when you hit difficult problems and have little time to spend on the
project, and it&#x27;s very helpful to be able to use the result day-to-day
to maintain motivation.&lt;&#x2F;p&gt;
&lt;p&gt;Furthermore, not all feedback will be positive. To quote one comment on
Reddit from a post for the first vopono release:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Looking at the monstrosity of the code, this looks like a bash script that someone decided to write in Rust for no apparent reason.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Fortunately, I was later able to get some useful advice on parts of the code
to improve (mainly where the design had been copied from the initial
shell scripts), despite the commenter&#x27;s hostility to Rust. If I&#x27;d
written something that I wasn&#x27;t using myself, I think this would be much harder
to handle. But since I use vopono myself every day, I know that it is
useful, and can be sure that it will be useful for others too (even if
not for that specific commenter).&lt;&#x2F;p&gt;
&lt;p&gt;I chose to call this post a retrospective instead of a post-mortem, as
vopono isn&#x27;t dead or finished. Hopefully I&#x27;ll find better solutions to
the issues mentioned above, and there are &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&#x2F;issues&#x2F;10&quot;&gt;always more VPN providers to support!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Serverless Data Ingestion with Rust and AWS SES</title>
		<published>2020-08-29T00:00:00+00:00</published>
		<updated>2020-08-29T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jamesmcm.github.io/blog/rust-ses/" type="text/html"/>
		<id>https://jamesmcm.github.io/blog/rust-ses/</id>
		<content type="html">&lt;p&gt;In this post we will set up a simple, serverless data ingestion pipeline using Rust,
AWS Lambda and AWS SES with Workmail. &lt;&#x2F;p&gt;
&lt;p&gt;We will handle multiple types of
AWS events with one Lambda function, parse received emails
with the mailparse crate, and send email with SES and the lettre crate.&lt;&#x2F;p&gt;
&lt;p&gt;The complete code for this example is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;rust_ses_example&quot;&gt;available on GitHub here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Opinions expressed are solely my own and do not express the views or opinions of my employer.&lt;&#x2F;p&gt;
&lt;p&gt;You can follow along using the AWS Free Tier, in this case all resources
are within the AWS Free Tier (at least for new users). Note the Workmail
free trial is only for 30 days (but will only cost $4 a month for one
user after that).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;process-requirements&quot;&gt;Process Requirements&lt;&#x2F;h2&gt;
&lt;p&gt;In this process we would like to send an email to a recipient, prompting
them to send us some CSV data as an attachment. When we receive that
email we need to parse the attachment, validate its contents, save the
parsed content in S3 (if we are able to parse it) and email the
recipient with either a confirmation of success, or a list of
encountered errors (either in deserialization of the attachment or
validation) and their file for reference.&lt;&#x2F;p&gt;
&lt;p&gt;Note that in &lt;a href=&quot;http:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;2020&#x2F;04&#x2F;19&#x2F;data-engineering-with-rust-and-aws-lambda&#x2F;#en&quot;&gt;a previous post&lt;&#x2F;a&gt; 
I dealt with creating a Lambda based
pipeline for parsing Excel files and loading the resulting CSV to Redshift. There are a
few differences and things to note in this process:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We will use &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;rustls&quot;&gt;rustls&lt;&#x2F;a&gt; not OpenSSL (so it is easier to statically link
with musl) - in this case, we only need to select that feature in
Rusoto.&lt;&#x2F;li&gt;
&lt;li&gt;The Rusoto API &lt;a href=&quot;https:&#x2F;&#x2F;users.rust-lang.org&#x2F;t&#x2F;rusoto-how-to-make-sync-calls&#x2F;41317&quot;&gt;no longer provides the .sync() method&lt;&#x2F;a&gt;, so we must instantiate
an async runtime to block on the Future returned.&lt;&#x2F;li&gt;
&lt;li&gt;I am still using the crates.io version of the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;lambda_runtime&quot;&gt;lambda_runtime&lt;&#x2F;a&gt;
crate (currently v0.2.1), so we do not have complete async support (the Github master branch version &lt;em&gt;does&lt;&#x2F;em&gt;
allow you to just use async functions directly!)&lt;&#x2F;li&gt;
&lt;li&gt;Here we will deal with parsing MIME-formatted emails.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Note that the reasoning for using Rust is the same - mainly that we
can deploy a statically linked binary with musl, and we can easily share Rust code
between different Lambda functions via crates with feature gates, so we can
include only what we need - helping to control binary size.&lt;&#x2F;p&gt;
&lt;p&gt;Overall, we can break this process down in to the following steps:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Parsing a received email (we will set up Workmail to save all emails
directly to an S3 bucket, and trigger our Lambda function with the S3
CreateObject event).&lt;&#x2F;li&gt;
&lt;li&gt;Deserializing and validating the attached CSV file.&lt;&#x2F;li&gt;
&lt;li&gt;Reading and writing a file to an S3 bucket.&lt;&#x2F;li&gt;
&lt;li&gt;Sending an email with an attachment (this is harder than it sounds,
since we have to use SES&#x27;s SendRawEmail API)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;&#x2F;h2&gt;
&lt;p&gt;We will follow the order of the steps above (i.e. handling the receipt
of emails first, and then sending emails). First we need to set up our
AWS resources.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;aws-resources&quot;&gt;AWS resources&lt;&#x2F;h3&gt;
&lt;p&gt;Create an AWS Workmail organisation (note this will charge $4 a month
after 30 days) in the &lt;a href=&quot;https:&#x2F;&#x2F;eu-west-1.console.aws.amazon.com&#x2F;workmail&#x2F;home&quot;&gt;Workmail console&lt;&#x2F;a&gt;. 
We only need the default user and domain. Now in the SES console in
&lt;code&gt;Email Receiving &amp;gt; Rule Sets&lt;&#x2F;code&gt;, edit the &lt;code&gt;INBOUND_MAIL&lt;&#x2F;code&gt; Rule Set, and
edit the existing rule to write to an S3 bucket (create a bucket if you
don&#x27;t have one). You can also specify specific recipients for which to
apply the rule.&lt;&#x2F;p&gt;
&lt;p&gt;Note the same effect can be achieved by setting a rule in the Workmail
organisation to &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;workmail&#x2F;latest&#x2F;adminguide&#x2F;lambda.html&quot;&gt;trigger a Lambda directly&lt;&#x2F;a&gt;, we would then need to use
the &lt;code&gt;GetRawMessageContent&lt;&#x2F;code&gt; call in the Workmail Message Flow API with the message ID in the event. Since it&#x27;s
useful to have an archive of all received emails on S3, we use the S3
trigger approach here.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mime-format&quot;&gt;MIME format&lt;&#x2F;h3&gt;
&lt;p&gt;You can now test sending an email to the domain you created (and a
specific recipient if you set the rule to be specific). You should see a
file created like the following, containing the MIME-formatted message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;MIME-Version: 1.0
&lt;&#x2F;span&gt;&lt;span&gt;From: SENDER NAME &amp;lt;SENDER_EMAIL@gmail.com&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;Date: Sat, 8 Aug 2020 22:54:58 +0200
&lt;&#x2F;span&gt;&lt;span&gt;Message-ID: &amp;lt;CAMJE-1uq35qGwMeMvryzpLXuN4htOHTDHt4kiLD-7K97XwFE7A@mail.gmail.com&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;Subject: testmail
&lt;&#x2F;span&gt;&lt;span&gt;To: test@testses.awsapps.com
&lt;&#x2F;span&gt;&lt;span&gt;Content-Type: multipart&#x2F;alternative; boundary=&amp;quot;000000000000d2fb5805ac63efb8&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;--000000000000d2fb5805ac63efb8
&lt;&#x2F;span&gt;&lt;span&gt;Content-Type: text&#x2F;plain; charset=&amp;quot;UTF-8&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;testbody
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;--000000000000d2fb5805ac63efb8
&lt;&#x2F;span&gt;&lt;span&gt;Content-Type: text&#x2F;html; charset=&amp;quot;UTF-8&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;div dir=&amp;quot;ltr&amp;quot;&amp;gt;testbody&amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;--000000000000d2fb5805ac63efb8--
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this case &lt;code&gt;testses&lt;&#x2F;code&gt; was the Workmail domain, and the email was sent
via Gmail (in practice, there are a load of DKIM headers, etc. prior to
this part - but we will not use those).&lt;&#x2F;p&gt;
&lt;p&gt;The MIME format consists of many headers (containing some of the most
relevant information such as sender address, message ID, subject and
recipient), and a body split up in to parts. Each part is terminated
with a boundary separator: &lt;code&gt;--000000000000d2fb5805ac63efb8&lt;&#x2F;code&gt; in the above case
(note this is specified where the multipart begins).&lt;&#x2F;p&gt;
&lt;p&gt;In the above case we can see the email
contains both a plaintext and HTML version. The body is
&lt;code&gt;multipart&#x2F;alternative&lt;&#x2F;code&gt; so that the client knows it should choose
between the two parts. If it were &lt;code&gt;multipart&#x2F;mixed&lt;&#x2F;code&gt; then the client
would show both parts, in this case effectively duplicating the body for
the reader. You can read about the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;MIME&quot;&gt;MIME specification&lt;&#x2F;a&gt;
in detail but we won&#x27;t need much more than this for our purposes.&lt;&#x2F;p&gt;
&lt;p&gt;The most important thing to note is that multiparts can be nested
(as different multiparts will have different boundary strings). If we
send an email with a simple plaintext attachment we see the following:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Content-Type: multipart&#x2F;mixed; boundary=&amp;quot;00000000000025ab0605ac643145&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;--00000000000025ab0605ac643145
&lt;&#x2F;span&gt;&lt;span&gt;Content-Type: multipart&#x2F;alternative; boundary=&amp;quot;00000000000025ab0305ac643143&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;--00000000000025ab0305ac643143
&lt;&#x2F;span&gt;&lt;span&gt;Content-Type: text&#x2F;plain; charset=&amp;quot;UTF-8&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;attachtest body
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;--00000000000025ab0305ac643143
&lt;&#x2F;span&gt;&lt;span&gt;Content-Type: text&#x2F;html; charset=&amp;quot;UTF-8&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;div dir=&amp;quot;ltr&amp;quot;&amp;gt;attachtest body&amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;--00000000000025ab0305ac643143--
&lt;&#x2F;span&gt;&lt;span&gt;--00000000000025ab0605ac643145
&lt;&#x2F;span&gt;&lt;span&gt;Content-Type: text&#x2F;plain; charset=&amp;quot;US-ASCII&amp;quot;; name=&amp;quot;test_attachment.txt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Content-Disposition: attachment; filename=&amp;quot;test_attachment.txt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Content-Transfer-Encoding: base64
&lt;&#x2F;span&gt;&lt;span&gt;Content-ID: &amp;lt;f_kdm5n1pg0&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;X-Attachment-Id: f_kdm5n1pg0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;cGxhaW50ZXh0Cgo=
&lt;&#x2F;span&gt;&lt;span&gt;--00000000000025ab0605ac643145--
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have the first multipart which is mixed and contains:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A nested multipart for the actual body, this is an alternative multipart so
the client chooses between showing the HTML email or the plaintext
email.&lt;&#x2F;li&gt;
&lt;li&gt;A single part which is the plaintext attachment, encoded in base64.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So the client will choose to display either the HTML or plaintext body, and always
include the attachment.&lt;&#x2F;p&gt;
&lt;p&gt;Already we can start to imagine how we could parse this. Fortunately
there are already crates to do this! In this post we will use the
&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;mailparse&quot;&gt;mailparse crate&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;reading-received-emails-with-mailparse&quot;&gt;Reading received emails with mailparse&lt;&#x2F;h3&gt;
&lt;p&gt;We use the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;mailparse&#x2F;0.13.0&#x2F;mailparse&#x2F;fn.parse_mail.html&quot;&gt;parse_mail function&lt;&#x2F;a&gt;
to parse the MIME message (from bytes) in to a usable struct, and
extract the attachment body and attachment filename for the first
attachment:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cap = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse_mail&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;file)?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; attachment = cap
&lt;&#x2F;span&gt;&lt;span&gt;        .subparts
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_content_disposition&lt;&#x2F;span&gt;&lt;span&gt;().disposition == mailparse::DispositionType::Attachment)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;No attachment&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; attachment_name = attachment
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_content_disposition&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .params
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;filename&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;No filename&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; attachment = attachment.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_body&lt;&#x2F;span&gt;&lt;span&gt;()?;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This gives us the first attachment as a &lt;code&gt;String&lt;&#x2F;code&gt;. Note if we were not dealing
with a plaintext format, i.e. we had a zipped file, etc., we would use
&lt;code&gt;get_body_raw()&lt;&#x2F;code&gt; to get a &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;&#x2F;code&gt; of bytes. This already handles
the base64 decoding for us in both cases!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;deserializing-and-validating-the-csv&quot;&gt;Deserializing and validating the CSV&lt;&#x2F;h3&gt;
&lt;p&gt;In our case we expect one attachment, which will be a CSV file. If we
have any errors reading the file we want to return these to the sender.
For this simple example, we have a CSV with three fields:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A positive ID number (i.e. &lt;code&gt;u32&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;A start date&lt;&#x2F;li&gt;
&lt;li&gt;An end date&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We will use the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;chrono&quot;&gt;chrono crate&lt;&#x2F;a&gt; to deserialize the dates,
and the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;csv&quot;&gt;csv crate&lt;&#x2F;a&gt; with &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;serde&quot;&gt;Serde&lt;&#x2F;a&gt;
to do the overall deserialization.&lt;&#x2F;p&gt;
&lt;p&gt;We set up for deserialization (and serialization for the dates for
later, so we maintain the same format) as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Deserialize, Serialize, PartialEq)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Entry {
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serde&lt;&#x2F;span&gt;&lt;span&gt;(alias = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serde&lt;&#x2F;span&gt;&lt;span&gt;(deserialize_with = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;de_datetime&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, serialize_with = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;se_datetime&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start_date&lt;&#x2F;span&gt;&lt;span&gt;: NaiveDateTime,
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serde&lt;&#x2F;span&gt;&lt;span&gt;(deserialize_with = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;de_datetime&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, serialize_with = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;se_datetime&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end_date&lt;&#x2F;span&gt;&lt;span&gt;: NaiveDateTime,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;de_datetime&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;de&lt;&#x2F;span&gt;&lt;span&gt;, D&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deserializer&lt;&#x2F;span&gt;&lt;span&gt;: D) -&amp;gt; Result&amp;lt;NaiveDateTime, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;D::&lt;&#x2F;span&gt;&lt;span&gt;Error&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    D: serde::Deserializer&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;de&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s = String::deserialize(deserializer)?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;NaiveDateTime::parse_from_str(&amp;amp;s, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;%Y-%m-%d %H:%M:%S&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(x) =&amp;gt; Ok(x),
&lt;&#x2F;span&gt;&lt;span&gt;        Err(x) =&amp;gt; Err(serde::de::Error::custom(x)),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;se_datetime&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;S&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dt&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;NaiveDateTime, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serializer&lt;&#x2F;span&gt;&lt;span&gt;: S) -&amp;gt; Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;S::&lt;&#x2F;span&gt;&lt;span&gt;Ok, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;S::&lt;&#x2F;span&gt;&lt;span&gt;Error&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    S: serde::Serializer,
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; t = dt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;%Y-%m-%d %H:%M:%S&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    serializer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect_str&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;t)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We specify the deserialization and serialization functions for the dates
so that we can specify the format to match the original input. Note the
alias attribute means we can deserialize from either &amp;quot;ID&amp;quot; or &amp;quot;id&amp;quot;, see
&lt;a href=&quot;https:&#x2F;&#x2F;serde.rs&#x2F;field-attrs.html&quot;&gt;the Serde field attributes for more details&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Then to deserialize we use:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;deserialize_csv&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attachment&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; (Vec&amp;lt;Entry&amp;gt;, Vec&amp;lt;csv::Error&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; rdr = csv::Reader::from_reader(Cursor::new(attachment.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;trim&lt;&#x2F;span&gt;&lt;span&gt;()));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; records: Vec&amp;lt;Entry&amp;gt; = Vec::with_capacity(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; de_errors: Vec&amp;lt;csv::Error&amp;gt; = Vec::new();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; result in rdr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;deserialize&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; result {
&lt;&#x2F;span&gt;&lt;span&gt;            Ok(record) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                records.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(record);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            Err(error) =&amp;gt; de_errors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(error),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    (records, de_errors)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note we put any errors in to the &lt;code&gt;de_errors&lt;&#x2F;code&gt; Vec, so if there are any,
we can later parse them to return to the sender.&lt;&#x2F;p&gt;
&lt;p&gt;We validate the records with the following functions, passing in a
reference to the &lt;code&gt;Vec&amp;lt;Entry&amp;gt;&lt;&#x2F;code&gt; from above (since we can choose our error
type here, we use &lt;code&gt;anyhow::Error&lt;&#x2F;code&gt; for simplicity):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;validate_record&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;Entry) -&amp;gt; Result&amp;lt;()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; r.start_date &amp;gt; r.end_date {
&lt;&#x2F;span&gt;&lt;span&gt;        Err(anyhow!(
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Start date after end date for entry: {}, {}, {}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            r.id,
&lt;&#x2F;span&gt;&lt;span&gt;            r.start_date,
&lt;&#x2F;span&gt;&lt;span&gt;            r.end_date
&lt;&#x2F;span&gt;&lt;span&gt;        ))
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;validate_all_records&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;records&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[Entry]) -&amp;gt; Vec&amp;lt;anyhow::Error&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    records
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;validate_record&lt;&#x2F;span&gt;&lt;span&gt;(x))
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;filter_map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can use the above Vectors of errors to generate an error email if
there are any errors present. But first we need to deal with sending an
email with SES.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sending-an-email&quot;&gt;Sending an email&lt;&#x2F;h3&gt;
&lt;p&gt;To send an email with SES, there are two options:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;ses&#x2F;latest&#x2F;APIReference&#x2F;API_SendEmail.html&quot;&gt;SendEmail&lt;&#x2F;a&gt; for sending emails without attachments. This is easy-to-use but unfortunately we need to send attachments.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;ses&#x2F;latest&#x2F;APIReference&#x2F;API_SendRawEmail.html&quot;&gt;SendRawEmail&lt;&#x2F;a&gt; for sending a raw MIME email, including attachments.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So we will use &lt;a href=&quot;https:&#x2F;&#x2F;rusoto.github.io&#x2F;rusoto&#x2F;rusoto_ses&#x2F;struct.SendRawEmailRequest.html&quot;&gt;SendRawEmailRequest&lt;&#x2F;a&gt; in Rusoto
to send MIME emails. But first of all we need to construct our MIME
email. To do this, we will use the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;lettre&quot;&gt;lettre crate&lt;&#x2F;a&gt;,
specifically the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;lettre&#x2F;0.10.0-alpha.1&#x2F;lettre&#x2F;message&#x2F;struct.MessageBuilder.html&quot;&gt;MessageBuilder&lt;&#x2F;a&gt;
in the current alpha version (note we use the 0.10 alpha in order to
use rustls).&lt;&#x2F;p&gt;
&lt;p&gt;By default SES will be in &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;ses&#x2F;latest&#x2F;DeveloperGuide&#x2F;request-production-access.html&quot;&gt;Sandbox mode&lt;&#x2F;a&gt;. This means you must
verify the email addresses that you want to send to (and from) in the
SES console.&lt;&#x2F;p&gt;
&lt;p&gt;The full code is available in 
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;rust_ses_example&#x2F;blob&#x2F;master&#x2F;src&#x2F;email.rs&quot;&gt;the Github repo&lt;&#x2F;a&gt;.
Here is an excerpt showing how to handle adding the attachment part
if necessary:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Set headers from arguments
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; email = Message::builder()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;(recipient.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;subject&lt;&#x2F;span&gt;&lt;span&gt;(subject);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Deal with text and HTML body - omitted here
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; let mpart =  ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Add attachment if present
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mpart = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(attachment) = attachment {
&lt;&#x2F;span&gt;&lt;span&gt;        mpart.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;singlepart&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            SinglePart::base64()
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;header&lt;&#x2F;span&gt;&lt;span&gt;(header::ContentType(attachment.mime.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()))
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;header&lt;&#x2F;span&gt;&lt;span&gt;(lettre::message::header::ContentDisposition {
&lt;&#x2F;span&gt;&lt;span&gt;                    disposition: DispositionType::Attachment,
&lt;&#x2F;span&gt;&lt;span&gt;                    parameters: vec![DispositionParam::Filename(
&lt;&#x2F;span&gt;&lt;span&gt;                        Charset::Us_Ascii,
&lt;&#x2F;span&gt;&lt;span&gt;                        None,
&lt;&#x2F;span&gt;&lt;span&gt;                        attachment.name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_vec&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; the bytes of the filename
&lt;&#x2F;span&gt;&lt;span&gt;                    )],
&lt;&#x2F;span&gt;&lt;span&gt;                })
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;(attachment.attachment),
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        mpart
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; email = email.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;multipart&lt;&#x2F;span&gt;&lt;span&gt;(mpart)?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; msg_string = email.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;formatted&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that we don&#x27;t need to base64 encode the attachment ourselves,
lettre will do this for us.&lt;&#x2F;p&gt;
&lt;p&gt;Then we make the request with Rusoto, note that we must base64 encode
our message in the request in the &lt;code&gt;RawMessage&lt;&#x2F;code&gt; struct! Also note that we
need to block on the Future returned from &lt;code&gt;send_raw_email()&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; raw_message = rusoto_ses::RawMessage {
&lt;&#x2F;span&gt;&lt;span&gt;        data: bytes::Bytes::from(base64::encode(msg_string)),
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; request = rusoto_ses::SendRawEmailRequest {
&lt;&#x2F;span&gt;&lt;span&gt;        configuration_set_name: None,
&lt;&#x2F;span&gt;&lt;span&gt;        destinations: None,
&lt;&#x2F;span&gt;&lt;span&gt;        from_arn: None,
&lt;&#x2F;span&gt;&lt;span&gt;        raw_message,
&lt;&#x2F;span&gt;&lt;span&gt;        return_path_arn: None,
&lt;&#x2F;span&gt;&lt;span&gt;        source: None,
&lt;&#x2F;span&gt;&lt;span&gt;        source_arn: None,
&lt;&#x2F;span&gt;&lt;span&gt;        tags: None,
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; fut = ses_client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send_raw_email&lt;&#x2F;span&gt;&lt;span&gt;(request);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; response = rt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;block_on&lt;&#x2F;span&gt;&lt;span&gt;(fut)?;
&lt;&#x2F;span&gt;&lt;span&gt;    info!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Email sent: {:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, response);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can receive and send emails, and parse and validate the CSV
attachments, we only need to put it together for the Lambda function.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;s3&quot;&gt;S3&lt;&#x2F;h3&gt;
&lt;p&gt;First we need to be able to read and write objects to S3, in order to
write the CSV we receive after validation, and read it when we send the
prompt email triggered with a Cloudwatch event.&lt;&#x2F;p&gt;
&lt;p&gt;This is simple to achieve with Rusoto, but note we need to block on the
returned futures just as in the SES case:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_file_from_s3&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bucket&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s3_client&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;S3Client,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rt&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;tokio::runtime::Runtime,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    info!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Reading bucket: {}, key: {}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, bucket, key);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s3file_fut = s3_client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_object&lt;&#x2F;span&gt;&lt;span&gt;(GetObjectRequest {
&lt;&#x2F;span&gt;&lt;span&gt;        bucket: bucket.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        key: key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        ..Default::default()
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s3file = rt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;block_on&lt;&#x2F;span&gt;&lt;span&gt;(s3file_fut)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; buffer: Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = Vec::new();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _file = s3file
&lt;&#x2F;span&gt;&lt;span&gt;        .body
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_blocking_read&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read_to_end&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; buffer)?;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(buffer)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;write_file_to_s3&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bucket&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s3_client&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;S3Client,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rt&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;tokio::runtime::Runtime,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; fut = s3_client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;put_object&lt;&#x2F;span&gt;&lt;span&gt;(PutObjectRequest {
&lt;&#x2F;span&gt;&lt;span&gt;        bucket: bucket.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        key: key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        body: Some(file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;()),
&lt;&#x2F;span&gt;&lt;span&gt;        ..Default::default()
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _response = rt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;block_on&lt;&#x2F;span&gt;&lt;span&gt;(fut)?;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can actually operate on the S3 event the Lambda function will
receive as a trigger for received emails (by extracting the S3 key from
the event and reading it).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;aws-events-and-lambda&quot;&gt;AWS events and Lambda&lt;&#x2F;h3&gt;
&lt;p&gt;We will use the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;aws_lambda_events&quot;&gt;aws_lambda_events&lt;&#x2F;a&gt;
crate for deserializing the events we receive. In this case we want to
handle two different events - the Cloudwatch event from a fixed time
trigger to send a prompt email, and the S3 event from received emails
(being written to S3 via the SES&#x2F;Workmail inbound mail rule).&lt;&#x2F;p&gt;
&lt;p&gt;We can do this by using the untagged Serde attribute and our own enum,
acting as a wrapper over the possibilities:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Serialize, Deserialize, Debug)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serde&lt;&#x2F;span&gt;&lt;span&gt;(untagged)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;EventEnum {
&lt;&#x2F;span&gt;&lt;span&gt;    S3Event(aws_lambda_events::event::s3::S3Event),
&lt;&#x2F;span&gt;&lt;span&gt;    CloudWatchEvent(aws_lambda_events::event::cloudwatch_events::CloudWatchEvent),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;See the &lt;a href=&quot;https:&#x2F;&#x2F;serde.rs&#x2F;enum-representations.html&quot;&gt;Serde enum representations docs&lt;&#x2F;a&gt;
for more details and handling other possibilities.&lt;&#x2F;p&gt;
&lt;p&gt;Then we can deserialize to &lt;code&gt;EventEnum&lt;&#x2F;code&gt; in our handler function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; builder = pretty_env_logger::formatted_timed_builder();
&lt;&#x2F;span&gt;&lt;span&gt;    builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;filter_level&lt;&#x2F;span&gt;&lt;span&gt;(log::LevelFilter::Debug);
&lt;&#x2F;span&gt;&lt;span&gt;    builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    lambda_runtime::lambda!(my_handler);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;my_handler&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;: EventEnum, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_c&lt;&#x2F;span&gt;&lt;span&gt;: lambda_runtime::Context) -&amp;gt; Result&amp;lt;(), HandlerError&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Create clients here once since we will use them in all cases
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s3_client = S3Client::new(Region::EuWest1);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ses_client = SesClient::new(Region::EuWest1);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; rt = tokio::runtime::Runtime::new().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; e {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Match on different events here...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;deployment&quot;&gt;Deployment&lt;&#x2F;h3&gt;
&lt;p&gt;Now we are ready to deploy our Lambda function. In order to use Rustls
and the Tokio&#x27;s &lt;code&gt;block_on&lt;&#x2F;code&gt; method we should set the following features in our dependencies in
&lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rusoto_core &lt;&#x2F;span&gt;&lt;span&gt;= {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.44&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;default_features &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rustls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rusoto_s3 &lt;&#x2F;span&gt;&lt;span&gt;= {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.44&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;default_features &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rustls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rusoto_ses &lt;&#x2F;span&gt;&lt;span&gt;= {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.44&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;default_features &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rustls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lettre &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.10.0-alpha.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;default_features &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rustls-tls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tokio &lt;&#x2F;span&gt;&lt;span&gt;= {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;default_features &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;blocking&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rt-threaded&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can compile with the musl target (here I assume a GNU&#x2F;Linux platform,
for OS X you &lt;a href=&quot;https:&#x2F;&#x2F;hackernoon.com&#x2F;cross-compiling-rust-on-macos-to-run-as-a-unikernel-ff1w3ypi&quot;&gt;will need to install musl-cross&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cargo build --release --target=x86_64-unknown-linux-musl
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then zip up the resulting binary, to upload it in the AWS Lambda
console:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ zip bootstrap.zip .&#x2F;target&#x2F;x86_64-unknown-linux-musl&#x2F;release&#x2F;bootstrap
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Upload this zip file to the Lambda console and add the S3 trigger for
the bucket set in the Inbound rule, then add a Cloudwatch trigger on a
schedule for sending the prompt email.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;In this post we have seen how to build a simple serverless data pipeline
in Rust, based around ingesting and sending data via email.&lt;&#x2F;p&gt;
&lt;p&gt;Note that we use &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;lambda_runtime&quot;&gt;lambda_runtime&lt;&#x2F;a&gt; v0.2.1 in the above code. Soon v0.3
will release which will allow us to use async functions directly. I
think even in v0.2.1 there is a way of passing the Tokio runtime in the
handler Context so we wouldn&#x27;t need to pass it manually, but I didn&#x27;t
investigate it much since the new changes will be stable very soon (see
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;awslabs&#x2F;aws-lambda-rust-runtime&#x2F;pull&#x2F;111&quot;&gt;this PR for example&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;We used the alpha version of the new &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;lettre&#x2F;0.10.0-alpha.1&quot;&gt;lettre&lt;&#x2F;a&gt;
release so that we could use &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;rustls&quot;&gt;rustls&lt;&#x2F;a&gt; everywhere. In the
future the new API will change and hopefully become more ergonomic like
v0.9.3.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;possible-improvements&quot;&gt;Possible Improvements&lt;&#x2F;h3&gt;
&lt;p&gt;If we were to extend this example, a simple task would be to handle zip
file attachments with the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;zip&quot;&gt;zip&lt;&#x2F;a&gt; crate. We
could also send responses as actual email replies using the &lt;code&gt;In-Reply-To&lt;&#x2F;code&gt;
and &lt;code&gt;References&lt;&#x2F;code&gt; headers, this would help to ensure the sent emails are
appropriately viewable in the recipient&#x27;s client (i.e. otherwise Gmail
might thread our new messages with older ones since they share the same
Subject).&lt;&#x2F;p&gt;
&lt;p&gt;We should also better handle the case where we receive no attachment, or
multiple attachments. This could be handled elegantly by moving the
error email sending outside of the &lt;code&gt;handle_email()&lt;&#x2F;code&gt; function and adding
custom error types for these different cases. So in the case of any
error we could send an appropriate notification email.&lt;&#x2F;p&gt;
&lt;p&gt;It would also be good to deploy the Lambda function with the &lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;cdk&#x2F;&quot;&gt;AWS Cloud
Development Kit (CDK)&lt;&#x2F;a&gt; so we can create all resources necessary, and
keep the necessary infrastructure steps with the code. Unfortunately
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;jsii&#x2F;issues&#x2F;1684&quot;&gt;jsii does not yet have Rust bindings&lt;&#x2F;a&gt; so
the actual CDK code would need to be written in a supported language
such as TypeScript.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Many thanks to all of the contributors to the crates used in this
example, and especially to the maintainers of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;awslabs&#x2F;aws-lambda-rust-runtime&quot;&gt;lambda_runtime&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rusoto&#x2F;rusoto&quot;&gt;Rusoto&lt;&#x2F;a&gt;
whose efforts have made Rust a viable choice in this space.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>An introduction to Data Oriented Design with Rust</title>
		<published>2020-07-25T00:00:00+00:00</published>
		<updated>2020-07-25T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jamesmcm.github.io/blog/intro-dod/" type="text/html"/>
		<id>https://jamesmcm.github.io/blog/intro-dod/</id>
		<content type="html">&lt;p&gt;In the post we will investigate the main concepts of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Data-oriented_design&quot;&gt;Data-oriented
Design&lt;&#x2F;a&gt; using Rust.&lt;&#x2F;p&gt;
&lt;p&gt;The source code for this example is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;data-oriented-example&quot;&gt;available on Github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;what-is-data-oriented-design&quot;&gt;What is data-oriented design?&lt;&#x2F;h2&gt;
&lt;p&gt;Data-oriented design is an approach to optimising programs by carefully
considering the memory layout of data structures, and their implications
for auto-vectorisation and use of the CPU cache. I highly recommend
watching Mike Acton&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=rX0ItVEVjHc&quot;&gt;&amp;quot;Data-Oriented Design and C++&amp;quot;&lt;&#x2F;a&gt; talk
if you haven&#x27;t seen it already.&lt;&#x2F;p&gt;
&lt;p&gt;In this post we will cover 4 cases, using &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;criterion&#x2F;0.3.3&#x2F;criterion&#x2F;&quot;&gt;criterion&lt;&#x2F;a&gt; for
benchmarking. The cases are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Struct of arrays vs. array of structs&lt;&#x2F;li&gt;
&lt;li&gt;The cost of branching inside a hot loop&lt;&#x2F;li&gt;
&lt;li&gt;Linked List vs. Vector iteration&lt;&#x2F;li&gt;
&lt;li&gt;The cost of dynamic dispatch vs. monomorphisation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;struct-of-arrays-vs-array-of-structs&quot;&gt;Struct of Arrays vs. Array of Structs&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;AoS_and_SoA&quot;&gt;Struct of Arrays vs. Array of Structs&lt;&#x2F;a&gt; 
refers to two contrasting ways of organising entity data to be operated
over.&lt;&#x2F;p&gt;
&lt;p&gt;For example, imagine we are writing a video game and we would like to
have a Player struct with the following fields:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Player {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;health&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;location&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;velocity&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;acceleration&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then at each frame, we want to update the locations and velocities of all
Players. We could write something like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run_oop&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;players&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Vec&amp;lt;Player&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; player in players.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        player.location = (
&lt;&#x2F;span&gt;&lt;span&gt;            player.location.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;+ player.velocity.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            player.location.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;+ player.velocity.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        );
&lt;&#x2F;span&gt;&lt;span&gt;        player.velocity = (
&lt;&#x2F;span&gt;&lt;span&gt;            player.velocity.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;+ player.acceleration.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            player.velocity.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;+ player.acceleration.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        );
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This would be the usual object-oriented approach to this problem. The
issue here is that in memory the structs are stored as follows (assuming
no field re-ordering i.e. &lt;code&gt;#[repr(C)]&lt;&#x2F;code&gt;), on a 64-bit architecture each field will be 64
bits (8 bytes, so each Player is 64 bytes):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;-- Vec&amp;lt;Player&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;name  (pointer to heap)  -- Player 1
&lt;&#x2F;span&gt;&lt;span&gt;health    
&lt;&#x2F;span&gt;&lt;span&gt;location0  (tuple split for clarity) 
&lt;&#x2F;span&gt;&lt;span&gt;location1
&lt;&#x2F;span&gt;&lt;span&gt;velocity0
&lt;&#x2F;span&gt;&lt;span&gt;velocity1
&lt;&#x2F;span&gt;&lt;span&gt;acceleration0
&lt;&#x2F;span&gt;&lt;span&gt;acceleration1
&lt;&#x2F;span&gt;&lt;span&gt;name  (pointer to heap)  -- Player 2
&lt;&#x2F;span&gt;&lt;span&gt;location0    
&lt;&#x2F;span&gt;&lt;span&gt;location1
&lt;&#x2F;span&gt;&lt;span&gt;velocity0
&lt;&#x2F;span&gt;&lt;span&gt;velocity1
&lt;&#x2F;span&gt;&lt;span&gt;acceleration0
&lt;&#x2F;span&gt;&lt;span&gt;acceleration1
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note the parts we want to operate on (locations, velocities and
accelerations) are not stored contiguously across different Players.
This prevents us from using vector operations to operate on multiple
players at once (since they cannot be loaded in the same CPU cache
line, usually ~64 bytes).&lt;&#x2F;p&gt;
&lt;p&gt;In contrast, the data-oriented approach is to design around this
limitation and optimise for auto-vectorisation. Instead of using a
struct per Player, we now use one struct for all Players and each Player
has their values stored at their index in the separate attribute Vectors:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;DOPlayers {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;health&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;locations&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;velocities&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;acceleration&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can do the same calculation as in the OOP case as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run_dop&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;world&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; DOPlayers) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(pos, (vel, acc)) in world
&lt;&#x2F;span&gt;&lt;span&gt;        .locations
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span&gt;(world.velocities.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span&gt;(world.acceleration.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()))
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        *pos = (pos.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;+ vel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, pos.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;+ vel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        *vel = (vel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;+ acc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, vel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;+ acc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this case the memory layout is as follows:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;-- DOPlayers
&lt;&#x2F;span&gt;&lt;span&gt;name1    -- names
&lt;&#x2F;span&gt;&lt;span&gt;name2
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;health1    -- health
&lt;&#x2F;span&gt;&lt;span&gt;health2
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;location1    -- locations
&lt;&#x2F;span&gt;&lt;span&gt;location2
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The relevant fields are now stored contiguously. Given that each
location tuple will be 16 bytes, we could now feasibly load 4 location
tuples on the same cache line to operate on them simultaneously with
SIMD instructions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;benchmark&quot;&gt;Benchmark&lt;&#x2F;h3&gt;
&lt;p&gt;Here are the results of the criterion benchmark for the above code (the
full code and benchmark code is available &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;data-oriented-example&quot;&gt;in the Github repo&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;intro-dod&#x2F;soa.svg&quot; alt=&quot;AoS vs. SoA benchmark&quot; title=&quot;AoS vs. SoA benchmark&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Overall, we see that the data-oriented approach finishes in half the
time. This would seem to be due to the data-oriented case operating on
two Players at a time - we can confirm this by reviewing the compiled
assembly.&lt;&#x2F;p&gt;
&lt;p&gt;Reviewing the &lt;a href=&quot;https:&#x2F;&#x2F;godbolt.org&#x2F;z&#x2F;d8bjMb&quot;&gt;output on Godbolt&lt;&#x2F;a&gt; we see the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;asm&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-asm &quot;&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;&#x2F;&#x2F; Relevant OOP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.LBB0_2:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;48&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;addpd   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;addpd   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;48&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;add     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;cmp     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;jne     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.LBB0_2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;&#x2F;&#x2F; Relevant DOP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.LBB1_7:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;addpd   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r9 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;addpd   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;add     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdi&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;addpd   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r9 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;addpd   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;add     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;cmp     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rsi&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;jne     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.LBB1_7
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;test    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r8&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;je      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.LBB1_5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can see in the data-oriented case, the loop is unrolled to operate on
two elements at once - resulting in the 50% speed up overall!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Addendum&lt;&#x2F;strong&gt;: As noted by &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;hxqwom&#x2F;an_introduction_to_data_oriented_design_with_rust&#x2F;fz8lxcq&#x2F;&quot;&gt;&#x2F;u&#x2F;five9a2 on Reddit&lt;&#x2F;a&gt;
the above output is specifically for the default target, which is
misleading since &lt;code&gt;cargo bench&lt;&#x2F;code&gt; uses the native target by default (i.e.
all possible features on your CPU), so our benchmarks are not using the
above assembly code.&lt;&#x2F;p&gt;
&lt;p&gt;By setting the compiler flag to &lt;code&gt;-C target-cpu=skylake-avx512&lt;&#x2F;code&gt; to enable 
Skylake features, we get the &lt;a href=&quot;https:&#x2F;&#x2F;godbolt.org&#x2F;z&#x2F;PEPdvn&quot;&gt;following output&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;asm&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-asm &quot;&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;&#x2F;&#x2F; OOP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.LBB0_2:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vmovupd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ymm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ymmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vaddpd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ymm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ymm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ymmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;48&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vmovupd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ymmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ymm0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;add     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;cmp     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;jne     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.LBB0_2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;&#x2F;&#x2F; DOP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.LBB1_19:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vmovupd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rsi &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vaddpd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vmovupd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rsi &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vmovupd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vaddpd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r10 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vmovupd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vmovupd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rsi &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vaddpd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vmovupd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rsi &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vmovupd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vaddpd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r10 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vmovupd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;add     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r11&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;add     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;add     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdi&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;jne     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.LBB1_19
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;test    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r9&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r9
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;je      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.LBB1_22
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we see the OOP loop making use of the 256-bit ymm registers for the
position tuple and velocity tuple, and another for the velocity tuple
and acceleration tuple. This is possible because they are adjacent in
memory (due to the ordering of the fields). In the DOP loop,
the 512-bit zmm register is used.&lt;&#x2F;p&gt;
&lt;p&gt;It seems the performance differences comes from the bandwidth between
cache levels, since the performance is identical for the small examples.
This can be demonstrated further by removing the extra fields from the
struct - in this case we see only a 25% performance difference (&lt;a href=&quot;https:&#x2F;&#x2F;godbolt.org&#x2F;z&#x2F;Th91Wa&quot;&gt;godbolt
link&lt;&#x2F;a&gt;), and this
corresponds to Player struct now being 384 bits (and so 1&#x2F;4 of the
512-bit read&#x2F;write is unused).&lt;&#x2F;p&gt;
&lt;p&gt;This emphasises how important it is to consider your deployment target,
and if deploying performance-sensitive code, to consider setting the
target-cpu explicitly to benefit from all of its features.&lt;&#x2F;p&gt;
&lt;p&gt;It also demonstrates how the ordering of fields can be important to
performance. By default Rust will re-order fields automatically, but you can set
&lt;code&gt;#[repr(C)]&lt;&#x2F;code&gt; to disable this (necessary for C interoperability for
example).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h3&gt;
&lt;p&gt;This example demonstrates the importance of considering memory layout
when aiming for performant code and auto-vectorisation. &lt;&#x2F;p&gt;
&lt;p&gt;Note that the same logic can also apply when working with arrays of
structs - making your struct smaller will allow you to load more
elements on the same cache line and possibly lead to autovectorisation.
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Rene-007&#x2F;flake_growth&#x2F;blob&#x2F;master&#x2F;src&#x2F;helpers.rs&quot;&gt;Here is an example&lt;&#x2F;a&gt; of
a crate (which was shared on the &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;hmqjvs&#x2F;growing_gold_with_rust&#x2F;&quot;&gt;Rust subreddit&lt;&#x2F;a&gt;) that achieved a 40% performance
improvement by doing just that.&lt;&#x2F;p&gt;
&lt;p&gt;This particular re-organisation has a direct analogue in database design. A
major difference between databases aimed at transactional (OLTP)
workloads and analytical (OLAP) workloads is that the latter tend to use
columnar-based storage. Just like the case above, this means that
operations on one column can take advantage of the contiguous storage
and use vector operations, which tends to be the main access pattern for
analytical workloads (e.g. calculate the average purchase size across all rows,
rather than updating and retrieving entire, specific rows).&lt;&#x2F;p&gt;
&lt;p&gt;In the case of analytical databases this is actually a double win, since it also
applies to the serialisation of the data to disk, where compression can
now be applied along the column (where the data is guaranteed to be of the
same type) leading to much better compression ratios.&lt;&#x2F;p&gt;
&lt;p&gt;If you are working on a problem that might benefit from the struct of
arrays approach, and want to run a quick benchmark, you might be
interested in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lumol-org&#x2F;soa-derive&quot;&gt;soa-derive&lt;&#x2F;a&gt;
crate that will allow you to derive the struct of arrays from your
struct.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;branching-in-a-hot-loop&quot;&gt;Branching in a hot loop&lt;&#x2F;h2&gt;
&lt;p&gt;Another optimisation tactic is to avoid branching in any &amp;quot;hot&amp;quot; parts of
the code (i.e. any part that will be executed many, many times).&lt;&#x2F;p&gt;
&lt;p&gt;Branching can arise in subtle ways, often by trying to use one struct for many
different cases. For example, we might define some general Node type as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;NodeType {
&lt;&#x2F;span&gt;&lt;span&gt;  Player,
&lt;&#x2F;span&gt;&lt;span&gt;  PhysicsObject,
&lt;&#x2F;span&gt;&lt;span&gt;  Script,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Node {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node_type&lt;&#x2F;span&gt;&lt;span&gt;: NodeType,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then pattern match on &lt;code&gt;node_type&lt;&#x2F;code&gt; when we need to operate on a Node.
The problem comes when we have a &lt;code&gt;Vec&amp;lt;Node&amp;gt;&lt;&#x2F;code&gt; with tens of thousands of
elements, which we might need to operate on every frame. By using
&lt;code&gt;node.node_type&lt;&#x2F;code&gt; to decide the logic to use, we need to check
that for every element (since the order of the &lt;code&gt;node_type&lt;&#x2F;code&gt;&#x27;s within the
&lt;code&gt;Vec&amp;lt;Node&amp;gt;&lt;&#x2F;code&gt; is unknown).&lt;&#x2F;p&gt;
&lt;p&gt;Not only does this comparison mean we must do an extra operation for
every element, but it also impedes auto-vectorisation, since our
relevant nodes (of the same &lt;code&gt;node_type&lt;&#x2F;code&gt;) may not be stored contiguously.&lt;&#x2F;p&gt;
&lt;p&gt;The data-oriented approach is to split these nodes up by &lt;code&gt;node_type&lt;&#x2F;code&gt;.
Ideally creating a separate struct per node type, or at least
separating them in separate Vectors before the hot loop. This means we
don&#x27;t need to check the &lt;code&gt;node_type&lt;&#x2F;code&gt; inside the hot loop, and we can take
advantage of the fact that the nodes we do operate on will be stored in
contiguous memory.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;benchmark-1&quot;&gt;Benchmark&lt;&#x2F;h3&gt;
&lt;p&gt;In this benchmark we use the following code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Copy, Clone)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Foo {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;calc_type&lt;&#x2F;span&gt;&lt;span&gt;: CalcType,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Copy, Clone)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;CalcType {
&lt;&#x2F;span&gt;&lt;span&gt;    Identity,
&lt;&#x2F;span&gt;&lt;span&gt;    Square,
&lt;&#x2F;span&gt;&lt;span&gt;    Cube,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run_mixed&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[Foo]) -&amp;gt; Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; x.calc_type {
&lt;&#x2F;span&gt;&lt;span&gt;            CalcType::Identity =&amp;gt; x.x,
&lt;&#x2F;span&gt;&lt;span&gt;            CalcType::Square =&amp;gt; x.x * x.x,
&lt;&#x2F;span&gt;&lt;span&gt;            CalcType::Cube =&amp;gt; x.x * x.x * x.x,
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run_separate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[Foo], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[Foo], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[Foo]) -&amp;gt; (Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; x = x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x.x).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; y = y.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x.x * x.x).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; z = z.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x.x * x.x * x.x).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    (x, y, z)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Comparing the case of a mixed vector of Foos, and separate vector of
Foos split by &lt;code&gt;calc_type&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The results of the benchmark are as follows:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;intro-dod&#x2F;innercheck.svg&quot; alt=&quot;Loop branch benchmark&quot; title=&quot;Loop branch benchmark&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Overall, we see that the data-oriented approach finishes in about a 
quarter of the time.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;godbolt.org&#x2F;z&#x2F;6ocTx8&quot;&gt;output on Godbolt&lt;&#x2F;a&gt; is less clear this
time, but we can see that there seems to be some unrolling in the
separate case that isn&#x27;t possible in the mixed case due to the need to
check the &lt;code&gt;calc_type&lt;&#x2F;code&gt; in that case.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;summary-1&quot;&gt;Summary&lt;&#x2F;h3&gt;
&lt;p&gt;The concept of moving any instructions you can outside of hot loops
should be familiar, but this example also demonstrates how it can impact
vectorisation. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;indirection-iteration-in-a-linked-list&quot;&gt;Indirection: Iteration in a Linked List&lt;&#x2F;h2&gt;
&lt;p&gt;In this example we will compare iterating through a (doubly) linked list
vs. a vector. This case is well-known and mentioned in &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;beta&#x2F;std&#x2F;collections&#x2F;struct.LinkedList.html&quot;&gt;Rust&#x27;s
LinkedList docs&lt;&#x2F;a&gt;,
in &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;beta&#x2F;std&#x2F;collections&#x2F;index.html#use-a-linkedlist-when&quot;&gt;Rust&#x27;s std::collections docs&lt;&#x2F;a&gt;
and in &lt;a href=&quot;https:&#x2F;&#x2F;rust-unofficial.github.io&#x2F;too-many-lists&#x2F;#an-obligatory-public-service-announcement&quot;&gt;Learn Rust With Entirely Too Many Linked Lists&#x27; Public Service Announcement&lt;&#x2F;a&gt;.
The latter Public Service Announcement covers a lot of cases where
Linked Lists are commonly used, so I recommend reading that if you
haven&#x27;t already. Nevertheless, the proof is in the pudding, so I think
it&#x27;s useful to see a benchmark directly.&lt;&#x2F;p&gt;
&lt;p&gt;A Linked List stores elements &lt;em&gt;indirectly&lt;&#x2F;em&gt;, that is, it stores an
element and a pointer to the next element. This means that consecutive
elements in the linked list are &lt;em&gt;not&lt;&#x2F;em&gt; stored in consecutive memory
locations.&lt;&#x2F;p&gt;
&lt;p&gt;This leads to two issues that impede vectorisation:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The elements of the linked list may be stored arbitrarily far apart, so
we cannot just load a block of memory to the CPU cache to operate on
them simultaneously.&lt;&#x2F;li&gt;
&lt;li&gt;We have to dereference a pointer to get the next element in the list.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For example, we might store a vector of i32s on the heap as follows
(holding a pointer to the start of the vector, the vector capacity and
the vector length, on the stack):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;0x00 1
&lt;&#x2F;span&gt;&lt;span&gt;0x01 2
&lt;&#x2F;span&gt;&lt;span&gt;0x02 3
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The values are stored contiguously, whereas for a (singly) linked list, we could
have the following case.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;0x00 1
&lt;&#x2F;span&gt;&lt;span&gt;0x01 0x14
&lt;&#x2F;span&gt;&lt;span&gt;0x0C 3
&lt;&#x2F;span&gt;&lt;span&gt;0x0D 0
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;0x14 2
&lt;&#x2F;span&gt;&lt;span&gt;0x15 0x0C
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here the values are not stored in contiguous memory (or even necessarily
in the same order as their pointers maintain in the list).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;benchmark-2&quot;&gt;Benchmark&lt;&#x2F;h3&gt;
&lt;p&gt;In this case the benchmark is very simple, simply squaring all of the
elements of a linked list and a vector:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run_list&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;LinkedList&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;        *x = *x * *x;
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run_vec&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;        *x = *x * *x;
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The results are as follows:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;intro-dod&#x2F;linkedlist.svg&quot; alt=&quot;LinkedList benchmark&quot; title=&quot;LinkedList benchmark&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Overall, we see that the data-oriented approach finishes in about a
tenth of the time.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;godbolt.org&#x2F;z&#x2F;EzznM1&quot;&gt;output on Godbolt&lt;&#x2F;a&gt; shows the
unrolling in the Vec case that isn&#x27;t possible in the LinkedList case.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary-2&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;This case is well-known and demonstrates the biggest difference of all
of the benchmarks. Note that here we look only at iteration, and not at
other operations which could be considered to somewhat favour Linked
Lists such as insertion, where it avoids the (amortised) cost of vector
resizing, however as argued in &lt;a href=&quot;https:&#x2F;&#x2F;rust-unofficial.github.io&#x2F;too-many-lists&#x2F;#i-cant-afford-amortization&quot;&gt;Learn Rust With Entirely Too Many Linked
Lists&lt;&#x2F;a&gt;
this can be avoided in Vectors too.&lt;&#x2F;p&gt;
&lt;p&gt;Hopefully this will become common knowledge and we&#x27;ll see fewer
interview questions and practice problems based around linked lists and
indirection, considering only Big O complexity and not real world
performance.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;indirection-dynamic-dispatch-vs-monomorphisation&quot;&gt;Indirection: Dynamic Dispatch vs. Monomorphisation&lt;&#x2F;h2&gt;
&lt;p&gt;When writing generic functions (i.e. for any types implementing certain
Traits), we have the choice between &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch17-02-trait-objects.html&quot;&gt;dynamic dispatch&lt;&#x2F;a&gt;
and monomorphisation. &lt;&#x2F;p&gt;
&lt;p&gt;Dynamic dispatch allows us to work with a mixed
collection of trait objects, i.e. we can have a &lt;code&gt;Vec&amp;lt;Box&amp;lt;dyn MyTrait&amp;gt;&amp;gt;&lt;&#x2F;code&gt;
which can contain references to different types which all implement
MyTrait. The trait object contains a pointer to the instance of the
struct itself (implementing MyTrait) and a pointer to the struct&#x27;s virtual method table
(or vtable, a lookup table pointing to the implementation of each method
of MyTrait). Then when we call a method on one of these trait objects, at
runtime we work out which implementation of the method to use by
consulting the vtable.&lt;&#x2F;p&gt;
&lt;p&gt;Note that this implies indirection. Our vector has to be of pointers to
the struct instances themselves (since the different structs implementing
MyTrait can differ in size and fields), and we must also
dereference the pointer in the vtable to find out
which implementation to call.&lt;&#x2F;p&gt;
&lt;p&gt;Monomorphisation, on the other hand, creates a separate implementation
of the generic function for each possible type. For example, the
following code would actually create two separate functions for
&lt;code&gt;run_vecs_square()&lt;&#x2F;code&gt; for the &lt;code&gt;Foo&lt;&#x2F;code&gt; and &lt;code&gt;Bar&lt;&#x2F;code&gt; types respectively:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Foo {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Bar {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;MyTrait {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;square_id&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;MyTrait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Foo {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;square_id&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.id = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.id * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.id;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;MyTrait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Bar {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;square_id&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.id = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.id * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.id * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.id;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run_vecs_square&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: MyTrait&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Vec&amp;lt;T&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;square_id&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This increases the binary size, but gives us an easy way of generating
multiple implementations of a function for different types and allows us
to avoid indirection (i.e. note we can use &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; and don&#x27;t need to
use &lt;code&gt;Vec&amp;lt;Box&amp;lt;T&amp;gt;&amp;gt;&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Whereas in the following code, we use dynamic dispatch. There is only
one implementation of &lt;code&gt;run_dyn_square&lt;&#x2F;code&gt; but exactly which implementation
of &lt;code&gt;square_id()&lt;&#x2F;code&gt; it should call is determined at runtime by consulting
the trait object&#x27;s vtable.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run_dyn_square&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Vec&amp;lt;Box&amp;lt;dyn MyTrait&amp;gt;&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;square_id&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This can be more convenient, as we can create the vector containing
references to different types with no worry about what the actual types
are (only that they implement MyTrait), and we don&#x27;t inflate the binary
size. However, we are forced to use indirection, since the underlying
types could have different sizes, and as we saw with the LinkedList
example this can have significant implications for auto-vectorisation.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;benchmark-3&quot;&gt;Benchmark&lt;&#x2F;h3&gt;
&lt;p&gt;Using the example above, the benchmark results are as follows:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;intro-dod&#x2F;dyntrait.svg&quot; alt=&quot;Dynamic Dispatch benchmark&quot; title=&quot;Dynamic Dispatch benchmark&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Overall, we see that the monomorphised example finishes in about a
quarter of the time of the dynamic dispatch one. The monomorphised case
with indirection (&lt;code&gt;Vec&amp;lt;Box&amp;lt;T&amp;gt;&amp;gt;&lt;&#x2F;code&gt;) is only slightly faster than the
dynamic dispatch case which implies that most of the performance gap is
due to the added indirection impeding vectorisation, whereas the vtable lookup
itself only adds a small constant overhead.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, in this case &lt;a href=&quot;https:&#x2F;&#x2F;godbolt.org&#x2F;z&#x2F;46WYaP&quot;&gt;Godbolt&lt;&#x2F;a&gt;
doesn&#x27;t include the target functions in the generated output.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;summary-3&quot;&gt;Summary&lt;&#x2F;h3&gt;
&lt;p&gt;This benchmark showed that the main cost of dynamic dispatch is in
impeding vectorisation due to the necessary introduction of indirection,
and that the cost of the lookup in the vtable itself was relatively
small.&lt;&#x2F;p&gt;
&lt;p&gt;This means that you should definitely consider designing for
monomorphisation if your methods are doing operations that would greatly
benefit from vectorisation (such as the mathematical operations above).
On the other hand, if they are carrying out operations that are not
vectorised (for example, constructing Strings) then dynamic dispatch may
have a negligible cost overall.&lt;&#x2F;p&gt;
&lt;p&gt;As always, benchmark your specific use cases and access patterns when
comparing different possible implementations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;In this article we have seen four cases where considering data layout in
memory, and the realities and limitations of the CPU cache has lead to
significant performance improvements.&lt;&#x2F;p&gt;
&lt;p&gt;This only scratches the surface of data-oriented design and optimisation. For example,
&lt;a href=&quot;http:&#x2F;&#x2F;www.catb.org&#x2F;esr&#x2F;structure-packing&#x2F;&quot;&gt;structure packing&lt;&#x2F;a&gt;, padding
and alignment was not covered. The &lt;a href=&quot;https:&#x2F;&#x2F;www.dataorienteddesign.com&#x2F;dodbook&#x2F;&quot;&gt;data-oriented design book&lt;&#x2F;a&gt; by
Richard Fabian also covers some additional topics.&lt;&#x2F;p&gt;
&lt;p&gt;It is important to note that in all of our examples, we did not modify
the algorithms we used. All implementations for each case have the same
Big O complexity, and yet in practice the performance can vary greatly,
with speedups from 2x-10x available just by optimising for
vectorisation and other features of modern CPUs.&lt;&#x2F;p&gt;
&lt;p&gt;In summary:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Favour data structures with less&#x2F;no indirection and contiguous memory
(you&#x27;ll also have an easier time with the borrow checker!).&lt;&#x2F;li&gt;
&lt;li&gt;Avoid branching inside loops.&lt;&#x2F;li&gt;
&lt;li&gt;Benchmark your use cases and access patterns.&lt;&#x2F;li&gt;
&lt;li&gt;If deploying performance sensitive code, consider targeting the CPU
features of your destination machine (i.e. &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;packed_simd&#x2F;perf-guide&#x2F;target-feature&#x2F;rustflags.html&quot;&gt;use RUSTFLAGS&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bheisler&#x2F;criterion.rs&quot;&gt;Criterion&lt;&#x2F;a&gt; is a great benchmarking tool.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gnzlbg&#x2F;cargo-asm&quot;&gt;cargo-asm&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;godbolt.org&#x2F;&quot;&gt;Godbolt&lt;&#x2F;a&gt; can be used to inspect the generated assembly (and
LLVM intermediate representation).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;packed_simd&#x2F;perf-guide&#x2F;prof&#x2F;linux.html&quot;&gt;perf&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;flamegraph-rs&#x2F;flamegraph&quot;&gt;flamegraph&lt;&#x2F;a&gt; can be used for performance profiling.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>A practical introduction to async programming in Rust</title>
		<published>2020-05-06T00:00:00+00:00</published>
		<updated>2020-05-06T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jamesmcm.github.io/blog/a-practical-introduction-to-async-programming-in-rust/" type="text/html"/>
		<id>https://jamesmcm.github.io/blog/a-practical-introduction-to-async-programming-in-rust/</id>
		<content type="html">&lt;p&gt;In this post we will explore a brief example of asynchronous programming
in Rust with the Tokio runtime, demonstrating different execution scenarios. This post is aimed
at beginners to asynchronous programming.&lt;&#x2F;p&gt;
&lt;p&gt;The source code for this example is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;async-rust-example&quot;&gt;available on Github&lt;&#x2F;a&gt;.
A &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;async-rust-example&#x2F;tree&#x2F;async-std&quot;&gt;branch&lt;&#x2F;a&gt; using the async-std runtime is also available (contributed by
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BartMassey&quot;&gt;@BartMassey&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;what-is-asynchronous-programming&quot;&gt;What is asynchronous programming?&lt;&#x2F;h2&gt;
&lt;p&gt;Asynchronous programming allows you to continue carrying out computations
whilst waiting for results from IO operations
(often network requests or responses), even on a single OS thread.&lt;&#x2F;p&gt;
&lt;p&gt;This is achieved via the use of an async runtime which handles the
assignment of async tasks (i.e. &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Green_threads&quot;&gt;green threads&lt;&#x2F;a&gt;)
to actual OS threads.&lt;&#x2F;p&gt;
&lt;p&gt;Unlike OS threads, green threads are not expensive to create and so we
needn&#x27;t worry about hitting a hard limit. Whereas OS threads need to
hold their own stack, leading to high memory usage when dealing with
many threads. On Linux you can check your thread limit per process
with: &lt;code&gt;cat &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;threads-max&lt;&#x2F;code&gt;, mine is 127,162.&lt;&#x2F;p&gt;
&lt;p&gt;This is a significant issue if we need a separate OS
thread to handle each request on a web server for example, and is the
origin of the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;C10k_problem&quot;&gt;C10k problem&lt;&#x2F;a&gt;
- how to handle 10,000 concurrent connections to a web server. &lt;&#x2F;p&gt;
&lt;p&gt;Early web servers did indeed use a separate OS thread per request, in order to
handle requests in parallel. The key insight is that those threads spend
most of their time waiting for network responses, rather than doing any
computation.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;async-and-await&quot;&gt;Async and await&lt;&#x2F;h3&gt;
&lt;p&gt;Rust has adopted the
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Async&#x2F;await&quot;&gt;async&#x2F;await&lt;&#x2F;a&gt; syntax for
defining asynchronous code blocks and functions.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;async&lt;&#x2F;code&gt; keyword defines an async code block or function. Specifying
that it will return a &lt;code&gt;Future&lt;&#x2F;code&gt;, a value that will need to be &lt;code&gt;.await&lt;&#x2F;code&gt;ed
elsewhere in order to trigger the execution of the task (note the lazy
execution) and wait for the return value to be available.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;.await&lt;&#x2F;code&gt; keyword (which must be inside an &lt;code&gt;async&lt;&#x2F;code&gt; block&#x2F;function)
is used to wait asynchronously for an async task to finish, and get the return value.
Note that while the task itself cannot progress until the &lt;code&gt;Future&lt;&#x2F;code&gt; is ready,
the actual OS thread can have other tasks assigned to it by the runtime,
and so continue to do work. &lt;&#x2F;p&gt;
&lt;p&gt;Effectively the task is informing the
runtime that at this point it may yield the execution to another task
(eventually, that other task will also &lt;code&gt;await&lt;&#x2F;code&gt; something, and if the
Future in this task is ready, execution of this task may continue) -
this is an implementation of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cooperative_multitasking&quot;&gt;co-operative multitasking&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This syntax is very elegant, and allows us to write asynchronous
programs that maintain a structure similar to simple, synchronous
programs.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;when-should-i-use-async&quot;&gt;When should I use async?&lt;&#x2F;h2&gt;
&lt;p&gt;Asynchronous programming is useful when the thread would otherwise just be 
waiting on IO operations - for example when making network requests or
responses, reading or writing to disk, or waiting for user input.&lt;&#x2F;p&gt;
&lt;p&gt;It is not useful if you are always doing computations and there is no
waiting on IO operations, even if those computations could run in
parallel - for example in a ray tracer. In this case it would be best to
parallelise the computations over OS threads directly (taking advantage
of the multiple cores in your CPU), for example using parallel iterators in the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;rayon&quot;&gt;rayon&lt;&#x2F;a&gt;
crate (or if you want thread-level control, then with the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;crossbeam&quot;&gt;crossbeam&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;threadpool&quot;&gt;threadpool&lt;&#x2F;a&gt; crates). 
However, remember &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Amdahl%27s_law&quot;&gt;Amdahl&#x27;s Law&lt;&#x2F;a&gt; and consider that
algorithmic improvements might yield a better return than focusing on 
parallelisation in this cases.&lt;&#x2F;p&gt;
&lt;p&gt;It is also not useful if there are no other tasks to do whilst waiting 
for the IO operations. For example in the &lt;a href=&quot;&#x2F;blog&#x2F;2020&#x2F;04&#x2F;19&#x2F;data-engineering-with-rust-and-aws-lambda&#x2F;#en&quot;&gt;previous blog post&lt;&#x2F;a&gt;, Rusoto
actually returns a &lt;code&gt;RusotoFuture&lt;&#x2F;code&gt; object when we request the DB
credentials from AWS Secrets Manager, however in this case one
invocation of our Lambda function corresponds to one request - there is
no work to be done whilst waiting for the DB credentials to arrive. So
we can just program synchronously (fortunately &lt;code&gt;RusotoFuture&lt;&#x2F;code&gt; provides the
&lt;code&gt;.sync()&lt;&#x2F;code&gt; method to do exactly that).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;example&quot;&gt;Example&lt;&#x2F;h2&gt;
&lt;p&gt;In this example we will simulate three very slow network requests,
consisting of three stages:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Connection - an asynchronous delay of 2 seconds&lt;&#x2F;li&gt;
&lt;li&gt;Waiting for a response - an asynchronous delay of 8 seconds (the delay
is on the server side)&lt;&#x2F;li&gt;
&lt;li&gt;Computation - a synchronous delay of 4 seconds (i.e. it has to block
the current OS thread to do the computation).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We will use &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.2.20&#x2F;tokio&#x2F;&quot;&gt;Tokio&lt;&#x2F;a&gt; as our async
runtime for this example, as it is currently the most popular.
The other main alternative is the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;async-std&#x2F;1.5.0&#x2F;async_std&#x2F;&quot;&gt;async_std&lt;&#x2F;a&gt; runtime
- code for using this runtime is available in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;async-rust-example&#x2F;tree&#x2F;async-std&quot;&gt;async-std branch of the Github repo&lt;&#x2F;a&gt; (this code
was contributed by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;BartMassey&quot;&gt;@BartMassey&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Note that both use the common &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;futures&#x2F;0.3.4&#x2F;futures&#x2F;&quot;&gt;futures&lt;&#x2F;a&gt; crate 
so you can swap the async runtime whilst keeping mostly the same API.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;server&quot;&gt;Server&lt;&#x2F;h3&gt;
&lt;p&gt;The server used in this example is adapted from the &lt;a href=&quot;https:&#x2F;&#x2F;tokio.rs&#x2F;docs&#x2F;getting-started&#x2F;echo&#x2F;&quot;&gt;Tokio tutorial&lt;&#x2F;a&gt;.
It echoes back the bytes received, after a delay of 8 seconds.&lt;&#x2F;p&gt;
&lt;p&gt;The full adapted code is as follows (and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;async-rust-example&quot;&gt;available in the source code
for this post&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;futures::stream::StreamExt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tokio::net::TcpListener;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; addr = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;127.0.0.1:6142&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; listener = TcpListener::bind(addr).await.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; server = {
&lt;&#x2F;span&gt;&lt;span&gt;        async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; incoming = listener.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;incoming&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while let &lt;&#x2F;span&gt;&lt;span&gt;Some(conn) = incoming.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;().await {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; conn {
&lt;&#x2F;span&gt;&lt;span&gt;                    Err(e) =&amp;gt; eprintln!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;accept failed = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, e),
&lt;&#x2F;span&gt;&lt;span&gt;                    Ok(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; sock) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                        tokio::spawn(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; reader, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; writer) = sock.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;                            tokio::time::delay_for(tokio::time::Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;)).await;
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;tokio::io::copy(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; reader, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; writer).await {
&lt;&#x2F;span&gt;&lt;span&gt;                                Ok(amt) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                                    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wrote &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; bytes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, amt);
&lt;&#x2F;span&gt;&lt;span&gt;                                }
&lt;&#x2F;span&gt;&lt;span&gt;                                Err(err) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                                    eprintln!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;IO error &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, err);
&lt;&#x2F;span&gt;&lt;span&gt;                                }
&lt;&#x2F;span&gt;&lt;span&gt;                            }
&lt;&#x2F;span&gt;&lt;span&gt;                        });
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Server running on localhost:6142&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    server.await;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;synchronous-requests&quot;&gt;Synchronous requests&lt;&#x2F;h3&gt;
&lt;p&gt;In the synchronous case, we simply run each request in series, one after
another. Therefore we would expect a total execution time of &lt;code&gt;3*(2+8+4) = 42&lt;&#x2F;code&gt; seconds to finish all 3 tasks.&lt;&#x2F;p&gt;
&lt;p&gt;We can visualise this case with a diagram:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;a-practical-introduction-to-async-programming-in-rust&#x2F;synchronous.svg&quot; alt=&quot;Synchronous execution&quot; title=&quot;Synchronous execution&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We can implement this using only the standard library:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::io::prelude::*;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::net::TcpStream;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::thread::sleep;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::time::Instant;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; now = Instant::now();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;task1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;())?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;task2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;())?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;task3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;())?;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;: std::time::Instant) -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Simulate network delay using thread sleep for 2 seconds
&lt;&#x2F;span&gt;&lt;span&gt;    println!(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;OS Thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; started: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        std::thread::current().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        label,
&lt;&#x2F;span&gt;&lt;span&gt;        now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;elapsed&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(std::time::Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Write to server - server will echo this back to us with 8 second delay
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; stream = TcpStream::connect(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;127.0.0.1:6142&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)?;
&lt;&#x2F;span&gt;&lt;span&gt;    stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span&gt;(label.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;())?;
&lt;&#x2F;span&gt;&lt;span&gt;    println!(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;OS Thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; written: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        std::thread::current().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        label,
&lt;&#x2F;span&gt;&lt;span&gt;        now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;elapsed&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Read 5 chars we expect (to avoid dealing with EOF, etc.)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; buffer = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read_exact&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; buffer)?;
&lt;&#x2F;span&gt;&lt;span&gt;    stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;shutdown&lt;&#x2F;span&gt;&lt;span&gt;(std::net::Shutdown::Both)?;
&lt;&#x2F;span&gt;&lt;span&gt;    println!(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;OS Thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; read: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        std::thread::current().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        label,
&lt;&#x2F;span&gt;&lt;span&gt;        now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;elapsed&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Simulate computation work by sleeping actual thread for 4 seconds
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(std::time::Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    println!(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;OS Thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; finished: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        std::thread::current().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        std::str::from_utf8(&amp;amp;buffer)?,
&lt;&#x2F;span&gt;&lt;span&gt;        now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;elapsed&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running this (see &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;async-rust-example&quot;&gt;the repo for this workspace&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cargo run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --release --bin&lt;&#x2F;span&gt;&lt;span&gt; server
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cargo run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --release --bin&lt;&#x2F;span&gt;&lt;span&gt; client_synchronous
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;OS Thread ThreadId(1) - task1 started: 578ns
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task1 written: 2.000346788s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task1 read: 10.002177173s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task1 finished: 14.002328699s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task2 started: 14.002387112s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task2 written: 16.002673602s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task2 read: 24.006071003s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task2 finished: 28.006204147s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task3 started: 28.006263855s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task3 written: 30.00652763s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task3 read: 38.008234993s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task3 finished: 42.008389223s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Gives exactly the 42 seconds total execution time that we calculated above.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;synchronous-requests-tokio&quot;&gt;Synchronous requests (Tokio)&lt;&#x2F;h3&gt;
&lt;p&gt;Note that it is possible to get synchronous behaviour from async
functions when using Tokio (sometimes unintentionally). Implementing the
above with Tokio:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;futures::stream::StreamExt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::error::Error;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::thread::sleep;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::time::Instant;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tokio::join;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tokio::net::TcpStream;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tokio::prelude::*;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn Error + Send + Sync&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; now = Instant::now();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Synchronous
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;task1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;()).await?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;task2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;()).await?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;task3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;()).await?;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;now&lt;&#x2F;span&gt;&lt;span&gt;: std::time::Instant) -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn Error + Send + Sync&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Simulate network delay using Tokio async delay for 2 seconds
&lt;&#x2F;span&gt;&lt;span&gt;    println!(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;OS Thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; started: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        std::thread::current().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        label,
&lt;&#x2F;span&gt;&lt;span&gt;        now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;elapsed&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;    tokio::time::delay_for(tokio::time::Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)).await;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Write to server - server will echo this back to us with 8 second delay
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; stream = TcpStream::connect(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;127.0.0.1:6142&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).await?;
&lt;&#x2F;span&gt;&lt;span&gt;    stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span&gt;(label.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;()).await?;
&lt;&#x2F;span&gt;&lt;span&gt;    println!(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;OS Thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; written: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        std::thread::current().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        label,
&lt;&#x2F;span&gt;&lt;span&gt;        now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;elapsed&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Read 5 chars we expect (to avoid dealing with EOF, etc.)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; buffer = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read_exact&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; buffer).await?;
&lt;&#x2F;span&gt;&lt;span&gt;    stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;shutdown&lt;&#x2F;span&gt;&lt;span&gt;(std::net::Shutdown::Both)?;
&lt;&#x2F;span&gt;&lt;span&gt;    println!(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;OS Thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; read: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        std::thread::current().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        label,
&lt;&#x2F;span&gt;&lt;span&gt;        now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;elapsed&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Simulate computation work by sleeping actual thread for 4 seconds
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span&gt;(std::time::Duration::from_secs(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;    println!(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;OS Thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; finished: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        std::thread::current().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        std::str::from_utf8(&amp;amp;buffer)?,
&lt;&#x2F;span&gt;&lt;span&gt;        now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;elapsed&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running this produces the same output as before:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cargo run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --release --bin&lt;&#x2F;span&gt;&lt;span&gt; client_async
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;OS Thread ThreadId(1) - task1 started: 333ns
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task1 written: 2.001476012s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task1 read: 10.003284491s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task1 finished: 14.003404307s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task2 started: 14.003476979s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task2 written: 16.005013941s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task2 read: 24.005471439s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task2 finished: 28.005575307s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task3 started: 28.005615372s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task3 written: 30.007082377s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task3 read: 38.009223127s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task3 finished: 42.009349576s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It is the &lt;code&gt;.await&lt;&#x2F;code&gt;ing of the tasks in series which causes this to be
synchronous. The main function is async, but the use of &lt;code&gt;.await&lt;&#x2F;code&gt; causes
it to wait for the result of that Future before continuing. There is
nothing special about the main function compared to other async
functions in this regard. No other tasks exist at
that time to yield execution to, causing the execution to be
synchronous in practice.&lt;&#x2F;p&gt;
&lt;p&gt;Note the Send + Sync bounds are not required for the above
implementation (since it runs on only one OS thread),
but we will need them in the last example. This is also why we clone
&lt;code&gt;now&lt;&#x2F;code&gt; instead of borrowing it in &lt;code&gt;task()&lt;&#x2F;code&gt; (alternatively we could wrap
it in an &lt;code&gt;Arc&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;We will use the same &lt;code&gt;async fn task()&lt;&#x2F;code&gt; definition for the following
examples, where it will be omitted.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;asynchronous-requests-one-os-thread&quot;&gt;Asynchronous requests (one OS thread)&lt;&#x2F;h3&gt;
&lt;p&gt;In the asynchronous, single OS thread case we start the waiting
steps (connection and getting the server response) concurrently.
However, the final computation step will still need to be done in series
for each task. Therefore we expect a total execution time of
&lt;code&gt;8+2+(3*4)=22&lt;&#x2F;code&gt; seconds.&lt;&#x2F;p&gt;
&lt;p&gt;In a diagram:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;a-practical-introduction-to-async-programming-in-rust&#x2F;asynchronous_single.svg&quot; alt=&quot;Asynchronous execution on a single OS thread&quot; title=&quot;Asynchronous execution on a single OS thread&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Using the same definition of &lt;code&gt;async fn task()&lt;&#x2F;code&gt; as before:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;futures::stream::futures_unordered::FuturesUnordered;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;futures::stream::StreamExt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::error::Error;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::thread::sleep;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::time::Instant;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tokio::net::TcpStream;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;tokio::prelude::*;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn Error + Send + Sync&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; now = Instant::now();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Asynchronous single-thread
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; futs = FuturesUnordered::new();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    futs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;task1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;()));
&lt;&#x2F;span&gt;&lt;span&gt;    futs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;task2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;()));
&lt;&#x2F;span&gt;&lt;span&gt;    futs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;task3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;()));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while let &lt;&#x2F;span&gt;&lt;span&gt;Some(_handled) = futs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;().await {}
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running this gives our expected total execution time of 22 seconds:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;OS Thread ThreadId(1) - task1 started: 3.994µs
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task2 started: 21.174µs
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task3 started: 25.511µs
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task3 written: 2.002221984s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task2 written: 2.002406898s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task1 written: 2.002483563s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task3 read: 10.003326999s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task3 finished: 14.003478669s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task2 read: 14.00365763s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task2 finished: 18.00379238s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task1 read: 18.003951713s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(1) - task1 finished: 22.004094444s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this case we use a &lt;code&gt;FuturesUnordered&lt;&#x2F;code&gt; collection to allow us to
repeatedly await the different Futures. However, we never use
&lt;code&gt;tokio::spawn()&lt;&#x2F;code&gt; so it is only running on the single OS thread
(as we never allow the creation of more).&lt;&#x2F;p&gt;
&lt;p&gt;Note that we could use the &lt;code&gt;join!&lt;&#x2F;code&gt; macro here instead of allocating a
&lt;code&gt;FuturesUnordered&lt;&#x2F;code&gt;, we will see an example of this later. However, that
is only practical for a small number of Futures.&lt;&#x2F;p&gt;
&lt;p&gt;We can also force Tokio to only use one thread by putting arguments in
the attribute for our main function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(core_threads = 1, max_threads = 1)]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn Error + Send + Sync&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;asynchronous-requests-multiple-os-threads&quot;&gt;Asynchronous requests (multiple OS threads)&lt;&#x2F;h3&gt;
&lt;p&gt;In the case of asynchronous requests across multiple OS threads, we can
do every step concurrently (and the OS threads could complete other tasks
when the tasks await). This means that we can do the final computation step in
parallel on different OS threads.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;a-practical-introduction-to-async-programming-in-rust&#x2F;asynchronous_multi.svg&quot; alt=&quot;Asynchronous execution on multiple OS threads&quot; title=&quot;Asynchronous execution on multiple OS threads&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Therefore we would expect a total execution time of &lt;code&gt;2+8+4=14&lt;&#x2F;code&gt; seconds
for all 3 requests. This is the best we can achieve - the same time as
completing a single request.&lt;&#x2F;p&gt;
&lt;p&gt;Note that this requires the types we send across threads to be
thread-safe, i.e. implementing Send or Sync - just as we would if we were
using OS threads directly.&lt;&#x2F;p&gt;
&lt;p&gt;The implementation is very similar to the previous example, but instead
of awaiting on the futures directly, we &lt;code&gt;tokio::spawn&lt;&#x2F;code&gt; the tasks and
await their handles. This allows Tokio to execute them on different OS
threads.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn Error + Send + Sync&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; now = Instant::now();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; futs = FuturesUnordered::new();
&lt;&#x2F;span&gt;&lt;span&gt;    futs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(tokio::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;task1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;())));
&lt;&#x2F;span&gt;&lt;span&gt;    futs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(tokio::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;task2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;())));
&lt;&#x2F;span&gt;&lt;span&gt;    futs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(tokio::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;task3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;())));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while let &lt;&#x2F;span&gt;&lt;span&gt;Some(_handled) = futs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;().await {}
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And we observe the 14 second execution time (note we don&#x27;t care about
the order of execution):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;OS Thread ThreadId(2) - task1 started: 17.055µs
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(3) - task2 started: 30.227µs
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(2) - task3 started: 32.513µs
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(2) - task3 written: 2.001499145s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(3) - task1 written: 2.00153689s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(5) - task2 written: 2.001721878s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(3) - task3 read: 10.003403756s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(2) - task1 read: 10.003501s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(5) - task2 read: 10.003417328s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(3) - task3 finished: 14.003584085s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(2) - task1 finished: 14.003664981s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(5) - task2 finished: 14.003698375s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The different OS Thread IDs demonstrate that the tasks are being
executed on separate OS threads.&lt;&#x2F;p&gt;
&lt;p&gt;For completeness, here is the same implementation using the &lt;code&gt;join!&lt;&#x2F;code&gt;
macro instead of allocating a &lt;code&gt;FuturesUnordered&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn Error + Send + Sync&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; now = Instant::now();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Asynchronous multi-threaded
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;join!(
&lt;&#x2F;span&gt;&lt;span&gt;        tokio::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;task1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;())),
&lt;&#x2F;span&gt;&lt;span&gt;        tokio::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;task2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;())),
&lt;&#x2F;span&gt;&lt;span&gt;        tokio::spawn(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;task3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;()))
&lt;&#x2F;span&gt;&lt;span&gt;    ) {
&lt;&#x2F;span&gt;&lt;span&gt;        (x, y, z) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            (x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span&gt;(), y.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span&gt;(), z.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This saves the allocation of the &lt;code&gt;FuturesUnordered&lt;&#x2F;code&gt; but it can be
awkward to work with the tuple of Results that is returned (especially
for many Futures).&lt;&#x2F;p&gt;
&lt;h4 id=&quot;how-does-this-differ-from-os-thread-parallelisation&quot;&gt;How does this differ from OS thread parallelisation?&lt;&#x2F;h4&gt;
&lt;p&gt;You could implement something similar for the synchronous case using OS threads directly, for
example with the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;rayon&quot;&gt;rayon&lt;&#x2F;a&gt; crate mentioned previously.&lt;&#x2F;p&gt;
&lt;p&gt;However, in this case each request would need its own OS thread, and if
we had to carry out 10,000 concurrent requests, we might hit the thread
limit. &lt;&#x2F;p&gt;
&lt;p&gt;That is, the execution diagram would look like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;a-practical-introduction-to-async-programming-in-rust&#x2F;synchronous_multios.svg&quot; alt=&quot;Synchronous execution on multiple OS threads&quot; title=&quot;Synchronous execution on multiple OS threads&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Note that the OS threads would spend a lot of time just waiting on IO operations,
unable to start other requests.&lt;&#x2F;p&gt;
&lt;p&gt;We can modify our first synchronous example above to do this with rayon:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rayon::prelude::*;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error + Send + Sync&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; now = Instant::now();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;task1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;task2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;task3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;par_iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;task&lt;&#x2F;span&gt;&lt;span&gt;(x, now.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;()))
&lt;&#x2F;span&gt;&lt;span&gt;        .collect::&amp;lt;Result&amp;lt;Vec&amp;lt;_&amp;gt;, _&amp;gt;&amp;gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And it terminates in 14 seconds as expected (note that each task is
allocated to one OS thread):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;OS Thread ThreadId(3) - task1 started: 280.871µs
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(6) - task2 started: 281.03µs
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(7) - task3 started: 283.838µs
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(6) - task2 written: 2.000605562s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(7) - task3 written: 2.000619598s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(3) - task1 written: 2.000679853s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(3) - task1 read: 10.002321036s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(6) - task2 read: 10.00233185s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(7) - task3 read: 10.002384653s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(3) - task1 finished: 14.002447762s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(6) - task2 finished: 14.002540969s
&lt;&#x2F;span&gt;&lt;span&gt;OS Thread ThreadId(7) - task3 finished: 14.002589621s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, this would not be resource-efficient when handling a large
number of tasks since one task corresponds to one OS thread.&lt;&#x2F;p&gt;
&lt;p&gt;Whereas in the async case we only need the additional threads during the
computation step (which is synchronous). This means that we could use a
fixed OS threadpool size and still benefit from some parallelisation in
the computation step whilst having guarantees about our resource usage
(i.e. we can limit the maximum number of OS threads and still be able to
start new requests).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I hope this blog post has helped you to better understand when and how
to apply asynchronous programming in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;The elegant async&#x2F;await syntax allows for clear and concise asynchronous
programming. However, it may take some getting used to if you do not
have prior experience with asynchronous programming.&lt;&#x2F;p&gt;
&lt;p&gt;These examples also demonstrate the difference between concurrency and
parallelism. In the asynchronous single OS thread case we are handling
tasks concurrently, but nothing is running in parallel (i.e. we use only
one OS thread).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;current-limitations&quot;&gt;Current Limitations&lt;&#x2F;h3&gt;
&lt;p&gt;Note that currently you cannot use &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;async-book&#x2F;07_workarounds&#x2F;06_async_in_traits.html&quot;&gt;async methods in traits&lt;&#x2F;a&gt;, and nor
can you create &lt;a href=&quot;https:&#x2F;&#x2F;boats.gitlab.io&#x2F;blog&#x2F;post&#x2F;poll-drop&#x2F;&quot;&gt;async destructors&lt;&#x2F;a&gt;. This is a problem if you want a struct
to make a network request when it is dropped, but you don&#x27;t want to
block the OS thread whilst it does that - you cannot &lt;code&gt;.await&lt;&#x2F;code&gt; because
&lt;code&gt;drop()&lt;&#x2F;code&gt; (from &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;ops&#x2F;trait.Drop.html&quot;&gt;Drop&lt;&#x2F;a&gt;) is not async.&lt;&#x2F;p&gt;
&lt;p&gt;I hit the latter issue in my recent &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;s3rename&quot;&gt;s3rename&lt;&#x2F;a&gt; crate, and am still
attempting to work around it. See &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;s3rename&#x2F;issues&#x2F;16&quot;&gt;this issue&lt;&#x2F;a&gt; for details.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Data Ingestion with Rust and AWS Lambda</title>
		<published>2020-04-19T00:00:00+00:00</published>
		<updated>2020-04-19T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jamesmcm.github.io/blog/data-engineering-with-rust-and-aws-lambda/" type="text/html"/>
		<id>https://jamesmcm.github.io/blog/data-engineering-with-rust-and-aws-lambda/</id>
		<content type="html">&lt;p&gt;In this post we will set up a very simple data ingestion process with Rust and AWS Lambda.&lt;&#x2F;p&gt;
&lt;p&gt;The complete code for this example is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;rust-lambda-test&quot;&gt;available on GitHub here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Opinions expressed are solely my own and do not express the views or opinions of my employer.&lt;&#x2F;p&gt;
&lt;p&gt;You should be able to follow along using the AWS Free Tier if you want, but you will need to use a Postgres 11.1+ RDS instance instead of Redshift (unless you qualify for the separate 12-month free trial of Amazon Redshift). AWS Lambda has an Always Free tier option, whereas S3 and RDS have only 12-month free trial options.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;process-requirements&quot;&gt;Process Requirements&lt;&#x2F;h2&gt;
&lt;p&gt;In this process we would like to parse, filter and import an Excel file to our database, on-demand when it is uploaded to S3.&lt;&#x2F;p&gt;
&lt;p&gt;We can split the problem down in to the following steps:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Parsing the Excel file and filtering rows - here we will use the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;calamine&quot;&gt;calamine&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;serde&quot;&gt;Serde&lt;&#x2F;a&gt; crates, note we need to handle possible parsing errors.&lt;&#x2F;li&gt;
&lt;li&gt;Serialising the data to a CSV - we will use the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;csv&quot;&gt;csv crate&lt;&#x2F;a&gt; with &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;serde&quot;&gt;Serde&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Uploading the CSV to S3 - we will use the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;rusoto&quot;&gt;rusoto crate&lt;&#x2F;a&gt; for interacting with AWS.&lt;&#x2F;li&gt;
&lt;li&gt;Getting database credentials from AWS Secrets Manager - we will use the rusoto crate.&lt;&#x2F;li&gt;
&lt;li&gt;Triggering the COPY from S3 in the Redshift&#x2F;RDS instance - we will use the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;postgres&quot;&gt;postgres crate&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;openssl&quot;&gt;OpenSSL&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Running this process in AWS Lambda and handling the events received - we will use the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;lambda_runtime&quot;&gt;lambda_runtime&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;aws_lambda_events&quot;&gt;aws_lambda_events&lt;&#x2F;a&gt; crates.&lt;&#x2F;li&gt;
&lt;li&gt;Cross-compiling and deploying the process - we need to build for the &lt;code&gt;x86_64-unknown-linux-musl&lt;&#x2F;code&gt; target so the binary will run on Amazon Linux.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;why-rust&quot;&gt;Why Rust?&lt;&#x2F;h2&gt;
&lt;p&gt;One could argue that Python is more suitable for this task, since pandas can parse Excel files and write to a CSV directly (using boto3 to interact with AWS). However there are a few reasons why I think Rust is better suited to this sort of serverless computing:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;With Rust we can deploy a statically linked binary - i.e. we don&#x27;t have any dependency on the runtime environment. In Python we would have to handle deploying the dependent pip packages with the Lambda artefact, for NumPy this is not trivial since it has compiled dependencies which would need to be cross-compiled or built on Amazon Linux (i.e. with CodeBuild) - Lambda Layers can automate this for popular dependencies, but it&#x27;s still more work than a static binary (and results in a larger artefact to deploy too).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;With Rust we get full type checking and static typing, in this case our example is simple serialisation and de-serialisation. However, if we were to do much more processing of the de-serialised data, it would be very useful to have all of that being type checked to avoid possible runtime errors.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Rust gives us greater control of performance, and the lambda_runtime crate allows us to use Tokio for asynchronous operations. With serverless computing we are paying by execution time (and memory usage with respect to the size of the instance) so better performance can directly lead to cost savings.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Rust offers a better, modern development experience. With rust-analyzer you can have immediate type-checking directly in your IDE&#x2F;text editor. Unit testing is built-in and easy to use in the same source file. Automatic generation of documentation is built-in with rustdoc. You also don&#x27;t need to deal with setting up virtual environments for dependencies.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;&#x2F;h2&gt;
&lt;p&gt;We will follow the steps outlined above, starting with parsing the Excel file, which can be tested independently.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;parsing-the-excel-file-with-calamine&quot;&gt;Parsing the Excel file with Calamine&lt;&#x2F;h3&gt;
&lt;p&gt;The Excel file we want to parse has the following structure in the &lt;code&gt;data&lt;&#x2F;code&gt; worksheet:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;location&lt;&#x2F;th&gt;&lt;th&gt;metric&lt;&#x2F;th&gt;&lt;th&gt;value&lt;&#x2F;th&gt;&lt;th&gt;date&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;UK&lt;&#x2F;td&gt;&lt;td&gt;conversion_rate&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;2020-02-01&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;ES&lt;&#x2F;td&gt;&lt;td&gt;conversion_rate&lt;&#x2F;td&gt;&lt;td&gt;0.634&lt;&#x2F;td&gt;&lt;td&gt;2020-02-01&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;DE&lt;&#x2F;td&gt;&lt;td&gt;conversion_rate&lt;&#x2F;td&gt;&lt;td&gt;#N&#x2F;A&lt;&#x2F;td&gt;&lt;td&gt;2020-02-01&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;FR&lt;&#x2F;td&gt;&lt;td&gt;conversion_rate&lt;&#x2F;td&gt;&lt;td&gt;#N&#x2F;A&lt;&#x2F;td&gt;&lt;td&gt;2020-02-01&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;UK&lt;&#x2F;td&gt;&lt;td&gt;conversion_rate&lt;&#x2F;td&gt;&lt;td&gt;0.723&lt;&#x2F;td&gt;&lt;td&gt;2020-01-31&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;We only want to import rows which have the same date as the first row in the Excel file.&lt;&#x2F;p&gt;
&lt;p&gt;Note the possibility of #N&#x2F;A and invalid values which we will need to handle.&lt;&#x2F;p&gt;
&lt;p&gt;This file will be uploaded to &lt;code&gt;s3:&#x2F;&#x2F;input-bucket-name&#x2F;label&#x2F;filename.xlsx&lt;&#x2F;code&gt; where the label allows multiple files to be uploaded (with different locations in each file).&lt;&#x2F;p&gt;
&lt;p&gt;See &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;rust-lambda-test&quot;&gt;the Github repo&lt;&#x2F;a&gt; for a test example.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;reading-the-excel-file&quot;&gt;Reading the Excel file&lt;&#x2F;h4&gt;
&lt;p&gt;First let&#x27;s write a test that will read an example of our Excel file to a buffer and create a calamine::Xlsx object from it. We do it like this (rather than using calamine&#x27;s &lt;code&gt;open_workbook()&lt;&#x2F;code&gt; function to read directly from a file) so we can maintain the same interface when reading the Excel file from S3 directly.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;calamine::{Reader, Xlsx};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;##[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(test)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span&gt;tests {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use super&lt;&#x2F;span&gt;&lt;span&gt;::*;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::fs::File;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::io::Write;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::path::PathBuf;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test_local&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; buffer: Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = Vec::new();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; f = File::open(
&lt;&#x2F;span&gt;&lt;span&gt;            PathBuf::from(env!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;CARGO_MANIFEST_DIR&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(PathBuf::from(
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tests&#x2F;test_excel.xlsx&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            )),
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read_to_end&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; buffer).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; excel = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;Xlsx::new(Cursor::new(buffer)) {
&lt;&#x2F;span&gt;&lt;span&gt;            Ok(x) =&amp;gt; x,
&lt;&#x2F;span&gt;&lt;span&gt;            Err(x) =&amp;gt; panic!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, x),
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we use the &lt;code&gt;CARGO_MANIFEST_DIR&lt;&#x2F;code&gt; environment variable to get a relative path when we run &lt;code&gt;cargo test&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you create an example Excel file, this test should pass. This provides us with a calamine::Xlsx object we can use to call our parsing function.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;parsing-the-excel-file&quot;&gt;Parsing the Excel file&lt;&#x2F;h4&gt;
&lt;p&gt;We will implement the following function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;excel_to_csv_string&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;excel&lt;&#x2F;span&gt;&lt;span&gt;: Xlsx&amp;lt;Cursor&amp;lt;Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;(String, HashSet&amp;lt;String&amp;gt;, chrono::NaiveDate), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which will return a (Result of a) tuple of the CSV as a String, a HashSet of all found locations (for use in deleting existing rows before the database insertion), and the date of the first row that we used as the date of the file (also for use in the database insertion and logging).&lt;&#x2F;p&gt;
&lt;p&gt;Note the Xlsx object we pass is based on a Cursor in a Vec of u8 bytes - exactly what we generated above (and what we will later receive when reading the file on S3 with rusoto).&lt;&#x2F;p&gt;
&lt;p&gt;To do this, we will use calamine::RangeDeserializerBuilder, in our case since the Excel file has headers, we will use the &lt;code&gt;with_headers()&lt;&#x2F;code&gt; method and pass it a slice of static strings.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s first define the columns and the struct that we will deserialise the rows into:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;serde::{Deserialize, Serialize};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;COLUMNS&lt;&#x2F;span&gt;&lt;span&gt;: [&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;] = [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;location&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;metric&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;date&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;##[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Serialize, Deserialize, Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;RawExcelRow {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;location&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metric&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serde&lt;&#x2F;span&gt;&lt;span&gt;(deserialize_with = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;de_opt_f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serde&lt;&#x2F;span&gt;&lt;span&gt;(deserialize_with = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;de_date&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;date&lt;&#x2F;span&gt;&lt;span&gt;: chrono::NaiveDate,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our columns array corresponds to the headers in the Excel file (you could probably read these dynamically, but in our case we have a fixed schema anyway).&lt;&#x2F;p&gt;
&lt;p&gt;The RawExcelRow is the struct we will deserialise each row to. Note the &lt;code&gt;deserialize_with&lt;&#x2F;code&gt; field attributes set for the &lt;code&gt;value&lt;&#x2F;code&gt; and &lt;code&gt;date&lt;&#x2F;code&gt; fields. We will need to implement both of these.&lt;&#x2F;p&gt;
&lt;p&gt;The custom deserialiser for &lt;code&gt;value&lt;&#x2F;code&gt; is required so that we when the field fails to parse we replace the field value with None (rather than skipping the entire row, as we would if we handled the Error later when filtering rows).&lt;&#x2F;p&gt;
&lt;p&gt;This is implemented as follows (note we also explicitly cast integers, for the case of 0 or 1):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;de_opt_f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;de&lt;&#x2F;span&gt;&lt;span&gt;, D&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deserializer&lt;&#x2F;span&gt;&lt;span&gt;: D) -&amp;gt; Result&amp;lt;Option&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;D::&lt;&#x2F;span&gt;&lt;span&gt;Error&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    D: serde::Deserializer&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;de&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; data_type = calamine::DataType::deserialize(deserializer);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; data_type {
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(calamine::DataType::Error(_)) =&amp;gt; Ok(None),
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(calamine::DataType::Float(f)) =&amp;gt; Ok(Some(f)),
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(calamine::DataType::Int(i)) =&amp;gt; Ok(Some(i as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;        _ =&amp;gt; Ok(None),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For &lt;code&gt;date&lt;&#x2F;code&gt; the custom deserialiser is required since Excel stores dates as the number of days since January 1st 1900 (starting from 1).&lt;&#x2F;p&gt;
&lt;p&gt;Calamine has a function to do this conversion for us, but it won&#x27;t automatically apply it when trying to deserialise to a chrono::NaiveDate (I created &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tafia&#x2F;calamine&#x2F;issues&#x2F;168&quot;&gt;this issue&lt;&#x2F;a&gt; regarding this). &lt;&#x2F;p&gt;
&lt;p&gt;So we simply call Calamine&#x27;s &lt;code&gt;as_date()&lt;&#x2F;code&gt; conversion function explicitly:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;de_date&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;de&lt;&#x2F;span&gt;&lt;span&gt;, D&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deserializer&lt;&#x2F;span&gt;&lt;span&gt;: D) -&amp;gt; Result&amp;lt;chrono::NaiveDate, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;D::&lt;&#x2F;span&gt;&lt;span&gt;Error&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    D: serde::Deserializer&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;de&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; data_type = calamine::DataType::deserialize(deserializer);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; data_type {
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(x) =&amp;gt; x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_date&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ok_or&lt;&#x2F;span&gt;&lt;span&gt;(serde::de::Error::custom(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Invalid Date&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)),
&lt;&#x2F;span&gt;&lt;span&gt;        Err(x) =&amp;gt; Err(x),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this in place we can implement the deserialisation step:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;calamine::{RangeDeserializerBuilder, Reader, Xlsx};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;csv::Writer;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::collections::HashSet;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::error::Error;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::io::Cursor;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::io::Read;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;excel_to_csv_string&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;excel&lt;&#x2F;span&gt;&lt;span&gt;: Xlsx&amp;lt;Cursor&amp;lt;Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;(String, HashSet&amp;lt;String&amp;gt;, chrono::NaiveDate), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; range = excel
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;worksheet_range&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ok_or&lt;&#x2F;span&gt;&lt;span&gt;(calamine::Error::Msg(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Cannot find data worksheet&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))??;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; iter_result =
&lt;&#x2F;span&gt;&lt;span&gt;        RangeDeserializerBuilder::with_headers(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;COLUMNS&lt;&#x2F;span&gt;&lt;span&gt;).from_range::&amp;lt;_, RawExcelRow&amp;gt;(&amp;amp;range)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note the double &lt;code&gt;??&lt;&#x2F;code&gt; on the line &lt;code&gt;.ok_or(calamine::Error::Msg(&amp;quot;Cannot find data worksheet&amp;quot;))??;&lt;&#x2F;code&gt; - this is used since
the &lt;code&gt;.worksheet_range()&lt;&#x2F;code&gt; method returns an &lt;code&gt;Option&amp;lt;Result&amp;lt;Range&amp;lt;DataType&amp;gt;, XlsxError&amp;gt;&amp;gt;&lt;&#x2F;code&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;calamine&#x2F;0.16.1&#x2F;calamine&#x2F;struct.Xlsx.html#method.worksheet_range&quot;&gt;see docs&lt;&#x2F;a&gt;), 
and we convert the Option to a Result using &lt;code&gt;.ok_or()&lt;&#x2F;code&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;option&#x2F;enum.Option.html#method.ok_or&quot;&gt;see docs&lt;&#x2F;a&gt;) to convert the
None case to a &lt;code&gt;calamine::Error&lt;&#x2F;code&gt; (and the Some case to Ok). The double &lt;code&gt;??&lt;&#x2F;code&gt; unwraps both of these
errors to give us the &lt;code&gt;Range&amp;lt;DataType&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We start by getting the range for the &lt;code&gt;data&lt;&#x2F;code&gt; worksheet, and then we deserialise it to &lt;code&gt;RawExcelRow&lt;&#x2F;code&gt;s, giving us an Iterator over &lt;code&gt;RawExcelRow&lt;&#x2F;code&gt;s. With this iterator we can apply row-level filtering (or other transformations), as we serialise to CSV.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;serialisation-to-csv&quot;&gt;Serialisation to CSV&lt;&#x2F;h4&gt;
&lt;p&gt;We serialise the first row, and copy the date from it to filter the further rows (remember we want to filter only for rows which have the same date as the first row in the file).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Use date of first row as date for file
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; wtr = Writer::from_writer(vec![]);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; locations: HashSet&amp;lt;String&amp;gt; = HashSet::new();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; first_row = iter_result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; canonical_date = first_row.date.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    locations.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(first_row.location.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    wtr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;serialize&lt;&#x2F;span&gt;&lt;span&gt;(first_row)?;
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Canonical date: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, canonical_date);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We then serialise all rows where the date is equal to the date of the first row (&lt;code&gt;canonical_date&lt;&#x2F;code&gt;), and add their &lt;code&gt;location&lt;&#x2F;code&gt; to the &lt;code&gt;locations&lt;&#x2F;code&gt; HashSet.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, we convert the Writer object to a String, and return that, along with the &lt;code&gt;locations&lt;&#x2F;code&gt; HashSet and the &lt;code&gt;canonical_date&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(index, row) in iter_result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; row {
&lt;&#x2F;span&gt;&lt;span&gt;            Ok(row) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; row.date == canonical_date {
&lt;&#x2F;span&gt;&lt;span&gt;                    locations.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(row.location.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;                    wtr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;serialize&lt;&#x2F;span&gt;&lt;span&gt;(row)?;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            Err(row) =&amp;gt; println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, index, row),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; data = String::from_utf8(wtr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_inner&lt;&#x2F;span&gt;&lt;span&gt;()?)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok((data, locations, canonical_date))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can now test calling this function in our &lt;code&gt;test_local()&lt;&#x2F;code&gt; test, adding the following lines:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(data, locations, canonical_date) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;excel_to_csv_string&lt;&#x2F;span&gt;&lt;span&gt;(excel) {
&lt;&#x2F;span&gt;&lt;span&gt;            Ok(x) =&amp;gt; x,
&lt;&#x2F;span&gt;&lt;span&gt;            Err(x) =&amp;gt; panic!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, x),
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;locations: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, locations);
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;canonical date: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, canonical_date);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; file = File::create(
&lt;&#x2F;span&gt;&lt;span&gt;            PathBuf::from(env!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;CARGO_MANIFEST_DIR&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(PathBuf::from(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tests&#x2F;test_output.csv&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)),
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span&gt;(data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        assert_eq!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This test should pass, and write the CSV to &lt;code&gt;test_output.csv&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;uploading-the-csv-to-s3&quot;&gt;Uploading the CSV to S3&lt;&#x2F;h3&gt;
&lt;p&gt;We can upload the CSV to S3 using the rusoto_s3 crate.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rusoto_core::Region;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rusoto_s3::{GetObjectRequest, PutObjectRequest, S3Client, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;S3&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;OUTPUT_BUCKET&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;output-bucket-name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;upload_csv_to_s3&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;canonical_date&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;chrono::NaiveDate,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;(String), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; outputkey = format!(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;output&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.csv&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        label,
&lt;&#x2F;span&gt;&lt;span&gt;        canonical_date.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;%Y-%m-%d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Write CSV to S3
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s3_client = S3Client::new(Region::EuWest1);
&lt;&#x2F;span&gt;&lt;span&gt;    s3_client
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;put_object&lt;&#x2F;span&gt;&lt;span&gt;(PutObjectRequest {
&lt;&#x2F;span&gt;&lt;span&gt;            bucket: String::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;OUTPUT_BUCKET&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;            key: outputkey.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            body: Some(data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_bytes&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;()),
&lt;&#x2F;span&gt;&lt;span&gt;            ..Default::default()
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sync&lt;&#x2F;span&gt;&lt;span&gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(outputkey)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Remember to set the correct region for your use case. In this case we use the default credentials provider, so your AWS credentials will also need to be available (i.e. in &lt;code&gt;~&#x2F;.aws&#x2F;credentials&lt;&#x2F;code&gt;) or via the runtime environment.&lt;&#x2F;p&gt;
&lt;p&gt;Note that here we consume our CSV String since we don&#x27;t need it again. We also return the outputkey so we can use it later when triggering the load to the database.&lt;&#x2F;p&gt;
&lt;p&gt;We will get the &lt;code&gt;label&lt;&#x2F;code&gt; value from the path of the input file on S3 when the Lambda function is triggered. This allows for different files to be uploaded for the same day (i.e. splitting files by location).&lt;&#x2F;p&gt;
&lt;p&gt;Also note the call to &lt;code&gt;.sync()&lt;&#x2F;code&gt; since the result is a RusotoFuture object.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;getting-database-credentials-from-aws-secrets-manager&quot;&gt;Getting database credentials from AWS Secrets Manager&lt;&#x2F;h3&gt;
&lt;p&gt;In order to connect to our database and trigger the load from S3, we first need to get the credentials.&lt;&#x2F;p&gt;
&lt;p&gt;Using AWS Secrets Manager is a best practice, since it allows you to easily rotate credentials whilst storing and sharing them securely. &lt;&#x2F;p&gt;
&lt;p&gt;We will use the rusoto_secretsmanager crate to retrieve our credentials.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rusoto_core::Region;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rusoto_secretsmanager::{GetSecretValueRequest, SecretsManager, SecretsManagerClient};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;serde::Deserialize;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;serde::Serialize;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;##[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allow&lt;&#x2F;span&gt;&lt;span&gt;(non_snake_case)]
&lt;&#x2F;span&gt;&lt;span&gt;##[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Serialize, Deserialize, Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;DBCredentials {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;engine&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dbClusterIdentifier&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_db_credentials&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;DBCredentials, Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sm_client = SecretsManagerClient::new(Region::EuWest1);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; secret = sm_client
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_secret_value&lt;&#x2F;span&gt;&lt;span&gt;(GetSecretValueRequest {
&lt;&#x2F;span&gt;&lt;span&gt;            secret_id: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;db_credentials_secret&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            version_id: None,
&lt;&#x2F;span&gt;&lt;span&gt;            version_stage: None,
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sync&lt;&#x2F;span&gt;&lt;span&gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; credentials: DBCredentials = serde_json::from_str(&amp;amp;secret.secret_string.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;())?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(credentials)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note here we have hardcoded the secret name &lt;code&gt;db_credentials_secret&lt;&#x2F;code&gt; and the AWS region.&lt;&#x2F;p&gt;
&lt;p&gt;We use the &lt;code&gt;serde_json&lt;&#x2F;code&gt; crate to deserialise the JSON returned from Secrets Manager into a DBCredentials struct we can use directly.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;load-the-csv-to-the-database&quot;&gt;Load the CSV to the database&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;connecting-to-the-database&quot;&gt;Connecting to the database&lt;&#x2F;h4&gt;
&lt;p&gt;Here we assume connecting to a Redshift cluster with SSL enabled. The requirement for SSL complicates things, here we will use OpenSSL.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;openssl::ssl::{SslConnector, SslMethod};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;postgres::Client;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;postgres_openssl::MakeTlsConnector;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;load_to_db&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;outputkey&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;canonical_date&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;chrono::NaiveDate,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;locations&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;HashSet&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; builder = SslConnector::builder(SslMethod::tls())?;
&lt;&#x2F;span&gt;&lt;span&gt;    builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set_ca_file&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;redshift-ssl-ca-cert.pem&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; connector = MakeTlsConnector::new(builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; credentials = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_db_credentials&lt;&#x2F;span&gt;&lt;span&gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; client = Client::connect(
&lt;&#x2F;span&gt;&lt;span&gt;        format!(
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;host=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; port=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; dbname=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; user=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; password=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; sslmode=require&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            credentials.host,
&lt;&#x2F;span&gt;&lt;span&gt;            credentials.port,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dbname&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            credentials.username,
&lt;&#x2F;span&gt;&lt;span&gt;            credentials.password
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        connector,
&lt;&#x2F;span&gt;&lt;span&gt;    )?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note we have hardcoded the database name &lt;code&gt;dbname&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The Redshift SSL CA certificate is available from AWS at &lt;a href=&quot;https:&#x2F;&#x2F;s3.amazonaws.com&#x2F;redshift-downloads&#x2F;redshift-ssl-ca-cert.pem&quot;&gt;https:&#x2F;&#x2F;s3.amazonaws.com&#x2F;redshift-downloads&#x2F;redshift-ssl-ca-cert.pem&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This file should be in the root directory of the crate to work with the above code, and we will also need to add it to the artefact we upload to AWS Lambda.&lt;&#x2F;p&gt;
&lt;p&gt;Note in order to get this to cross-compile, we need to enable the &lt;code&gt;vendored&lt;&#x2F;code&gt; feature in the openssl crate, i.e. in Cargo.toml:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[dependencies]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;postgres &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.17.2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;postgres-openssl &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.3.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;openssl &lt;&#x2F;span&gt;&lt;span&gt;= {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.10.28&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vendored&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;loading-the-data&quot;&gt;Loading the data&lt;&#x2F;h4&gt;
&lt;p&gt;Now we have a working connection with SSL, we can load the data from S3. Continuing the above code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; locations_vec: Vec&amp;lt;String&amp;gt; = locations
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cloned&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| format!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, x))
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; target_table = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_table&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; location_string = &amp;amp;locations_vec.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; truncate_query = format!(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DELETE FROM public.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; WHERE date = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39; AND location IN (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        target_table,
&lt;&#x2F;span&gt;&lt;span&gt;        canonical_date.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;%Y-%m-%d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        location_string
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; colstr = &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;COLUMNS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, truncate_query);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; copy_query = format!(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;COPY public.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;) from
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                 &amp;#39;s3:&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                  iam_role &amp;#39;arn:aws:iam::YOUR_ROLE_HERE&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                  FORMAT CSV
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                  EMPTYASNULL
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                  BLANKSASNULL
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                  IGNOREHEADER 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                  IGNOREBLANKLINES
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                  ;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        target_table, colstr, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;OUTPUT_BUCKET&lt;&#x2F;span&gt;&lt;span&gt;, outputkey
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(truncate_query.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;(), &amp;amp;[]));
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(copy_query.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;(), &amp;amp;[]));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have hardcoded the table name as &lt;code&gt;test_table&lt;&#x2F;code&gt;. We first delete from the table all rows which have the same date for each of the locations that we will insert. Then we trigger the load from S3 with the &lt;code&gt;COPY&lt;&#x2F;code&gt; statement.&lt;&#x2F;p&gt;
&lt;p&gt;Note you will need to use an appropriate IAM role in that statement.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;running-on-aws-lambda&quot;&gt;Running on AWS Lambda&lt;&#x2F;h3&gt;
&lt;p&gt;We are now able to run the entire process locally, with a local Excel file, however in order to deploy it to AWS Lambda we need to make a few changes.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;loading-the-input-excel-from-s3&quot;&gt;Loading the input Excel from S3&lt;&#x2F;h4&gt;
&lt;p&gt;First of all, we need to be able to load the input Excel from S3. Specifically: given an S3 key, return the calamine::Xlsx object.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;calamine::{RangeDeserializerBuilder, Reader, Xlsx};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rusoto_core::Region;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rusoto_s3::{GetObjectRequest, PutObjectRequest, S3Client, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;S3&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::io::Cursor;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::io::Read;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_excel_from_s3&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bucket&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;Xlsx&amp;lt;Cursor&amp;lt;Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt;, Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; buffer: Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = Vec::new();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s3_client = S3Client::new(Region::EuWest1);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Reading bucket: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, bucket, key);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s3file = s3_client
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_object&lt;&#x2F;span&gt;&lt;span&gt;(GetObjectRequest {
&lt;&#x2F;span&gt;&lt;span&gt;            bucket: bucket.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            key: key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            ..Default::default()
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sync&lt;&#x2F;span&gt;&lt;span&gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _file = s3file
&lt;&#x2F;span&gt;&lt;span&gt;        .body
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_blocking_read&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read_to_end&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; buffer)?;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(Xlsx::new(Cursor::new(buffer))?)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will return us the &lt;code&gt;Xlsx&amp;lt;Cursor&amp;lt;Vec&amp;lt;u8&amp;gt;&amp;gt;&lt;&#x2F;code&gt; object that we want.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bringing-it-all-together&quot;&gt;Bringing it all together&lt;&#x2F;h4&gt;
&lt;p&gt;We now need to write the function that will call all of the above functions to run the process.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;calamine::{RangeDeserializerBuilder, Reader, Xlsx};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;INPUT_BUCKET&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;input-bucket-name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;handle_excel&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; label = key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;nth&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; excel: Xlsx&amp;lt;_&amp;gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_excel_from_s3&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;INPUT_BUCKET&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;key)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(data, locations, canonical_date) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;excel_to_csv_string&lt;&#x2F;span&gt;&lt;span&gt;(excel)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; outputkey = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;upload_csv_to_s3&lt;&#x2F;span&gt;&lt;span&gt;(data, label, &amp;amp;canonical_date)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;load_to_db&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;outputkey, &amp;amp;canonical_date, &amp;amp;locations)?;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Remember the input file will be of the form: &lt;code&gt;s3:&#x2F;&#x2F;input-bucket-name&#x2F;label&#x2F;filename.xlsx&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;adding-the-lambda-handler&quot;&gt;Adding the lambda handler&lt;&#x2F;h4&gt;
&lt;p&gt;Finally we need to add the functions which will be the entry point for the Lambda function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;lambda_runtime::error::HandlerError;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;percent_encoding::percent_decode_str;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    lambda_runtime::lambda!(my_handler);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;my_handler&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;: aws_lambda_events::event::s3::S3Event,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_c&lt;&#x2F;span&gt;&lt;span&gt;: lambda_runtime::Context,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;(), HandlerError&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, e);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; decodedkey = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;percent_decode_str&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;(e.records[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].s3.object.key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;decode_utf8&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;handle_excel&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;decodedkey) {
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(_) =&amp;gt; (),
&lt;&#x2F;span&gt;&lt;span&gt;        Err(error) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            panic!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error: {:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, error);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The events the Lambda will receive will come from S3 directly (i.e. forwarding PutObject events to this Lambda from the S3 bucket properties).&lt;&#x2F;p&gt;
&lt;p&gt;We use &lt;code&gt;aws_lambda_events&lt;&#x2F;code&gt; to get a template for this event, from which we extract the S3 key of the file uploaded which has triggered the function.&lt;&#x2F;p&gt;
&lt;p&gt;Note the use of the &lt;code&gt;percent_encoding&lt;&#x2F;code&gt; crate to decode the URL-encoded key we receive in the event itself.&lt;&#x2F;p&gt;
&lt;p&gt;The code for this example is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;rust-lambda-test&quot;&gt;available on GitHub here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;deployment&quot;&gt;Deployment&lt;&#x2F;h3&gt;
&lt;p&gt;To deploy the function, we follow the instructions on &lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;blogs&#x2F;opensource&#x2F;rust-runtime-for-aws-lambda&#x2F;&quot;&gt;the AWS blog about the Rust runtime&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We first need to edit Cargo.toml to set the binary name to &lt;code&gt;bootstrap&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[[bin]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bootstrap&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;src&#x2F;main.rs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;os-x-cross-compilation&quot;&gt;OS X cross-compilation&lt;&#x2F;h4&gt;
&lt;p&gt;If you are building on OS X you need to cross-compile the binary, as per the instructions in the blog post.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rustup&lt;&#x2F;span&gt;&lt;span&gt; target add x86_64-unknown-linux-musl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;brew&lt;&#x2F;span&gt;&lt;span&gt; install filosottile&#x2F;musl-cross&#x2F;musl-cross
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span&gt; .cargo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[target.x86_64-unknown-linux-musl]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;linker = &amp;quot;x86_64-linux-musl-gcc&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;gt; .cargo&#x2F;config
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ln -s&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;x86_64-linux-musl-gcc &#x2F;usr&#x2F;local&#x2F;bin&#x2F;musl-gcc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note the installation of musl-cross took almost 2 hours on my machine.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;build-zip-artefact&quot;&gt;Build zip artefact&lt;&#x2F;h4&gt;
&lt;p&gt;Remember to add the Redshift CA certificate to the zip archive:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --release --target&lt;&#x2F;span&gt;&lt;span&gt; x86_64-unknown-linux-musl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zip -j&lt;&#x2F;span&gt;&lt;span&gt; rust.zip .&#x2F;target&#x2F;x86_64-unknown-linux-musl&#x2F;release&#x2F;bootstrap .&#x2F;redshift-ssl-ca-cert.pem
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;upload-to-aws&quot;&gt;Upload to AWS&lt;&#x2F;h4&gt;
&lt;p&gt;Create a new Lambda function with a Custom runtime, and then upload the zip file.&lt;&#x2F;p&gt;
&lt;p&gt;Note if your Redshift cluster (or RDS instance) is behind a VPC you will need to add the Lambda function to the same VPC. See &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;lambda&#x2F;latest&#x2F;dg&#x2F;configuration-vpc.html&quot;&gt;the documentation&lt;&#x2F;a&gt; for more details. &lt;&#x2F;p&gt;
&lt;p&gt;Then add the S3 trigger to the Lambda function (and you can test the function using the S3 event template).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;future-improvements&quot;&gt;Future Improvements&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;rustls&quot;&gt;RusTLS&lt;&#x2F;h3&gt;
&lt;p&gt;The dependency on OpenSSL can make it difficult to cross-compile, so it would be nice to use a pure Rust TLS library.&lt;&#x2F;p&gt;
&lt;p&gt;A good candidate would be &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;rustls&quot;&gt;RustTLS&lt;&#x2F;a&gt;, and the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;tokio-postgres-rustls&quot;&gt;tokio-postgres-rustls&lt;&#x2F;a&gt; crate apparently adds support for this to the postgres crate. &lt;&#x2F;p&gt;
&lt;p&gt;I tried &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;native-tls&quot;&gt;native-tls&lt;&#x2F;a&gt; which has built-in support in the postgres crate, but hit &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sfackler&#x2F;rust-native-tls&#x2F;issues&#x2F;132&quot;&gt;this issue when building on OS X&lt;&#x2F;a&gt;, and this utlimately uses OpenSSL on Linux anyway.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;apache-arrow-flatbuffers&quot;&gt;Apache Arrow + FlatBuffers&lt;&#x2F;h3&gt;
&lt;p&gt;It would be great if we could deserialise directly (via Calamine and Serde) from the rows of the Excel file to a columnar form in memory such as an Apache Arrow &lt;a href=&quot;https:&#x2F;&#x2F;arrow.apache.org&#x2F;docs&#x2F;r&#x2F;reference&#x2F;RecordBatch.html&quot;&gt;RecordBatch&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;arrow.apache.org&#x2F;docs&#x2F;cpp&#x2F;tables.html&quot;&gt;Table&lt;&#x2F;a&gt; (rather than deserialising to our &lt;code&gt;RawExcelRow&lt;&#x2F;code&gt; structs). This would allow us to use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;arrow&#x2F;tree&#x2F;master&#x2F;rust&#x2F;datafusion&quot;&gt;DataFusion&lt;&#x2F;a&gt; to query the loaded data.&lt;&#x2F;p&gt;
&lt;p&gt;Ideally we could also apply transformations to the data column-wise, and add or remove columns, transitioning between different defined schemas. So we could have a data manipulation tool as powerful as pandas, but with statically defined schemas where the interactions can be verified at compile time.&lt;&#x2F;p&gt;
&lt;p&gt;This could then be saved to disk in the Apache Arrow format without serialisation, or rapidly serialised to columnar formats such as Parquet (which is also well-suited for loading to a columnar database).&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, even though &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;arrow&#x2F;tree&#x2F;master&#x2F;rust&quot;&gt;Arrow does have a Rust implementation&lt;&#x2F;a&gt;, it doesn&#x27;t seem this direct deserialisation with Serde is possible at the moment (although I am not very familiar with Apache Arrow, nor with Serde&#x27;s internals).&lt;&#x2F;p&gt;
&lt;p&gt;An alternative could be to deserialise to an &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;ndarray&#x2F;0.13.1&#x2F;ndarray&#x2F;&quot;&gt;ndarray&lt;&#x2F;a&gt;, however &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-ndarray&#x2F;ndarray&#x2F;issues&#x2F;771&quot;&gt;support for Arrow is still in progress&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;google.github.io&#x2F;flatbuffers&#x2F;&quot;&gt;FlatBuffers&lt;&#x2F;a&gt; (used for Arrow&#x27;s Table) &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;flatbuffers&#x2F;issues&#x2F;5132&quot;&gt;also has an issue open for Serde serialisation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you have any ideas for how to achieve this direct deserialisation with Serde please add a comment here in Disqus or as a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;rust-lambda-test&quot;&gt;Github issue&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;compressed-parquet-output&quot;&gt;Compressed Parquet output&lt;&#x2F;h3&gt;
&lt;p&gt;As mentioned above, it&#x27;d be great to be able to write a columnar format such as Parquet directly for loading to Redshift.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately it seems serialising to Parquet is not currently supported in Serde, although the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;constellation-rs&#x2F;amadeus&quot;&gt;Amadeus&lt;&#x2F;a&gt; crate apparently supports reading Parquet.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Thanks for reading this blog post, I hope this toy example is useful, and that Rust adoption will continue to grow in serverless computing.&lt;&#x2F;p&gt;
&lt;p&gt;If you questions or comments, or notice any issues in the examples, please create an issue on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;rust-lambda-test&quot;&gt;the Github repo&lt;&#x2F;a&gt; or leave a comment here in Disqus.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>The Expectation Maximisation (EM) Algorithm</title>
		<published>2014-10-24T00:00:00+00:00</published>
		<updated>2014-10-24T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jamesmcm.github.io/blog/em1/" type="text/html"/>
		<id>https://jamesmcm.github.io/blog/em1/</id>
		<content type="html">&lt;p&gt;In this post I will briefly introduce the EM algorithm with two simple examples. The EM algorithm uses an iterative approach to find the Maximum Likelihood estimate for a model with latent variables.&lt;&#x2F;p&gt;
&lt;p&gt;Note I will not provide a thorough coverage of the mathematics but rather focus on two examples of Gaussian Mixture Models.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;This blog post uses MathJax for rendering the equations and so requires
JavaScript.&lt;&#x2F;p&gt;
&lt;script src=&quot;https:&#x2F;&#x2F;polyfill.io&#x2F;v3&#x2F;polyfill.min.js?features=es6&quot;&gt;&lt;&#x2F;script&gt;
&lt;script id=&quot;MathJax-script&quot; async src=&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;mathjax@3&#x2F;es5&#x2F;tex-mml-chtml.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;h2 id=&quot;general-idea-of-em&quot;&gt;General idea of EM&lt;&#x2F;h2&gt;
&lt;p&gt;The objective of the EM algorithm is to obtain Maximum Likelihood estimates of the parameters and the values of latent variables, for a model with latent variables. This is achieved by iteratively updating the values of the latent variables (e.g. in this example, our best estimate of which Gaussian the data point came from) given the current estimate of the model parameters, and then updating the parameters of the model (e.g. the parameters of the Gaussians) given the values of the latent variables.&lt;&#x2F;p&gt;
&lt;p&gt;Note this bootstrap approach makes sense because it is simple to infer missing data given the parameters of the model, and to find the Maximum Likelihood estimates of the parameters for the model, given the data. However note that this can lead to problems with local optima and initialisation.&lt;&#x2F;p&gt;
&lt;p&gt;The likelihood is defined as follows (i.e. probability of the data given the model), but note we usually cannot marginalise over \(\mathbf{Z}\) directly: &lt;&#x2F;p&gt;
&lt;p&gt;$$L(\boldsymbol \theta; \mathbf{X} ) = P(\mathbf{X} | \boldsymbol \theta ) = \sum_z P(\mathbf{X}, \mathbf{Z} | \boldsymbol \theta ) $$&lt;&#x2F;p&gt;
&lt;p&gt;So instead we take this iterative updating approach. We first update our estimate of the expected value of the log-likelihood with respect to the latent variables, \(\mathbf{Z}\), given our current estimate of the model parameters. Then, using this soft assignment, we update our estimates of the parameters.&lt;&#x2F;p&gt;
&lt;p&gt;Assigning \(\mathbf{Z}\) (i.e. the Gaussian assignments in this example - technically we are calculating the conditional distribution  \(P(\mathbf{Z}|\mathbf{X},\boldsymbol \theta)\) ): &lt;&#x2F;p&gt;
&lt;p&gt;$$Q(\boldsymbol \theta | \boldsymbol \theta^t ) = \mathbb{E}_{Z|X,\theta^t} \left [ \log ( L(\boldsymbol \theta; \mathbf{X}, \mathbf{Z} )) \right ] $$&lt;&#x2F;p&gt;
&lt;p&gt;Updating the parameters \(\boldsymbol \theta\):&lt;&#x2F;p&gt;
&lt;p&gt;$$\boldsymbol \theta ^{t+1} = \arg\max_\theta Q(\boldsymbol \theta | \boldsymbol \theta^t ) $$ &lt;&#x2F;p&gt;
&lt;h2 id=&quot;application-to-gaussian-mixture-models&quot;&gt;Application to Gaussian Mixture Models&lt;&#x2F;h2&gt;
&lt;p&gt;Now let&#x27;s apply this to the problem of fitting a Gaussian Mixture Model to data. In general the problem is as follows, we wish to fit \( k \) Gaussians to describe the mixture of data we observe. The data has \( D \) dimensions.&lt;&#x2F;p&gt;
&lt;p&gt;We have a data matrix \(\mathbf{X}\) of size \(N \times D \), a matrix of assignment probabilities \(\mathbf{Z}\) of size \(N \times k \), a vector of marginal probabilities of assignment to the Gaussians (i.e. the proportion of points that come from this Gaussian) \( \boldsymbol \tau \) which is of size \(k \times 1 \). We also have the parameters of the Gaussians: their means \(\boldsymbol \mu_j\) of each of size \(D \times 1\) and their covariances \(\boldsymbol \Sigma_j \) each of size \( D \times D \). &lt;&#x2F;p&gt;
&lt;p&gt;For the sake of brevity, we will first consider fitting two Gaussians in a one-dimensional space. This means that \(D=1\), \(k=2\) and that the means, \(\mu_1\) and \(\mu_2\), and the variances, \(\sigma^2_1\) and \(\sigma^2_2\) are all scalars.&lt;&#x2F;p&gt;
&lt;div class=&quot;caption&quot; style=&quot;display:table;&quot;&gt;
  &lt;img src=&quot;exgmm1.png&quot; height=&quot;400&quot; style=&quot;block&quot;&gt;    
  &lt;div&gt;An example of an EM solution to a 1D mixture of 2 Gaussians.&lt;br&gt;A full example is included later.&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;h3 id=&quot;the-likelihood&quot;&gt;The Likelihood&lt;&#x2F;h3&gt;
&lt;p&gt;In this case we can write the likelihood as follows:&lt;&#x2F;p&gt;
&lt;p&gt;$$\begin{align}L(\boldsymbol \theta; \mathbf{X}, \mathbf{Z}) &amp;amp;= P(\mathbf{X}, \mathbf{Z} | \boldsymbol \theta) = \prod_{i=1}^n P(Z_i = z_i ) \  \mathcal{N} (x_i | (\mu_j, \sigma^2_j)) \cr
&amp;amp;= \prod_{i=1}^n \sum_{j=1}^2 \mathbb{I} (z_i = j) \tau_j \   \mathcal{N} (x_i, \mu_j, \sigma^2_j) \end{align}$$&lt;&#x2F;p&gt;
&lt;p&gt;Or in exponential form (so we can take the log):&lt;&#x2F;p&gt;
&lt;p&gt;$$\begin{align}L(\boldsymbol \theta ; \mathbf{X}, \mathbf{Z}) = &amp;amp; \exp \left ( \sum_{i=1}^n  \sum_{j=1}^2 \mathbb{I}(Z_i=j)\right . \cr
&amp;amp; \left . \left [ \log (\tau_j) - \log(\sigma_j )- \frac{1}{2\sigma^2_j} (x_i - \mu_j)^2 - \frac{d}{2} \log(2\pi) \right ] \right )\end{align}$$&lt;&#x2F;p&gt;
&lt;p&gt;Where \(\mathbb{I}(Z_i=j)\) is the indicator function (i.e. returns 1 iff. \(Z_i = j\), else returns 0).&lt;&#x2F;p&gt;
&lt;p&gt;So the log-likelihood, which we want to maximise is: &lt;&#x2F;p&gt;
&lt;p&gt;$$\log ( L(\boldsymbol \theta ; \mathbf{X}, \mathbf{Z}) ) = \sum_{i=1}^n  \sum_{j=1}^2 \mathbb{I}(Z_i=j) \left [ \log (\tau_j) - \log(\sigma_j) - \frac{1}{2\sigma^2_j} (x_i - \mu_j)^2 - \frac{d}{2} \log(2\pi) \right ]$$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-expectation-step&quot;&gt;The Expectation step&lt;&#x2F;h3&gt;
&lt;p&gt;Recall that the Gaussian assignment probabilities are in \(\mathbf{T}\), this is what we wish to return in the E-step. From Bayes Rule:&lt;&#x2F;p&gt;
&lt;p&gt;$$\mathbf{T}_{j,i}^t  = P(Z_i = j | X_i=x_i, \boldsymbol \theta^t) = \frac{\tau_j^t \ \mathcal{N}(x_i; \mu_j^t, \sigma_j^t)}{\tau_1^t \ \mathcal{N}(x_i; \mu_1^t, \sigma_1^t) + \tau_2^t \ \mathcal{N}(x_i; \mu_2^t, \sigma_2^t) }$$&lt;&#x2F;p&gt;
&lt;p&gt;This can also be expressed in terms of \(Q\):&lt;&#x2F;p&gt;
&lt;p&gt;$$\begin{align}Q(\boldsymbol \theta | \theta^t ) &amp;amp;= \mathbb{E} \left [ \log L(\boldsymbol \theta; \mathbf{X}, \mathbf{Z} ) \right ] = \mathbb{E} \left [ \log \prod_{i=1}^n L(\boldsymbol \theta; \mathbf{X}_i, \mathbf{Z}_i ) \right ] \cr
&amp;amp;= \mathbb{E} \left [ \sum_{i=1}^n \log  L(\boldsymbol \theta; \mathbf{X}\_i, \mathbf{Z}\_i ) \right ] = \sum_{i=1}^n \mathbb{E} \left [  \log  L(\boldsymbol \theta; \mathbf{X}\_i, \mathbf{Z}\_i ) \right ]\end{align}$$&lt;&#x2F;p&gt;
&lt;p&gt;$$Q(\boldsymbol \theta | \theta^t )= \sum_{i=1}^n \sum_{j=1}^2 \mathbf{T}_{j,i}^t \left [ \log \tau_j - \log ( \sigma_j ) - \frac{1}{2\sigma_j^2} (X_i - \mu_j) - \frac{d}{2} \log(2\pi ) \right ] $$&lt;&#x2F;p&gt;
&lt;p&gt;But we only need  \(\mathbf{T}\) to compute the updates.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-maximisation-step&quot;&gt;The Maximisation step&lt;&#x2F;h3&gt;
&lt;p&gt;In this step we update our estimates for all of the parameters.&lt;&#x2F;p&gt;
&lt;p&gt;First let&#x27;s update our estimates for \(\boldsymbol \tau\), the marginal probabilities for assignment to the Gaussians. Recall that \(\tau_1 + \tau_2 = 1\). The update rule is as follows:&lt;&#x2F;p&gt;
&lt;p&gt;$$\begin{align}\tau^{t+1} &amp;amp;= \arg\max_{\boldsymbol \tau} Q(\boldsymbol \theta | \boldsymbol \theta^t ) \cr
&amp;amp;= \arg\max_\tau \left ( \left [ \sum_{i=1}^n \mathbf{T}_{i,1}^t \right ] \log \tau_1 + \left [ \sum_{i=1}^n T_{2,i}^t \right ] \log \tau_2 \right ) \end{align}$$&lt;&#x2F;p&gt;
&lt;p&gt;This has the same for as the Maximum Likelihood Estimate for the binomial distribution, so the update rule is:&lt;&#x2F;p&gt;
&lt;p&gt;$$\tau_j^{t+1} = \frac{\sum_{i=1}^n \mathbf{T}_{j,i}^t }{\sum_{i=1}^n \left ( \mathbf{T}_{1,i}^t + \mathbf{T}_{2,i}^t \right )} = \frac{1}{n} \sum_{i=1}^n  \mathbf{T}_{j,i}^t$$&lt;&#x2F;p&gt;
&lt;p&gt;We now wish to estimate \(\mu_1\) and \(\sigma_1\):&lt;&#x2F;p&gt;
&lt;p&gt;$$\begin{align}(\mu_1^{t+1} , \sigma_1^{t+1} ) &amp;amp;= \arg\max_{\mu_1, \sigma_1} Q ( \boldsymbol \theta | \boldsymbol \theta^t) \cr
&amp;amp;= \arg\max_{\mu_1 , \sigma_1} \sum_{i=1}^n \mathbf{T}_{1,i}^t \left ( - \log(\sigma_1 ) - \frac{1}{2 \sigma_1 ^2 } (x_i-\mu_1)^2 \right )\end{align}$$&lt;&#x2F;p&gt;
&lt;p&gt;This has the same form as a weighted Maximum Likelihood Estimator for a normal distribution, so the update rules are as follows:&lt;&#x2F;p&gt;
&lt;p&gt;$$\mu_1^{t+1} = \frac{\sum_{i=1}^n \mathbf{T}_{1,i}^t X_i}{\sum_{i=1}^n T_{1,i}^t }$$&lt;&#x2F;p&gt;
&lt;p&gt;$$\sigma_1^{t+1} = \frac{\sum_{i=1}^n \mathbf{T}_{1,i}^t \left (X_i - \mu_1^{t+1} \right ) ^2}{\sum_{i=1}^n \mathbf{T}_{1,i}^t}$$&lt;&#x2F;p&gt;
&lt;p&gt;And equally for the second Gaussian (note the updates are independent):&lt;&#x2F;p&gt;
&lt;p&gt;$$\mu_2^{t+1} = \frac{\sum_{i=1}^n \mathbf{T}_{2,i}^t X_i}{\sum_{i=1}^n T_{2,i}^t }$$&lt;&#x2F;p&gt;
&lt;p&gt;$$\sigma_2^{t+1} = \frac{\sum_{i=1}^n \mathbf{T}_{2,i}^t \left (X_i - \mu_2^{t+1} \right ) ^2}{\sum_{i=1}^n \mathbf{T}_{2,i}^t}$$&lt;&#x2F;p&gt;
&lt;p&gt;We carry out these updates alternately until the log-likelihood converges.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;interactive-example-for-2-clusters-in-1d&quot;&gt;Interactive example for 2 clusters in 1D&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;object data=&quot;em1ex.html&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;Could not load plot.&lt;&#x2F;object&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Slide the slider to change the iteration number (shown in the title).&lt;&#x2F;p&gt;
&lt;p&gt;The full code is available in &lt;a href=&quot;http:&#x2F;&#x2F;nbviewer.ipython.org&#x2F;github&#x2F;jamesmcm&#x2F;jamesmcm.github.io&#x2F;blob&#x2F;source&#x2F;source&#x2F;notebooks&#x2F;EM1Dfinal.ipynb&quot;&gt;an IPython notebook here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;extension&quot;&gt;Extension&lt;&#x2F;h2&gt;
&lt;p&gt;This example  can also be extended to larger numbers of dimensions (though using a Gaussian Mixture Model directly in a high dimensional space is unadvisable), and to any number of Gaussians. In this case the variances become covariance matrices and linear algebra is necessary, but the changes are straightforward.&lt;&#x2F;p&gt;
&lt;p&gt;Here is an example for a mixture of 4 Gaussians in 2D:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;object data=&quot;EM2dtest2.html&quot; width=&quot;800&quot; height=&quot;600&quot;&gt;Could not load plot.&lt;&#x2F;object&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Slide the slider to change the iteration number (shown in the title).&lt;&#x2F;p&gt;
&lt;p&gt;The code is available in an &lt;a href=&quot;http:&#x2F;&#x2F;nbviewer.ipython.org&#x2F;github&#x2F;jamesmcm&#x2F;jamesmcm.github.io&#x2F;blob&#x2F;source&#x2F;source&#x2F;notebooks&#x2F;EM2dGMMfinal.ipynb&quot;&gt;IPython notebook here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;The EM algorithm is very useful for optimising the parameters of a model with latent variables. Example applications of this, include clustering and hidden Markov models.&lt;&#x2F;p&gt;
&lt;p&gt;Note however, that it can be prone to overfitting, and good initialisation is critical due to the presence of many local maxima in the likelihood function. Note the algorithm can also be extended to find Maximum A Posteriori estimates instead of Maximum Likelihood estimates.&lt;&#x2F;p&gt;
&lt;p&gt;One major drawback is that we must choose the cardinality of the latent space (i.e. the number of Gaussians in the mixture, in this example) a priori. There are some Bayesian methods to avoid this, which may be the topic of a future blog post.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;text&quot;&gt;Text&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Chapter 9 of Bishop&#x27;s &lt;it&gt;Pattern Recognition and Machine Learning&lt;&#x2F;it&gt; covers the EM algorithm in detail, including this example.&lt;&#x2F;li&gt;
&lt;li&gt;Chapter 19.2.2 of Koller and Friedman&#x27;s &lt;it&gt;Probabilistic Graphical Models&lt;&#x2F;it&gt; also covers the EM algorithm with respect to Bayesian networks.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Expectation%E2%80%93maximization_algorithm&quot;&gt;Wikipedia article&lt;&#x2F;a&gt; also covers this example.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.seanborman.com&#x2F;publications&#x2F;EM_algorithm.pdf&quot;&gt;This article&lt;&#x2F;a&gt; by Sean Borman covers the theoretical justification for the EM algorithm.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;video&quot;&gt;Video&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;The EM algorithm is covered within the &amp;quot;Learning with Incomplete Data&amp;quot; section of &lt;a href=&quot;https:&#x2F;&#x2F;class.coursera.org&#x2F;pgm-2012-002&#x2F;lecture&quot;&gt;Daphne Koller&#x27;s Coursera course on Probabilistic Graphical Models&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The EM algorithm is also covered in &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=AnbiNaVp3eQ&amp;amp;list=PLD0F06AA0D2E8FFBA&amp;amp;index=116&quot;&gt;some of MathematicalMonk&#x27;s YouTube videos&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;other&quot;&gt;Other&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Many thanks to &lt;a href=&quot;https:&#x2F;&#x2F;jakevdp.github.io&#x2F;blog&#x2F;2013&#x2F;12&#x2F;05&#x2F;static-interactive-widgets&#x2F;&quot;&gt;this blog post&lt;&#x2F;a&gt; for the implementation of static IPython widgets for Javascript.&lt;&#x2F;li&gt;
&lt;li&gt;Many thanks to &lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;12321306&#x2F;1472461&quot;&gt;this StackOverflow answer&lt;&#x2F;a&gt; for the code to plot confidence intervals for arbitrary 2-dimensional Gaussians.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Resources to learn Spanish</title>
		<published>2014-08-21T00:00:00+00:00</published>
		<updated>2014-08-21T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jamesmcm.github.io/blog/spresource/" type="text/html"/>
		<id>https://jamesmcm.github.io/blog/spresource/</id>
		<content type="html">&lt;p&gt;In this post I list some resources which have helped me to learn Spanish, I hope that they will help you too!&lt;&#x2F;p&gt;
&lt;p&gt;All of the listed resources are (mostly) free, except News In Slow Spanish (and the Latino version), and clearly the textbooks, TV series and films.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;in-the-beginning&quot;&gt;In the beginning...&lt;&#x2F;h2&gt;
&lt;p&gt;If you have just started learning Spanish, I would recommend focussing on the grammar and some basic and conversational vocabulary, because with this down, it is easy to learn more vocabulary through films and speaking to other Spanish speakers. One other thing, is not to get hung up on learning Spanish from Spain or from Latin America specifically, in the end you will want to be familiar with all of them.&lt;&#x2F;p&gt;
&lt;p&gt;To this end, I recommend the following resources:
&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.duolingo.com&#x2F;&quot;&gt;Duolingo&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;Duolingo is the best resource I&#x27;ve used for learning Spanish. It is &lt;strong&gt;free&lt;&#x2F;strong&gt; and provides a full course covering all of the basics for conversation. It took me about 6 months to complete from scratch (when I had no prior knowledge of Spanish).&lt;&#x2F;p&gt;
&lt;p&gt;It uses a method focussed on vocabulary, so sometimes you may need to look up grammatical concepts on your own, but the abundance of topics covered, mobile support and the ease of getting straight to learning definitely make it worthwhile!&lt;&#x2F;p&gt;
&lt;p&gt;Note this teaches Latin American Spanish, and so does not teach the use of &amp;quot;vosotros&amp;quot;, and note that despite teaching Latin American Spanish, it only teaches &amp;quot;tú&amp;quot; (and not &amp;quot;vos&amp;quot;).&lt;&#x2F;dd&gt;
&lt;dt&gt;&lt;strong&gt;Reddit user graaahh&#x27;s &lt;a href=&quot;http:&#x2F;&#x2F;issuu.com&#x2F;graaahh&quot;&gt;Spanish Study Guide&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;This is an excellent resource for grammar, and one of the best free resources for learning to read Spanish that I know of. To download it from issuu.com, first click the guide, then &amp;quot;Share&amp;quot;, and then &amp;quot;Download&amp;quot;.&lt;&#x2F;dd&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.studyspanish.com&#x2F;&quot;&gt;StudySpanish&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;This website has great resources for grammatical concepts especially, and makes an excellent beginner reference for Duolingo.&lt;&#x2F;dd&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.speakshop.org&#x2F;study-spanish&quot;&gt;SpeakShop grammar pages&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;This website also has some excellent pages on grammar. See the links on &amp;quot;Beginning Spanish Grammar&amp;quot;, &amp;quot;Intermediate Spanish Grammar&amp;quot; and &amp;quot;Advancd Spanish Grammar&amp;quot;.&lt;&#x2F;dd&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.veintemundos.com&#x2F;en&#x2F;&quot;&gt;Veinte Mundos&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;This website has good articles targeted different reading levels, and good accompanying resources to help.&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;youtube-videos&quot;&gt;YouTube videos&lt;&#x2F;h2&gt;
&lt;p&gt;YouTube also has many channels dedicated to teaching Spanish:
&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCItcQIzzVfhAg4sKJ5iCTPw&quot;&gt;LightSpeed Spanish&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;This YouTube channel has a huge number of excellent videos - with everything from basic lessons, vocabulary to grammar lessons and interviews with Spanish speakers. It really is brilliant, there is a &lt;a href=&quot;http:&#x2F;&#x2F;www.lightspeedspanish.co.uk&#x2F;spanish-lesson-table-contents&#x2F;&quot;&gt;full list of lessons here&lt;&#x2F;a&gt; - I especially recommend &amp;quot;El Aula&amp;quot;! Note that this teaches mainly Spanish from Spain.&lt;&#x2F;dd&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UC9yudInUYzMh9H4gJs4DrHg&quot;&gt;Butterfly Spanish&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;This YouTube channel is run by a Mexican girl who teaches Spanish. The level is often quite basic, but the videos are fun and informative.&lt;&#x2F;dd&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UC2-lKlnIdzq6-e-zwU34YJw&quot;&gt;Professor Jason Spanish&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;These videos are excellent for covering grammatical concepts in detail, I&#x27;d definitely recommend them if you want a more thorough educational approach.&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;podcasts&quot;&gt;Podcasts&lt;&#x2F;h2&gt;
&lt;p&gt;There are many great podcasts available on Spotify and other platforms:
&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.newsinslowspanish.com&#x2F;&quot;&gt;News In Slow Spanish&lt;&#x2F;a&gt; (and the &lt;a href=&quot;http:&#x2F;&#x2F;www.newsinslowspanish.com&#x2F;latino&#x2F;?force_switch&quot;&gt;Latino version&lt;&#x2F;a&gt;)&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;I really like this podcast, however note that, unlike the previous resources, you have to pay to get access to the full resources and podcasts. I like News In Slow Spanish Latino (and actually haven&#x27;t listened to the original), so I&#x27;d definitely recommend it anyway. The prices vary depending on the content chosen but you&#x27;re looking at around $13 a month or so. Gift subscriptions are also available, and you can preview some podcasts for free.&lt;&#x2F;dd&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.lightspeedspanish.co.uk&#x2F;spanish-lesson-table-contents&#x2F;&quot;&gt;LightSpeed Spanish&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;Although, this was mentioned above, it&#x27;s worth noting that all of the YouTube videos are also available as podcasts, completely free. And these podcasts deserve to be mentioned twice! There are also work packs available for purchase (with free samples), and they offer personal lessons in Skype.&lt;&#x2F;dd&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.notesinspanish.com&#x2F;&quot;&gt;Notes in Spanish&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;This is very similar to LightSpeed Spanish, though with more focus on conversations and pronunciation, and has following analyses in English. It seems very good and all the podcasts are also available for free. Note this mainly teaches Spanish from Spain&lt;&#x2F;dd&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;http:&#x2F;&#x2F;radiolingua.com&#x2F;coffeebreakspanish&#x2F;&quot;&gt;Coffee Break Spanish&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;This is a podcast for beginners, with small interviews followed by explanations in English. For the free podcasts, click the &amp;quot;Free Lessons&amp;quot; in the navigation bar on the website. Note season 3 is more advanced and known as &amp;quot;Showtime Spanish&amp;quot; (although currently named inconsistently on the website). This has a somewhat similar structure but with more Spanish speaking - I found it to be useful, but not as good as News In Slow Spanish and LightSpeed Spanish in my opinion (also Showtime Spanish has an awful theme song!) - note this teaches mainly Spanish from Spain.&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;http:&#x2F;&#x2F;spanishobsessed.com&#x2F;&quot;&gt;Spanish Obsessed&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;These podcasts are produced by an Englishman and a Colombian, there are four in total, aimed at different levels of ability.&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;online-communities&quot;&gt;Online Communities&lt;&#x2F;h2&gt;
&lt;p&gt;Online communities provide a great way to practice by writing directly
to others:
&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.interpals.net&#x2F;&quot;&gt;Interpals&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;This website is incredible for finding people to speak with in Skype, and write to. It really is one of the best resources I&#x27;ve found for helping with conversational skills.&lt;&#x2F;dd&gt;
&lt;dt&gt;**&lt;a href=&quot;http:&#x2F;&#x2F;www.hellotalk.com&#x2F;&quot;&gt;HelloTalk&lt;&#x2F;a&gt; **(mobile only)****&lt;&#x2F;dt&gt;
&lt;dd&gt;This mobile app is a bit like Interpals, with an interface like WhatsApp. There are lot of users, and the easy-to-use voice chat is useful, but I think it&#x27;s harder to have long conversations writing from a mobile, and prefer Interpals for that reason. But it&#x27;s still a good, free application.&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;
&lt;dt&gt;&lt;strong&gt;Reddit&lt;&#x2F;strong&gt;&lt;&#x2F;b&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;The subreddits &lt;a href=&quot;http:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;learnspanish&#x2F;&quot;&gt;&#x2F;r&#x2F;learnspanish&lt;&#x2F;a&gt;, &lt;a href=&quot;http:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;Spanish&#x2F;&quot;&gt;&#x2F;r&#x2F;Spanish&lt;&#x2F;a&gt; y &lt;a href=&quot;http:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;languagelearning&#x2F;&quot;&gt;&#x2F;r&#x2F;languagelearning&lt;&#x2F;a&gt; are very useful for discussing the language. There are also specific subreddits for some countries such as &lt;a href=&quot;http:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;mexico&#x2F;&quot;&gt;&#x2F;r&#x2F;mexico&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;spain&#x2F;&quot;&gt;&#x2F;r&#x2F;spain&lt;&#x2F;a&gt; for example.&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;online-courses&quot;&gt;Online Courses&lt;&#x2F;h2&gt;
&lt;p&gt;Online courses are a great way of getting rigorous feedback on common
mistakes:
&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.coursera.org&#x2F;&quot;&gt;Coursera&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;Coursera has many courses available in Spanish. I completed &lt;a href=&quot;https:&#x2F;&#x2F;www.coursera.org&#x2F;course&#x2F;escrituraesp&quot;&gt;this course&lt;&#x2F;a&gt; and would definitely recommend it. It helped a lot with more formal writing. On Coursera you can see the future sessions and sign up or add it to your watchlist if none are currently available. In this course you can get a certificate for free, but have to pay for the verified certificate (with a remotely monitored exam, etc.). I also recommend looking at the other courses in Spanish on Coursera. I cannot recommend this website enough, it has changed my life completely.&lt;&#x2F;dd&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.miriadax.net&#x2F;&quot;&gt;MiríadaX&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;MiríadaX is like a Spanish version of Coursera, and so has many courses in Spanish. However, note that you must pay after completing the course in order to receive a certificate (but can complete the course for free). I completed &lt;a href=&quot;https:&#x2F;&#x2F;www.miriadax.net&#x2F;web&#x2F;espanol-salamanca-a2&quot;&gt;this course in A2 Spanish&lt;&#x2F;a&gt;. Most of the courses are from Spain, and so in Spanish from Spain.&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reading&quot;&gt;Reading&lt;&#x2F;h2&gt;
&lt;p&gt;Reading articles helps a lot to grow vocabulary over time:
&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.monde-diplomatique.es&#x2F;&quot;&gt;Le Monde Diplomatique en Español&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;This magazine has a lot of great, detailed articles. Unfortunately it&#x27;s quite expensive to subscribe outside of Spain, and I believe they still don&#x27;t sell an electronic version. Here is &lt;a href=&quot;http:&#x2F;&#x2F;hcalvospina.free.fr&#x2F;spip.php?article515&quot;&gt;an example article&lt;&#x2F;a&gt; which was also published in more detail in Le Monde, about the period of political violence in Colombia.&lt;&#x2F;dd&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.farkastranslations.com&#x2F;bilingual_books.php&quot;&gt;Farkas Translations&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;This website provides side-by-side translations of some out-of-copyright books, sourced from various sources (some less reliable than others). It can be quite good for comparing more idiomatic expressions.&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reference-resources&quot;&gt;Reference resources&lt;&#x2F;h2&gt;
&lt;p&gt;References are great for checking conjugations and usage:
&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.spanishdict.com&#x2F;&quot;&gt;SpanishDict&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;This dictionary website is invaluable, both for definitions and conjugations (and pronunciation!).&lt;&#x2F;dd&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.wordreference.com&#x2F;&quot;&gt;WordReference&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;This website is also a great dictionary (and thesaurus), with more of a focus on examples.&lt;&#x2F;dd&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.linguee.es&#x2F;espanol-ingles&#x2F;&quot;&gt;Linguee&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;This website lets you look up phrases, and shows side-by-side translations from reliable sources (European documents, universities, etc.). This is amazing for checking the idiomatic ways of phrasing things.&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;textbooks&quot;&gt;Textbooks&lt;&#x2F;h2&gt;
&lt;p&gt;Textbooks can also be a great resource to ensure you have no gaps in
your knowledge:
&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.co.uk&#x2F;Colloquial-Spanish-Latin-America-Beginners&#x2F;dp&#x2F;0415237866&quot;&gt;Colloquial Spanish of Latin America&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;I found this book to be good for revising the grammar, it also has good listening exercises. Although note that despite being &amp;quot;Spanish of Latin America&amp;quot; it does not cover the use of &amp;quot;vos&amp;quot; much (like Duolingo).&lt;&#x2F;dd&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.amazon.com&#x2F;Spanish-Reading-A-Self-Instructional-Course&#x2F;dp&#x2F;0764103334&quot;&gt;Spanish For Reading&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;This book is a great (reasonably concise) introduction to Spanish grammar and reading, it makes a good companion to Duolingo.&lt;&#x2F;dd&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;http:&#x2F;&#x2F;elblogdegramatica.blogspot.de&#x2F;&quot;&gt;El blog de gramática&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;This is an excellent blog covering the nuances of Spanish grammar.&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;other-resources&quot;&gt;Other resources&lt;&#x2F;h2&gt;
&lt;p&gt;This post is not meant to be a fully comprehensive collection of resources, but just ones which I believe others may find useful. Here are some other resources which I haven&#x27;t put in the sections above because I didn&#x27;t find them so useful.
&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.rosettastone.co.uk&#x2F;&quot;&gt;Rosetta Stone&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;This software uses the Pimsleur method (i.e. focussing on vocabulary, not grammar), a lot like Duolingo but with a large pricetag attached. Honestly, I do not think it is worth the money under any circumstances.&lt;&#x2F;dd&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.michelthomas.com&#x2F;learn-spanish.php&quot;&gt;Michel Thomas CDs&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;Some people really recommend this too, but I didn&#x27;t think it was worth the money, and I also prefer to listen to things either fully in Spanish or in English. Due to this, I really like News In Slow Spanish and LightSpeed Spanish for their clear Spanish podcasts. But perhaps it could be worthwhile.&lt;&#x2F;dd&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;user&#x2F;LanguageTransfer&quot;&gt;Language Transfer: Complete Spanish YouTube series&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;Some people really recommend this course too, it&#x27;s apparently similar to the Michel Thomas CDs, but is free. However, I found the speaker&#x27;s accent, and the mixing of Spanish and English very distracting.&lt;&#x2F;dd&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;channel&#x2F;UCmcAqs44NIamvLO7DD_8bPQ&quot;&gt;Sra. Westerman&#x27;s YouTube Channel&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;This YouTube channel has a lot of videos on very basic Spanish. But the videos were so basic that I think the concepts are better covered by other resources and YouTube channels listed here.&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.italki.com&#x2F;&quot;&gt;italki&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;italki is a platform for people to offer language lessons via the internet. It is usually quite cheap, but I&#x27;m not sure it&#x27;s really worth the effort since you could just find native speakers on Interpals.&lt;&#x2F;dd&gt;
&lt;dt&gt;&lt;strong&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.busuu.com&#x2F;enc&#x2F;&quot;&gt;Busuu&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;dt&gt;
&lt;dd&gt;If you are interested in a similar alternative to Duolingo, Busuu also offers similar resources for Spanish, unfortunately one must pay to use the majority of the services - but it also provides checks of writing and voice recording, as well as specific grammar lessons. I personally didn&#x27;t think it offered sufficiently more than Duolingo.&lt;&#x2F;dd&gt;
&lt;&#x2F;dl&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;In conclusion, I recommend the following plan of action:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;beginner&quot;&gt;Beginner:&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Finish the free Duolingo Spanish course. The clear goal and clear path to achieve it makes it much easier to stay focussed on learning the new concepts and vocabulary.&lt;&#x2F;li&gt;
&lt;li&gt;Pass the free Duolingo Spanish exam. This ensures you remember the most important concepts from the course. Note the exam is &amp;quot;bought&amp;quot; with &amp;quot;lingots&amp;quot; you earn during the course.&lt;&#x2F;li&gt;
&lt;li&gt;(Optional) Supplement this with reading on grammar, for example, in the Spanish for Reading textbook, or the SpeakShop and StudySpanish websites.&lt;&#x2F;li&gt;
&lt;li&gt;(Optional) Listen to beginner podcasts and YouTube videos, such as Butterfly Spanish, the early LightSpeed Spanish and Notes In Spanish podcasts and Coffee Break Spanish.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;intermediate&quot;&gt;Intermediate:&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use Interpals to speak with native speakers, through text and Skype. This is an excellent resource to practice speaking, and learn more about Spanish&#x2F;Latin American culture (you can definitely get a lot of movie recommendations!)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Watch some TV shows and films in Spanish, with Spanish subtitles (you can get free subtitles from &lt;a href=&quot;http:&#x2F;&#x2F;www.opensubtitles.org&#x2F;en&#x2F;search&quot;&gt;OpenSubtitles.org&lt;&#x2F;a&gt;). I started out by watching 24 in Spanish, this was a great choice as the dialog is usually not so complicated. You could also watch Disney&#x2F;Pixar films, and action films, without such a focus on complex dialog.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Play video games in Spanish. This works excellently with fully voiced games such as Skyrim, where it helps create immersion and provides the easy ability to repeat words. Though note that they are usually dubbed in Spanish from Spain. The Steam page of a game will tell you in which languages it is available.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Read childrens&#x27; books and young adult fiction in Spanish to learn more vocabulary. &lt;a href=&quot;http:&#x2F;&#x2F;www.childrenslibrary.org&#x2F;icdl&#x2F;SimpleSearchCategory?ids=&amp;amp;pnum=1&amp;amp;cnum=1&amp;amp;text=&amp;amp;ilangcode=es&amp;amp;langid=61&amp;amp;ilang=English&quot;&gt;Childrens&#x27; Library.org&lt;&#x2F;a&gt; has a lot of free childrens&#x27; books in Spanish.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;advanced&quot;&gt;Advanced:&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Watch native Spanish films and shows without subtitles. I would recommend &amp;quot;Abre Los Ojos&amp;quot; an excellent film from Spain (yes, with Penelope Cruz), and &amp;quot;No Se Aceptan Devoluciones&amp;quot; a brilliant comedy film from Mexico.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Meet native speakers in your city with &amp;quot;tandem&amp;quot; language exchanges (search in Facebook, for example).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Read classic authors who wrote in Spanish, such as Gabriel García Márquez, Pablo Neruda, and so on. &lt;a href=&quot;http:&#x2F;&#x2F;www.gutenberg.org&#x2F;browse&#x2F;languages&#x2F;es&quot;&gt;Project Gutenberg&lt;&#x2F;a&gt; has a huge archive of out-of-copyright books written in Spanish for example.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;concluding-the-conclusion&quot;&gt;Concluding the conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;I hope these resources help others to learn Spanish too, I really think they provide enough to learn Spanish to a fluent level (and definitely conversational), at little to no cost. We are incredibly lucky to live in a time when online education is so easy, and a huge number of resources are freely available. Take advantage of it!&lt;&#x2F;p&gt;
&lt;p&gt;Finally, please note these are my own opinions. Perhaps you might prefer Busuu to Duolingo, etc. - so if you don&#x27;t get on well with the resources I recommended, look at the others too.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Introduction to Mendelian Randomization</title>
		<published>2014-08-17T00:00:00+00:00</published>
		<updated>2014-08-17T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jamesmcm.github.io/blog/mendelian/" type="text/html"/>
		<id>https://jamesmcm.github.io/blog/mendelian/</id>
		<content type="html">&lt;p&gt;Mendelian Randomization is an approach to test for a &lt;strong&gt;causal&lt;&#x2F;strong&gt; effect from &lt;strong&gt;observational&lt;&#x2F;strong&gt; data in the presence of certain &lt;strong&gt;confounding&lt;&#x2F;strong&gt; factors.
It uses the measured variation of genes (of known function) to &lt;strong&gt;bound&lt;&#x2F;strong&gt; the causal effect of a modifiable exposure (environment) on a phenotype (disease). The fundamental idea is that the genotypes are &lt;strong&gt;randomly assigned&lt;&#x2F;strong&gt; (due to recombination in meiosis under certain assumptions), and this allows them to be used as an &lt;strong&gt;instrumental variable&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Here is the Directed Acyclic Graph (&lt;strong&gt;DAG&lt;&#x2F;strong&gt;) for the basic set-up. Here &lt;strong&gt;G&lt;&#x2F;strong&gt; is the observed genotype (i.e. the presence of a SNP), &lt;strong&gt;X&lt;&#x2F;strong&gt; is an environmental exposure, &lt;strong&gt;U&lt;&#x2F;strong&gt; is a (possible) unobserved confounder and &lt;strong&gt;Y&lt;&#x2F;strong&gt; is the phenotype (i.e. disease status). This will be explained in detail later.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;mendelian&#x2F;simpmr.png&quot; alt=&quot;Simple Mendelian Randomization&quot; title=&quot;Simple Mendelian Randomization&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;motivation&quot;&gt;Motivation&lt;&#x2F;h2&gt;
&lt;p&gt;Mendelian Randomization is a useful technique precisely because it allows for causal inference from &lt;strong&gt;observational data&lt;&#x2F;strong&gt;. &lt;strong&gt;Randomised Control Trials&lt;&#x2F;strong&gt; (RCTs) are the gold standard for causal inference, but is not always ethical or possible to carry out RCTs. For example, we cannot randomly assign a lifetime of heavy smoking (or non-smoking) to groups of individuals. This leads to a need to use observational data, however this requires many &lt;strong&gt;assumptions&lt;&#x2F;strong&gt;. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;instrumental-variables-ivs&quot;&gt;Instrumental Variables (IVs)&lt;&#x2F;h2&gt;
&lt;p&gt;In the previous &lt;strong&gt;DAG&lt;&#x2F;strong&gt;, &lt;strong&gt;G&lt;&#x2F;strong&gt; is the &lt;strong&gt;instrumental variable&lt;&#x2F;strong&gt; (or instrument), because it affects &lt;strong&gt;Y&lt;&#x2F;strong&gt; only through &lt;strong&gt;X&lt;&#x2F;strong&gt; (that is, exclusively, no other path may exist). Therefore, under certain &lt;strong&gt;assumptions&lt;&#x2F;strong&gt; (to be explained later), if &lt;strong&gt;G&lt;&#x2F;strong&gt; is correlated with &lt;strong&gt;Y&lt;&#x2F;strong&gt; then we can infer the edge &lt;strong&gt;X -&amp;gt; Y&lt;&#x2F;strong&gt; (note that &lt;strong&gt;X&lt;&#x2F;strong&gt; must be correlated with &lt;strong&gt;G&lt;&#x2F;strong&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Now we will consider an example application of instrumental variables, for a hypothetical investigation of the effect of smoking on lung cancer.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;mendelian&#x2F;smoking.png&quot; alt=&quot;Smoking Policy Example&quot; title=&quot;Smoking Policy Example&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If the &lt;strong&gt;assumptions&lt;&#x2F;strong&gt; of the instrumental variable method are met, then if we observe that an increase in tax leads to a reduction in lung cancer, then one can infer that smoking is a &amp;quot;cause&amp;quot; of lung cancer (though perhaps indirectly, i.e. it&#x27;s not smoking directly that causes cancer but the build-up of tar in the lungs, etc.).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;assumptions-of-the-instrumental-variables-method&quot;&gt;Assumptions of the Instrumental Variables method&lt;&#x2F;h2&gt;
&lt;p&gt;Assumptions are necessary in all areas of statistics, however it is important to know what assumptions we are making and whether they hold true.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;z-x-must-exist&quot;&gt;Z -&amp;gt; X must exist&lt;&#x2F;h3&gt;
&lt;p&gt;We must know &lt;strong&gt;a priori&lt;&#x2F;strong&gt; that the causal direction is &lt;strong&gt;Z -&amp;gt; X&lt;&#x2F;strong&gt; and not &lt;strong&gt;X -&amp;gt; Z&lt;&#x2F;strong&gt;. This is what makes the causal structure unique and &lt;strong&gt;identifiable&lt;&#x2F;strong&gt;. Note this does not mean that &lt;strong&gt;Z&lt;&#x2F;strong&gt; has to be the &amp;quot;true&amp;quot; cause of &lt;strong&gt;X&lt;&#x2F;strong&gt;. For example, if &lt;strong&gt;Z&lt;&#x2F;strong&gt; is a SNP, we can choose a SNP in linkage disequilibrium with &lt;strong&gt;Z&lt;&#x2F;strong&gt;, so long as it is independent of all of the other variables, but still correlated with &lt;strong&gt;X&lt;&#x2F;strong&gt;. Note the more correlated that &lt;strong&gt;Z&lt;&#x2F;strong&gt; is with &lt;strong&gt;X&lt;&#x2F;strong&gt;, the better the power will be (i.e. less data required for significant results), if it is not correlated, it cannot be used as an instrumental variable.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;mendelian&#x2F;snpld.png&quot; alt=&quot;Z to X must exist&quot; title=&quot;Z to X must exist&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;z-must-be-independent-of-u&quot;&gt;Z must be independent of U&lt;&#x2F;h3&gt;
&lt;p&gt;No factor can affect both the instrument and the effects. For example, there cannot be a factor that causes both higher tobacco taxes and less cancer (e.g. if we were comparing rates in different cancers between countries, national health awareness could be such a factor).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;mendelian&#x2F;noug.png&quot; alt=&quot;Z must be independent of U&quot; title=&quot;Z must be independent of U&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;no-z-y&quot;&gt;No Z -&amp;gt; Y&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Z&lt;&#x2F;strong&gt; cannot directly affect &lt;strong&gt;Y&lt;&#x2F;strong&gt; (or indirectly, except through &lt;strong&gt;X&lt;&#x2F;strong&gt;). I.e. there cannot exist any other mechanisms through which &lt;strong&gt;Z&lt;&#x2F;strong&gt; affects &lt;strong&gt;Y&lt;&#x2F;strong&gt; (i.e. high tobacco tax increases substance abuse, leading to higher rates of cancer).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;mendelian&#x2F;nozy.png&quot; alt=&quot;No Z to Y&quot; title=&quot;No Z to Y&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;faithfulness&quot;&gt;Faithfulness&lt;&#x2F;h3&gt;
&lt;p&gt;Faithfulness is the assumption that the true underlying DAG will manifest itself in the &lt;strong&gt;observed data&lt;&#x2F;strong&gt; - that is, that the causal effects will not &lt;strong&gt;cancel out&lt;&#x2F;strong&gt;. This is a reasonable assumption, because the contrary would require very specific parameters.&lt;&#x2F;p&gt;
&lt;p&gt;However, note that if relations are deterministic, the implied conditional independencies of the DAG do not hold true, and the assumption of faithfulness is violated. But we will not concern ourselves with this.&lt;&#x2F;p&gt;
&lt;p&gt;Also note that, in practice, the &lt;strong&gt;sample size&lt;&#x2F;strong&gt; is very important in testing the significance of the correlations&#x2F;independencies in the data.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;summary-of-assumptions&quot;&gt;Summary of assumptions&lt;&#x2F;h3&gt;
&lt;p&gt;This DAG summarizes the necessary assumptions for the use of instrumental variables:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;mendelian&#x2F;fulldagass.png&quot; alt=&quot;DAG with assumptions&quot; title=&quot;DAG with assumptions&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mendelian-randomization&quot;&gt;Mendelian Randomization&lt;&#x2F;h2&gt;
&lt;p&gt;The method of Mendelian Randomization was first introduced in: &lt;em&gt;Apolipoprotein E isoforms, serum cholesterol, and cancer.&lt;&#x2F;em&gt;, Katan MB (1986).&lt;&#x2F;p&gt;
&lt;p&gt;At the time, epidemiologists were wondering whether low serum cholesterol levels increase the risk of cancer. They were known to be correlated, but it could be that latent tumors caused the lower cholesterol levels (i.e. reverse causation), or that both cancer risk and cholesterol levels were affected by another factor, such as diet (i.e. confounding).&lt;&#x2F;p&gt;
&lt;p&gt;However, Katan noticed that patients with Abetalipoproteinemia (a genetic disease that leads to the inability to absorb cholesterol), did not appear predisposed to cancer, despite the predisposition to lower levels of serum cholesterol.&lt;&#x2F;p&gt;
&lt;p&gt;This led Katan to the idea of finding a large group of individuals genetically predisposed to lower cholesterol levels. These individuals are assumed to be the same with respect to other possible confounders (social class, etc.) and so the presence of the cholesterol-affecting allele can be used as an instrumental variable - this is &lt;strong&gt;Mendelian Randomization&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The Apolipoprotein E (&lt;strong&gt;ApoE&lt;&#x2F;strong&gt;) gene was known to affect serum cholesterol, with the &lt;strong&gt;ApoE2&lt;&#x2F;strong&gt; variant being associated with lower levels. Many individuals carry ApoE2 variant and so have &lt;strong&gt;lower serum cholesterol levels&lt;&#x2F;strong&gt; from birth.&lt;&#x2F;p&gt;
&lt;p&gt;Since genes are &lt;strong&gt;randomly assigned&lt;&#x2F;strong&gt; during meiosis (due to recombination), ApoE2 carriers should not be different from ApoE carriers in any other way (diet, etc.), so there is no confounding via the genome - note these are &lt;strong&gt;assumptions&lt;&#x2F;strong&gt;. It is this which allows the genotype to be used as an instrumental variable in this way (because it is akin to an intervention in a Randomised Control Trial).&lt;&#x2F;p&gt;
&lt;p&gt;Therefore if low serum cholesterol is really causal for cancer risk, the cancer patients should have more ApoE2 alleles than the controls - if not then the levels would be similar in both groups.&lt;&#x2F;p&gt;
&lt;p&gt;Katan only provided the suggestion, but the method has since been used for many different analyses with some success, such as the link between blood pressure and stroke risk. However, some conclusions have later been disproved by Randomised Control Trials. To understand why, we must consider the &lt;strong&gt;biological assumptions&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;biological-assumptions&quot;&gt;Biological Assumptions&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;panmixia&quot;&gt;Panmixia&lt;&#x2F;h3&gt;
&lt;p&gt;Recall the assumption that the genotype is randomly assigned - this implies &lt;strong&gt;panmixia&lt;&#x2F;strong&gt;. That is, there is &lt;strong&gt;no selective breeding&lt;&#x2F;strong&gt; (so random mating). This implies that all recombination of alleles is possible.&lt;&#x2F;p&gt;
&lt;p&gt;In our DAG, this means that &lt;strong&gt;G&lt;&#x2F;strong&gt; is not influenced by &lt;strong&gt;Y&lt;&#x2F;strong&gt; (or any other variables). However, this assumption is not always entirely accurate, as demonstrated by &lt;strong&gt;Population Stratification&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;population-stratification&quot;&gt;Population Stratification&lt;&#x2F;h3&gt;
&lt;p&gt;Population Stratification is the &lt;strong&gt;systematic difference&lt;&#x2F;strong&gt; in allele frequencies between subpopulations, due to ancestry. For example, physical separation leads to &lt;strong&gt;non-random mating&lt;&#x2F;strong&gt;. This then leads to different &lt;strong&gt;genetic drift&lt;&#x2F;strong&gt; in different subpopulations (i.e. changes in allele frequency over time due to repeated random sampling).&lt;&#x2F;p&gt;
&lt;p&gt;This means that the genotype is &lt;strong&gt;not&lt;&#x2F;strong&gt; randomly assigned when considered across different sub-populations, a good example of this is with the difference in rates of lactose intolerance between Northern Europe and Asia.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;canalization&quot;&gt;Canalization&lt;&#x2F;h3&gt;
&lt;p&gt;Canalization refers to the variation in the &lt;strong&gt;robustness of phenotypes&lt;&#x2F;strong&gt; to changes in the genotype and environment.&lt;&#x2F;p&gt;
&lt;p&gt;The classic example is Waddington&#x27;s Drosophilia experiment. In the experiment, Drosophilia pupae were exposed to heat shock (i.e. a rapid increase in temperature). Eventually a Cross-veinless phenotype (no cross-veins in wings) was produced. However, by then selectively breeding the resulting flies for this phenotype, it eventually appears without heat shock.&lt;&#x2F;p&gt;
&lt;p&gt;This led to theory of organisms rolling downhill in to &amp;quot;canals&amp;quot; of the &lt;strong&gt;epigenetic landscape&lt;&#x2F;strong&gt; with development, becoming more robust to variation of the environment. We can think of it like an optimization problem which settles in local minima.&lt;&#x2F;p&gt;
&lt;p&gt;The exact biological&#x2F;molecular mechanisms of canalization are still unknown. With regards to Mendelian Randomization, it can act as a &lt;strong&gt;confounder&lt;&#x2F;strong&gt; between the genotype, environment and phenotype.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;no-pleiotropy&quot;&gt;No Pleiotropy&lt;&#x2F;h3&gt;
&lt;p&gt;Pleiotropy is the phenomena whereby one gene can affect many (even seemingly unrelated) phenotypes. Mendelian Randomisation makes the assumption of &lt;strong&gt;no pleiotropy&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;In this case, this means that we assume the genotype is only influencing the phenotype via the considered exposure. I.e. ApoE2 &lt;strong&gt;only&lt;&#x2F;strong&gt; affects serum cholesterol levels, and cannot affect cancer risk by other, unobserved means.&lt;&#x2F;p&gt;
&lt;p&gt;This is a big assumption, and &lt;strong&gt;prior knowledge&lt;&#x2F;strong&gt; is necessary. If possible, using multiple, independent SNPs which act through the same path, can help to alleviate this issue, because, if they are all consistent then it is unlikely that they would all have other pathways causing the same change in phenotype. But note that they must be independent, and so cannot be in Linkage Disequilibrium.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-real-dag&quot;&gt;The real DAG?&lt;&#x2F;h3&gt;
&lt;p&gt;Considering the above points, perhaps the true underlying DAG looks more like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;mendelian&#x2F;fulldagbio.png&quot; alt=&quot;Full DAG&quot; title=&quot;Full DAG&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Instrumental variables&lt;&#x2F;strong&gt; are a method to infer causal relations from &lt;strong&gt;observational data&lt;&#x2F;strong&gt;, given certain &lt;strong&gt;assumptions&lt;&#x2F;strong&gt;. This method is applied in Genetic Epidemiology with &lt;strong&gt;Mendelian Randomisation&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This approach has had some success, but the underlying biology still poses some problems with regards to the necessary assumptions. This leaves us with the following questions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Can we improve the &lt;strong&gt;robustness&lt;&#x2F;strong&gt; of the inference with more measurements of intermediate phenotypes? (such as gene methylation, RNAseq, proteomics measurements, etc.)?&lt;br &#x2F;&gt;
Some work has been done on this under the name of  multi-step Mendelian Randomisation.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Can we improve identification of appropriate &lt;strong&gt;instruments&lt;&#x2F;strong&gt;? (e.g. as whole genome sequencing makes it easier to identify population stratification)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>First Post</title>
		<published>2014-08-04T00:00:00+00:00</published>
		<updated>2014-08-04T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jamesmcm.github.io/blog/first/" type="text/html"/>
		<id>https://jamesmcm.github.io/blog/first/</id>
		<content type="html">&lt;p&gt;I&#x27;ve started this blog to save resources which have helped me in learning languages, concepts in statistics, and anything else which I think might help others too.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;I am currently a PhD student in Tübingen, Germany in &amp;quot;Machine Learning for Personalised Medicine&amp;quot;. I&#x27;m particularly interested in models combining genotypic and phenotypic measurements (such as gene expression, or methylation), in addition to the application of causal inference methods to justify causal conclusions from observational data, where possible.&lt;&#x2F;p&gt;
&lt;p&gt;I also intend to post summaries of my presentations and work here, as part of the &amp;quot;outreach&amp;quot; encouraged in my PhD programme.&lt;&#x2F;p&gt;
&lt;p&gt;I hope it will be useful to some others too!&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
