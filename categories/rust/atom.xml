<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>James McMurray&#x27;s blog - Rust</title>
    <subtitle>A technical blog about Rust, Linux and other topics.</subtitle>
    <link rel="self" type="application/atom+xml" href="https://jamesmcm.github.io/categories/rust/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://jamesmcm.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-11-17T00:00:00+00:00</updated>
    <id>https://jamesmcm.github.io/categories/rust/atom.xml</id>
    <entry xml:lang="en">
        <title>Building a Wifi-controlled car with Rust and ESP32</title>
        <published>2024-11-17T00:00:00+00:00</published>
        <updated>2024-11-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              James McMurray
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jamesmcm.github.io/blog/esp32-wifi-tank/"/>
        <id>https://jamesmcm.github.io/blog/esp32-wifi-tank/</id>
        
        <summary type="html">&lt;p&gt;In this post we will create a basic Wifi-controlled car with an ESP32
development board and ESP32-CAM camera module, and all of the code
written in Rust.&lt;&#x2F;p&gt;
&lt;p&gt;All of the code for this example is available on Github in my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;esp32_wifi_tank&quot;&gt;esp32_wifi_tank repo&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Beginner Rust ESP32 development - Snake</title>
        <published>2024-11-02T00:00:00+00:00</published>
        <updated>2024-11-02T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              James McMurray
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jamesmcm.github.io/blog/beginner-rust-esp32-lcdsnake/"/>
        <id>https://jamesmcm.github.io/blog/beginner-rust-esp32-lcdsnake/</id>
        
        <summary type="html">&lt;p&gt;In this post we will create a basic ESP32 project using Rust and espup.&lt;&#x2F;p&gt;
&lt;p&gt;We will write a Snake game to run on an ESP32 development board with a
connected OLED display and controlled with a joystick.&lt;&#x2F;p&gt;
&lt;p&gt;The code for this example is available on Github in my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;snake_rust_esp32&quot;&gt;snake_rust_esp32 repo&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>My First Clippy Lint</title>
        <published>2022-03-26T00:00:00+00:00</published>
        <updated>2022-03-26T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              James McMurray
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jamesmcm.github.io/blog/my-first-clippy-lint/"/>
        <id>https://jamesmcm.github.io/blog/my-first-clippy-lint/</id>
        
        <summary type="html">&lt;p&gt;Recently I wrote my first &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&quot;&gt;Clippy&lt;&#x2F;a&gt; lint. It was much easier to
implement and test than I had expected. In this post I&#x27;ll review the
process of creating or contributing to a Clippy lint, the implementation itself and
how this reflects Rust&#x27;s values of empowerment.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Writing a simple AWS Lambda Custom Runtime in Rust</title>
        <published>2020-10-24T00:00:00+00:00</published>
        <updated>2020-10-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              James McMurray
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jamesmcm.github.io/blog/lambda-runtime/"/>
        <id>https://jamesmcm.github.io/blog/lambda-runtime/</id>
        
        <summary type="html">&lt;p&gt;I was recently reading more about the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;lambda_runtime&quot;&gt;lambda_runtime crate&lt;&#x2F;a&gt;
and came across &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;awslabs&#x2F;aws-lambda-rust-runtime&#x2F;issues&#x2F;259&quot;&gt;this issue&lt;&#x2F;a&gt;
where it is mentioned that the &lt;code&gt;#[lambda]&lt;&#x2F;code&gt; procedural macro can be
misleading and cause problems if used naively.&lt;&#x2F;p&gt;
&lt;p&gt;In this post we will implement our own simple custom runtime for
AWS Lambda in Rust, and understand the reasons behind this issue.&lt;&#x2F;p&gt;
&lt;p&gt;The code used in this blog post is available on Github in
my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;micro_lambda&quot;&gt;micro_lambda repository&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>My Rust 2021 roadmap: crates, concision, and community</title>
        <published>2020-09-24T00:00:00+00:00</published>
        <updated>2020-09-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              James McMurray
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jamesmcm.github.io/blog/rust2021/"/>
        <id>https://jamesmcm.github.io/blog/rust2021/</id>
        
        <summary type="html">&lt;p&gt;The Rust core team recently released a &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2020&#x2F;09&#x2F;03&#x2F;Planning-2021-Roadmap.html&quot;&gt;call for blog posts&lt;&#x2F;a&gt; as part of
the 2021 roadmap for Rust. In this post I will detail my own experience
with Rust, and areas I&#x27;d like to
see improved during 2021.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Retrospective of my first useful Rust project</title>
        <published>2020-09-05T00:00:00+00:00</published>
        <updated>2020-09-05T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              James McMurray
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jamesmcm.github.io/blog/vopono/"/>
        <id>https://jamesmcm.github.io/blog/vopono/</id>
        
        <summary type="html">&lt;p&gt;This post is a retrospective of my first &quot;useful&quot; Rust project. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&quot;&gt;vopono&lt;&#x2F;a&gt;
is a Linux program to launch applications in temporary network
namespaces (managed by vopono), in order to run specific applications
through VPN connections, without affecting the rest of your system.&lt;&#x2F;p&gt;
&lt;p&gt;vopono is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&quot;&gt;available on Github&lt;&#x2F;a&gt; (and in the &lt;a href=&quot;https:&#x2F;&#x2F;aur.archlinux.org&#x2F;packages&#x2F;vopono&#x2F;&quot;&gt;AUR on Arch Linux&lt;&#x2F;a&gt;) and
licensed under the GPLv3 license (&lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;philosophy&#x2F;pragmatic.html&quot;&gt;see reasoning here&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ll consider the motivation and background to creating vopono, the
upsides and downsides of writing it in Rust (and existing issues), and
some points about starting new side projects in general. I hope this
helps new Rust programmers starting their own first projects, or for
other programmers to consider using Rust.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Serverless Data Ingestion with Rust and AWS SES</title>
        <published>2020-08-29T00:00:00+00:00</published>
        <updated>2020-08-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              James McMurray
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jamesmcm.github.io/blog/rust-ses/"/>
        <id>https://jamesmcm.github.io/blog/rust-ses/</id>
        
        <summary type="html">&lt;p&gt;In this post we will set up a simple, serverless data ingestion pipeline using Rust,
AWS Lambda and AWS SES with Workmail.&lt;&#x2F;p&gt;
&lt;p&gt;We will handle multiple types of
AWS events with one Lambda function, parse received emails
with the mailparse crate, and send email with SES and the lettre crate.&lt;&#x2F;p&gt;
&lt;p&gt;The complete code for this example is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;rust_ses_example&quot;&gt;available on GitHub here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>An introduction to Data Oriented Design with Rust</title>
        <published>2020-07-25T00:00:00+00:00</published>
        <updated>2020-07-25T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              James McMurray
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jamesmcm.github.io/blog/intro-dod/"/>
        <id>https://jamesmcm.github.io/blog/intro-dod/</id>
        
        <summary type="html">&lt;p&gt;In the post we will investigate the main concepts of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Data-oriented_design&quot;&gt;Data-oriented
Design&lt;&#x2F;a&gt; using Rust.&lt;&#x2F;p&gt;
&lt;p&gt;The source code for this example is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;data-oriented-example&quot;&gt;available on Github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Data Ingestion with Rust and AWS Lambda</title>
        <published>2020-04-19T00:00:00+00:00</published>
        <updated>2020-04-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              James McMurray
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://jamesmcm.github.io/blog/data-engineering-with-rust-and-aws-lambda/"/>
        <id>https://jamesmcm.github.io/blog/data-engineering-with-rust-and-aws-lambda/</id>
        
        <summary type="html">&lt;p&gt;In this post we will set up a very simple data ingestion process with Rust and AWS Lambda.&lt;&#x2F;p&gt;
&lt;p&gt;The complete code for this example is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;rust-lambda-test&quot;&gt;available on GitHub here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
</feed>
