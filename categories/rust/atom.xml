<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>James McMurray&#x27;s blog - Rust</title>
	<subtitle>A technical blog about Rust, Linux and other topics.</subtitle>
	<link href="https://jamesmcm.github.io/categories/rust/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://jamesmcm.github.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2022-03-26T00:00:00+00:00</updated>
	<id>https://jamesmcm.github.io/categories/rust/atom.xml</id>
	<entry xml:lang="en">
		<title>My First Clippy Lint</title>
		<published>2022-03-26T00:00:00+00:00</published>
		<updated>2022-03-26T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jamesmcm.github.io/blog/my-first-clippy-lint/" type="text/html"/>
		<id>https://jamesmcm.github.io/blog/my-first-clippy-lint/</id>
		<content type="html">&lt;p&gt;Recently I wrote my first &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&quot;&gt;Clippy&lt;&#x2F;a&gt; lint. It was much easier to
implement and test than I had expected. In this post I&#x27;ll review the
process of creating or contributing to a Clippy lint, the implementation itself and
how this reflects Rust&#x27;s values of empowerment.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Whilst writing some quick prototyping code back in October, I came
across an issue accidentally triggering a recursive definition of
the &lt;code&gt;Display&lt;&#x2F;code&gt; trait, with code similar to &lt;a href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=690cb006ae868d481ed830540bf1b52c&quot;&gt;the following&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;TestType;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;std::ops::Deref &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;TestType {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Target = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;deref&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Target {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;std::fmt::Display &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;TestType {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;std::fmt::Formatter) -&amp;gt; std::fmt::Result {
&lt;&#x2F;span&gt;&lt;span&gt;        write!(f, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;amp;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note the subtle issue of the single deref in &lt;code&gt;fmt()&lt;&#x2F;code&gt;, the code works
correctly if &lt;code&gt;&amp;amp;*self&lt;&#x2F;code&gt; is replaced with &lt;code&gt;&amp;amp;**self&lt;&#x2F;code&gt; since &lt;code&gt;self&lt;&#x2F;code&gt; is already
a reference inside the method. This mistake leads to infinite recursion since it tries to format
&lt;code&gt;self&lt;&#x2F;code&gt; with &lt;code&gt;Display&lt;&#x2F;code&gt; whilst inside the definition for &lt;code&gt;Display&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;However, the real issue was that neither rustc nor Clippy gave any
warning about the infinite recursion. rustc does have
its own lint for &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rustc&#x2F;lints&#x2F;listing&#x2F;warn-by-default.html#unconditional-recursion&quot;&gt;unconditional recursion&lt;&#x2F;a&gt;,
however in this case it is not triggered due to it not being a direct
call of the same function (i.e. there some layers of function calls due
to the formatting machinery).&lt;&#x2F;p&gt;
&lt;p&gt;Being so used to rustc and Clippy detecting all sorts of issues, this
was disappointing. So I created &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;issues&#x2F;7830&quot;&gt;an issue for Clippy&lt;&#x2F;a&gt;
and was referred to a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;issues&#x2F;2691&quot;&gt;much earlier issue&lt;&#x2F;a&gt; (from April 2018!)
for the underlying problem (the recursive Display implementation).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;implementing-the-lint&quot;&gt;Implementing the lint&lt;&#x2F;h2&gt;
&lt;p&gt;The rough procedure for implementing a new lint is as follows:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Decide on the lint type (early pass or late pass)&lt;&#x2F;li&gt;
&lt;li&gt;Write test cases (including positive and negative cases, and likely
false positives and negatives) - in this case they are UI tests since
we want to check that the user-facing output of the lint is correct.&lt;&#x2F;li&gt;
&lt;li&gt;Implementing the lint (checking similar lints for help and possible complications)&lt;&#x2F;li&gt;
&lt;li&gt;Checking test output is correct (i.e. only triggers where wanted)&lt;&#x2F;li&gt;
&lt;li&gt;Updating the expected test output and lint register&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There are two lint pass types - early and late. The early lint pass is
faster but has no access to type lookups (only the Abstract Syntax
Tree (AST)). In this case we need the type information, so we use the late
pass.&lt;&#x2F;p&gt;
&lt;p&gt;When we implement the lint pass, we write code that will be executed for
each matching node in the AST. Note that we can store state in the Lint
struct itself, which is useful for keeping track of where we are in the
code (i.e. to keep information from outer parts of the AST) - here we
use this to only check expressions when inside the Display or Debug impl
block.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lint-pass-overview&quot;&gt;Lint pass overview&lt;&#x2F;h3&gt;
&lt;p&gt;To start with we need to be able to detect when we are inside a Display
or Debug impl block.&lt;&#x2F;p&gt;
&lt;p&gt;In this code set the &lt;code&gt;self.format_trait_impl&lt;&#x2F;code&gt; field
when we are inside the &lt;code&gt;Impl&lt;&#x2F;code&gt; of a format trait (Display or Debug)
and unset it once we leave that &lt;code&gt;Impl&lt;&#x2F;code&gt; block:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;FormatImpl {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Whether we are inside a Display or Debug trait impl - None for neither
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;format_trait_impl&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;FormatTrait&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;tcx&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; LateLintPass&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;tcx&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;FormatImpl {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;check_impl_item&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cx&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;LateContext&amp;lt;&amp;#39;_&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;impl_item&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;ImplItem&amp;lt;&amp;#39;_&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Check if Impl is for Display or Debug
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.format_trait_impl = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_format_trait_impl&lt;&#x2F;span&gt;&lt;span&gt;(cx, impl_item);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;check_impl_item_post&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cx&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;LateContext&amp;lt;&amp;#39;_&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;impl_item&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;ImplItem&amp;lt;&amp;#39;_&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Assume no nested Impl of Debug and Display within eachother
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_format_trait_impl&lt;&#x2F;span&gt;&lt;span&gt;(cx, impl_item).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_some&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.format_trait_impl = None;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;check_impl_item&lt;&#x2F;code&gt; is triggered at the start of an Impl block, and
&lt;code&gt;check_impl_item_post&lt;&#x2F;code&gt; when we leave it.&lt;&#x2F;p&gt;
&lt;p&gt;This use of state means that we can then do our Expression level checks
only when we&#x27;re inside the relevant Impl blocks:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;tcx&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; LateLintPass&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;tcx&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;FormatImpl {
&lt;&#x2F;span&gt;&lt;span&gt;    ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;check_expr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cx&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;LateContext&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;tcx&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;expr&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;tcx &lt;&#x2F;span&gt;&lt;span&gt;Expr&amp;lt;&amp;#39;_&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;Some(format_trait_impl) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.format_trait_impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; format_trait_impl.name == sym::Display {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;check_to_string_in_display&lt;&#x2F;span&gt;&lt;span&gt;(cx, expr);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;check_self_in_format_args&lt;&#x2F;span&gt;&lt;span&gt;(cx, expr, format_trait_impl);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;check_print_in_format_impl&lt;&#x2F;span&gt;&lt;span&gt;(cx, expr, format_trait_impl);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;to_string_in_display&lt;&#x2F;code&gt; check is only relevant for the Display trait,
so we check for it explicitly there.&lt;&#x2F;p&gt;
&lt;p&gt;Note the use of separate functions for different lint checks. This
allows us to combine checking related lints in the same lint pass whilst
keeping the code readable.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;to-string-in-display&quot;&gt;to_string_in_display&lt;&#x2F;h3&gt;
&lt;p&gt;The check for the use of &lt;code&gt;to_string()&lt;&#x2F;code&gt; on self whilst inside the Display
impl is quite straightforward:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;check_to_string_in_display&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cx&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;LateContext&amp;lt;&amp;#39;_&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;expr&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;Expr&amp;lt;&amp;#39;_&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    if_chain! {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Get the hir_id of the object we are calling the method on
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;ExprKind::MethodCall(path, [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span&gt; self_arg, ..], _) = expr.kind;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Is the method to_string() ?
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; path.ident.name == sym!(to_string);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Is the method a part of the ToString trait? (i.e. not to_string() implemented
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; separately)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(expr_def_id) = cx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;typeck_results&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;type_dependent_def_id&lt;&#x2F;span&gt;&lt;span&gt;(expr.hir_id);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_diag_trait_item&lt;&#x2F;span&gt;&lt;span&gt;(cx, expr_def_id, sym::ToString);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Is the method is called on self?
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;ExprKind::Path(QPath::Resolved(_, path)) = self_arg.kind;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;[segment] = path.segments;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; segment.ident.name == kw::SelfLower;
&lt;&#x2F;span&gt;&lt;span&gt;        then {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;span_lint&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                cx,
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;RECURSIVE_FORMAT_IMPL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                expr.span,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;using `self.to_string` in `fmt::Display` implementation will cause infinite recursion&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            );
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note the use of the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;if_chain&#x2F;latest&#x2F;if_chain&#x2F;&quot;&gt;if_chain!&lt;&#x2F;a&gt; macro to 
chain if conditions without rightward drift (this is used throughout
Clippy).&lt;&#x2F;p&gt;
&lt;p&gt;The pattern &lt;code&gt;if let Some(XXX) = YYY;&lt;&#x2F;code&gt; is common when using if
chains, to allow us to refer to &lt;code&gt;XXX&lt;&#x2F;code&gt; later in the if chain (and stop
checking if it is None).&lt;&#x2F;p&gt;
&lt;p&gt;It is the &lt;code&gt;span_lint()&lt;&#x2F;code&gt; call that actually returns output for the
specific lint (i.e. &lt;code&gt;RECURSIVE_FORMAT_IMPL&lt;&#x2F;code&gt; in this case). This output
(to stderr) is what is compared in the UI test.&lt;&#x2F;p&gt;
&lt;p&gt;Also note the use of &lt;a href=&quot;https:&#x2F;&#x2F;rustc-dev-guide.rust-lang.org&#x2F;diagnostics&#x2F;diagnostic-items.html&quot;&gt;diagnostic items&lt;&#x2F;a&gt; with the
&lt;code&gt;is_diag_trait_item()&lt;&#x2F;code&gt; check. This is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;issues&#x2F;5393&quot;&gt;recommended over using hardcoded paths&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ui-test-example&quot;&gt;UI Test example&lt;&#x2F;h4&gt;
&lt;p&gt;One UI test (in &lt;code&gt;tests&#x2F;ui&#x2F;recursive_format_impl.rs&lt;&#x2F;code&gt;) for the above check is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;warn&lt;&#x2F;span&gt;&lt;span&gt;(clippy::recursive_format_impl)]
&lt;&#x2F;span&gt;&lt;span&gt;#![&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allow&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    clippy::inherent_to_string_shadow_display,
&lt;&#x2F;span&gt;&lt;span&gt;    clippy::to_string_in_format_args,
&lt;&#x2F;span&gt;&lt;span&gt;    clippy::deref_addrof
&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::fmt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;A;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;A {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span&gt;B {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;A {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;fmt::Display &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;A {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;fmt::Formatter) -&amp;gt; fmt::Result {
&lt;&#x2F;span&gt;&lt;span&gt;        write!(f, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: A) {
&lt;&#x2F;span&gt;&lt;span&gt;    a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With the expected output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;error: using `self.to_string` in `fmt::Display` implementation will cause infinite recursion
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; $DIR&#x2F;recursive_format_impl.rs:29:25
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;LL |         write!(f, &amp;quot;{}&amp;quot;, self.to_string())
&lt;&#x2F;span&gt;&lt;span&gt;   |                         ^^^^^^^^^^^^^^^^
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;   = note: `-D clippy::recursive-format-impl` implied by `-D warnings`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;i.e. it only triggers for the &lt;code&gt;fmt::Display&lt;&#x2F;code&gt; impl for A and not in the impl of
trait &lt;code&gt;B&lt;&#x2F;code&gt; for struct &lt;code&gt;A&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;check-self-in-format-args&quot;&gt;check_self_in_format_args&lt;&#x2F;h3&gt;
&lt;p&gt;The original case to solve is slightly more complicated. First we need
to find the use of the format macro e.g. &lt;code&gt;write!(...)&lt;&#x2F;code&gt; inside the
Display&#x2F;Debug impl, and then we need to check the arguments inside the macro call
(to check whether any of them resolve to &lt;code&gt;self&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Here we use some of the shared Clippy utils like &lt;code&gt;root_macro_call_first_node()&lt;&#x2F;code&gt; which 
make it much easier to deal with macros. This makes the first part quite
straightforward:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;check_self_in_format_args&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;tcx&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cx&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;LateContext&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;tcx&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;expr&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;tcx &lt;&#x2F;span&gt;&lt;span&gt;Expr&amp;lt;&amp;#39;_&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;impl_trait&lt;&#x2F;span&gt;&lt;span&gt;: FormatTrait) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; First find the call of the format macro
&lt;&#x2F;span&gt;&lt;span&gt;    if_chain! {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(outer_macro) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;root_macro_call_first_node&lt;&#x2F;span&gt;&lt;span&gt;(cx, expr);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let&lt;&#x2F;span&gt;&lt;span&gt; macro_def_id = outer_macro.def_id;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(format_args) = FormatArgsExpn::find_nested(cx, expr, outer_macro.expn);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_format_macro&lt;&#x2F;span&gt;&lt;span&gt;(cx, macro_def_id);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(args) = format_args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        then {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; arg in args {
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; It is okay to use a Display method in a Debug impl, and vice versa
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; arg.format_trait != impl_trait.name {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Check if arg resolves to self
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;check_format_arg_self&lt;&#x2F;span&gt;&lt;span&gt;(cx, expr, &amp;amp;arg, impl_trait);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As noted in the original example, checking the arguments to the format
macro is slightly complicated by the fact we need to handle references
and de-references. Here this is done with the use of the
&lt;code&gt;peel_ref_operators()&lt;&#x2F;code&gt; utils function.&lt;&#x2F;p&gt;
&lt;p&gt;After that, it&#x27;s just a case of checking whether the result is &lt;code&gt;self&lt;&#x2F;code&gt; or
not.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;check_format_arg_self&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cx&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;LateContext&amp;lt;&amp;#39;_&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;expr&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;Expr&amp;lt;&amp;#39;_&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;FormatArgsArg&amp;lt;&amp;#39;_&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;impl_trait&lt;&#x2F;span&gt;&lt;span&gt;: FormatTrait) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Check each arg in format calls - do we ever use Display on self (directly or via deref)?
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Handle multiple dereferencing of references e.g. &amp;amp;&amp;amp;self
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Handle dereference of &amp;amp;self -&amp;gt; self that is equivalent (i.e. via *self in fmt() impl)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Since the argument to fmt is itself a reference: &amp;amp;self
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; reference = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;peel_ref_operators&lt;&#x2F;span&gt;&lt;span&gt;(cx, arg.value);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; map = cx.tcx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;hir&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Is the reference self?
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;path_to_local&lt;&#x2F;span&gt;&lt;span&gt;(reference).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| map.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;(x)) == Some(kw::SelfLower) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; FormatTrait { name, .. } = impl_trait;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;span_lint&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            cx,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;RECURSIVE_FORMAT_IMPL&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            expr.span,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;amp;format!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;using `self` as `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{name}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;` in `impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{name}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;` will cause infinite recursion&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;        );
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;things-to-consider&quot;&gt;Things to consider&lt;&#x2F;h3&gt;
&lt;p&gt;Note that we never execute the code itself, Clippy is entirely static
analysis. However, the fact that we have access to the type information
means we can still handle things like checking what the final type of an
expression will be after applying dereferences, etc. as done here.&lt;&#x2F;p&gt;
&lt;p&gt;However, one must take care not to create false positives by
accidentally over-simplifying the checks. For example, my original code
just compared the final type of the expression of the argument in the
format macro with the &lt;code&gt;Self&lt;&#x2F;code&gt; type in the impl block, to avoid dealing with references and de-references directly.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; arg_ty = cx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;typeck_results&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expr_ty_adjusted&lt;&#x2F;span&gt;&lt;span&gt;(arg.value);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; self_ty = cx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;typeck_results&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;node_type&lt;&#x2F;span&gt;&lt;span&gt;(self_hir_id);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; self_ty == arg_ty;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But this approach doesn&#x27;t work with enums (thanks to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;pull&#x2F;8188#issuecomment-1002426663&quot;&gt;@mikerite spotting
this so quickly!&lt;&#x2F;a&gt;)
such as in the following example (now a test case):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;Tree {
&lt;&#x2F;span&gt;&lt;span&gt;    Leaf,
&lt;&#x2F;span&gt;&lt;span&gt;    Node(Vec&amp;lt;Tree&amp;gt;),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;fmt::Display &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Tree {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;fmt::Formatter) -&amp;gt; fmt::Result {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            Tree::Leaf =&amp;gt; write!(f, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;            Tree::Node(children) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                write!(f, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)?;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; child in children.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                    write!(f, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, child)?;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                write!(f, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code is fine and won&#x27;t trigger infinite recursion since Nodes will
always end in leaves, or have no children. But this would trigger a false positive
if we only compare the types, since both enum variants have the same type when checked
(since enum variants are not their own types yet - see the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;1450&quot;&gt;Types for enum variants RFC&lt;&#x2F;a&gt; and 
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;2593&quot;&gt;Enum variant types RFC&lt;&#x2F;a&gt; for details on possible future changes to that).&lt;&#x2F;p&gt;
&lt;p&gt;The corrected lint check works since &lt;code&gt;self&lt;&#x2F;code&gt; never refers to the same
entity as &lt;code&gt;child&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Bear in mind that false negatives are greatly preferable to false
positives, so always try to think of possible edge cases for testing,
and lean towards more conservative solutions.&lt;&#x2F;p&gt;
&lt;p&gt;Note it is still possible to write code that will trigger infinite
recursion by similar means, but not be detected here. Such as calling
&lt;code&gt;to_string()&lt;&#x2F;code&gt; on a type inside our Display impl, whose Display impl in turn calls &lt;code&gt;to_string()&lt;&#x2F;code&gt;
on this type, etc. The aim is only to cover cases which are likely to
come up when writing code in practice (after all we cannot solve the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Halting_problem&quot;&gt;Halting problem&lt;&#x2F;a&gt;!).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;If you run Clippy on &lt;a href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=690cb006ae868d481ed830540bf1b52c&quot;&gt;the original example&lt;&#x2F;a&gt; you
will now see the following error:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;error: using `self` as `Display` in `impl Display` will cause infinite recursion
&lt;&#x2F;span&gt;&lt;span&gt;  --&amp;gt; src&#x2F;main.rs:15:9
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;15 |         write!(f, &amp;quot;{}&amp;quot;, &amp;amp;*self)
&lt;&#x2F;span&gt;&lt;span&gt;   |         ^^^^^^^^^^^^^^^^^^^^^^^
&lt;&#x2F;span&gt;&lt;span&gt;   |
&lt;&#x2F;span&gt;&lt;span&gt;   = note: `#[deny(clippy::recursive_format_impl)]` on by default
&lt;&#x2F;span&gt;&lt;span&gt;   = help: for further information visit https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rust-clippy&#x2F;master&#x2F;index.html#recursive_format_impl
&lt;&#x2F;span&gt;&lt;span&gt;   = note: this error originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s a great feeling to go from first hitting this issue, all the way to
seeing the check running directly in the Rust playground.&lt;&#x2F;p&gt;
&lt;p&gt;At the time of writing, the main code for the lint is available at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;blob&#x2F;master&#x2F;clippy_lints&#x2F;src&#x2F;format_impl.rs&quot;&gt;clippy_lints&#x2F;src&#x2F;format_impl.rs&lt;&#x2F;a&gt;
and the UI tests are available at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;blob&#x2F;master&#x2F;tests&#x2F;ui&#x2F;recursive_format_impl.rs&quot;&gt;tests&#x2F;ui&#x2F;recursive_format_impl.rs&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;blob&#x2F;master&#x2F;tests&#x2F;ui&#x2F;recursive_format_impl.stderr&quot;&gt;tests&#x2F;ui&#x2F;recursive_format_impl.stderr&lt;&#x2F;a&gt;.
My original Pull Request (with corrections) is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;pull&#x2F;8188&quot;&gt;#8188&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h3&gt;
&lt;p&gt;Overall, I was very impressed by how easy it was to write the lint. The
Clippy team has done great work on providing examples, quick code
reviews and a lot of easy-to-use shared utils code.&lt;&#x2F;p&gt;
&lt;p&gt;If you ever find a similar nagging issue, no matter how small, I highly
encourage you to at least create an issue on Github so you can open
discussion around possible solutions and similar issues. In my case, it
took me almost two months to go from first seeing the issue to 
realising I could actually add the lint myself.&lt;&#x2F;p&gt;
&lt;p&gt;If you do wish to contribute a lint to Clippy, I recommend
reading the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;blob&#x2F;master&#x2F;CONTRIBUTING.md&quot;&gt;Contribution guidelines&lt;&#x2F;a&gt;,
the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;blob&#x2F;master&#x2F;doc&#x2F;basics.md&quot;&gt;basics for hacking on Clippy&lt;&#x2F;a&gt;
and the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;blob&#x2F;master&#x2F;doc&#x2F;adding_lints.md&quot;&gt;documentation on adding lints&lt;&#x2F;a&gt;, 
and posting on the &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.zulipchat.com&#x2F;#narrow&#x2F;stream&#x2F;257328-clippy&quot;&gt;clippy Zulip stream&lt;&#x2F;a&gt; for additional help&#x2F;discussion.
The &lt;a href=&quot;https:&#x2F;&#x2F;rustc-dev-guide.rust-lang.org&#x2F;hir.html&quot;&gt;rustc dev guide&lt;&#x2F;a&gt;
can be useful for additional documentation on the High-level
Intermediate Representation (HIR), Diagnostic Items, and other concepts.
Finally, the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;blob&#x2F;master&#x2F;doc&#x2F;common_tools_writing_lints.md&quot;&gt;Common tools for writing lints&lt;&#x2F;a&gt; 
is also useful for recognising common operations (as well as reading
through the existing lints and the &lt;code&gt;clippy_utils&lt;&#x2F;code&gt; crate).&lt;&#x2F;p&gt;
&lt;p&gt;In my opinion this whole experience perfectly demonstrates Rust&#x27;s value
of empowerment for users and developers. I couldn&#x27;t imagine making 
a similar contribution to the tooling of any other language, and it was greatly
facilitated by the efforts of reviewers and prior contributors.&lt;&#x2F;p&gt;
&lt;p&gt;I hope writing up this example as a first-time contributor will help
others to also start contributing. It is through thousands of
contributions like this (how ever small or large) that Rust has become
the least frustrating and most empowering programming language.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Writing a simple AWS Lambda Custom Runtime in Rust</title>
		<published>2020-10-24T00:00:00+00:00</published>
		<updated>2020-10-24T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jamesmcm.github.io/blog/lambda-runtime/" type="text/html"/>
		<id>https://jamesmcm.github.io/blog/lambda-runtime/</id>
		<content type="html">&lt;p&gt;I was recently reading more about the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;lambda_runtime&quot;&gt;lambda_runtime crate&lt;&#x2F;a&gt;
and came across &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;awslabs&#x2F;aws-lambda-rust-runtime&#x2F;issues&#x2F;259&quot;&gt;this issue&lt;&#x2F;a&gt; 
where it is mentioned that the &lt;code&gt;#[lambda]&lt;&#x2F;code&gt; procedural macro can be
misleading and cause problems if used naively.&lt;&#x2F;p&gt;
&lt;p&gt;In this post we will implement our own simple custom runtime for
AWS Lambda in Rust, and understand the reasons behind this issue.&lt;&#x2F;p&gt;
&lt;p&gt;The code used in this blog post is available on Github in 
my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;micro_lambda&quot;&gt;micro_lambda repository&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Opinions expressed are solely my own and do not express the views or opinions of my employer.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;aws-lambda&quot;&gt;AWS Lambda&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;lambda&#x2F;&quot;&gt;AWS Lambda&lt;&#x2F;a&gt; is a serverless computing service. I have previously covered
setting up serverless data pipelines &lt;a href=&quot;http:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;2020&#x2F;04&#x2F;19&#x2F;data-engineering-with-rust-and-aws-lambda&#x2F;#en&quot;&gt;from Excel files on S3&lt;&#x2F;a&gt;, and
&lt;a href=&quot;http:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;2020&#x2F;08&#x2F;29&#x2F;rust-ses&#x2F;#en&quot;&gt;from email attachments with SES and Workmail&lt;&#x2F;a&gt; using Rust and the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;awslabs&#x2F;aws-lambda-rust-runtime&quot;&gt;lambda_runtime crate&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;custom-runtimes&quot;&gt;Custom Runtimes&lt;&#x2F;h2&gt;
&lt;p&gt;A &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;lambda&#x2F;latest&#x2F;dg&#x2F;runtimes-custom.html&quot;&gt;Custom Runtime&lt;&#x2F;a&gt; allows you to run any x86_64 binary as an AWS Lambda
function, by providing the runtime code to interact with the &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;lambda&#x2F;latest&#x2F;dg&#x2F;runtimes-api.html&quot;&gt;AWS Lambda
Custom Runtime API&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The idea is you first retrieve some of the Lambda function settings
provided to the executable as environment variables, run any one-time or
shared initialisation code, and then call the handler function (i.e. the
function that will be called for each invocation), passing it the AWS
Lambda event JSON.&lt;&#x2F;p&gt;
&lt;p&gt;In summary, the runtime code should:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Read relevant environment variables, in our case only &lt;code&gt;AWS_LAMBDA_RUNTIME_API&lt;&#x2F;code&gt;
is necessary since we will include the runtime and handler function together in our final binary.&lt;&#x2F;li&gt;
&lt;li&gt;Run any initialisation code - note in our case this could be defined
either as part of the runtime library crate, or in the application
code prior to passing the handler function to the Lambda runtime.&lt;&#x2F;li&gt;
&lt;li&gt;Loop indefinitely, polling the Lambda Runtime API for new
invocations and sending these to the handler function - then POST the
output to either the invocation response or error endpoint.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;It&#x27;s important to note that a single runtime execution may serve several
Lambda function invocations if they arrive close together  - this is
called a &lt;em&gt;warm start&lt;&#x2F;em&gt;. As opposed to a &lt;em&gt;cold start&lt;&#x2F;em&gt; where AWS Lambda has
to spin up the container and start the runtime. For functions that need
to always respond with a very low latency, some users even schedule
dummy invocations (i.e. with a specific Cloudwatch event, etc.)
to keep the runtime running and ensure warm starts.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lambda-runtime-api&quot;&gt;Lambda Runtime API&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;lambda&#x2F;latest&#x2F;dg&#x2F;runtimes-api.html&quot;&gt;AWS Lambda Runtime API&lt;&#x2F;a&gt; currently contains only four endpoints:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Initalization error - for if the initialization steps fail (i.e. doing one-time initializations for global resources, etc.) prior to calling the handler function: POST &lt;code&gt;&#x2F;runtime&#x2F;init&#x2F;error&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Next invocation - an endpoint from which to GET the invocation event and some metadata (AWS Request ID): GET &lt;code&gt;&#x2F;runtime&#x2F;invocation&#x2F;next&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Invocation response - an endpoint to POST the successful response of the handler function: POST &lt;code&gt;&#x2F;runtime&#x2F;invocation&#x2F;${AwsRequestId}&#x2F;response&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Invocation error - an endpoint to POST the error message of the handler function, if it fails: POST &lt;code&gt;&#x2F;runtime&#x2F;invocation&#x2F;${AwsRequestId}&#x2F;error&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The base URL for each API call is &lt;code&gt;http:&#x2F;&#x2F;${AWS_LAMBDA_RUNTIME_API}&#x2F;2018-06-01&#x2F;&lt;&#x2F;code&gt; - note we do not need TLS.&lt;&#x2F;p&gt;
&lt;p&gt;We need to extract the AWS Request ID from the headers returned in the
next invocation response. The body of the response is the JSON for the
triggering event itself (note that the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;LegNeato&#x2F;aws-lambda-events&quot;&gt;aws_lambda_events crate&lt;&#x2F;a&gt; has
templates for deserializing the events from AWS services).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;runtime-library&quot;&gt;Runtime library&lt;&#x2F;h2&gt;
&lt;p&gt;Using all of the above, we can implement a custom runtime in a very
small amount of code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; std::result::Result&amp;lt;String, String&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Could initialise one-time resources here
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; If initialisation error, POST to &#x2F;runtime&#x2F;init&#x2F;error
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; aws_lambda_runtime_api = std::env::var(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;AWS_LAMBDA_RUNTIME_API&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Loop getting new invocation events and passing to handler
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; invocation = ureq::get(&amp;amp;format!(
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;2018-06-01&#x2F;runtime&#x2F;invocation&#x2F;next&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            aws_lambda_runtime_api
&lt;&#x2F;span&gt;&lt;span&gt;        ))
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;call&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Extract AWS Request ID for in order to post responses
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; request_id = invocation
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;header&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Lambda-Runtime-Aws-Request-Id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Run the handler function and get the output (note above we
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; specified this will be a Result&amp;lt;String, String&amp;gt; )
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; response = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span&gt;(invocation.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_string&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; response {
&lt;&#x2F;span&gt;&lt;span&gt;	    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; If succeeded post output to response
&lt;&#x2F;span&gt;&lt;span&gt;            Ok(res) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _resp = ureq::post(&amp;amp;format!(
&lt;&#x2F;span&gt;&lt;span&gt;                    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;2018-06-01&#x2F;runtime&#x2F;invocation&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;response&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                    aws_lambda_runtime_api, request_id
&lt;&#x2F;span&gt;&lt;span&gt;                ))
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send_string&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;res);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            Err(err) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; If invocation error, POST to &#x2F;runtime&#x2F;invocation&#x2F;AwsRequestId&#x2F;error
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _resp = ureq::post(&amp;amp;format!(
&lt;&#x2F;span&gt;&lt;span&gt;                    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;2018-06-01&#x2F;runtime&#x2F;invocation&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;error&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                    aws_lambda_runtime_api, request_id
&lt;&#x2F;span&gt;&lt;span&gt;                ))
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send_string&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;err.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this case we just call &lt;code&gt;lambda()&lt;&#x2F;code&gt; with a function that takes a &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;
(which will be the event JSON), and returns a &lt;code&gt;Result&amp;lt;String, String&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Note that in practice you would want to support different response and error types
(perhaps anything that implements Display), and possibly also
asynchronous handler functions, etc. - this is what the lambda_runtime
crate does.&lt;&#x2F;p&gt;
&lt;p&gt;This code is available on Github in 
my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;micro_lambda&quot;&gt;micro_lambda repository&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to follow along, the 
&lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;lambda&#x2F;latest&#x2F;dg&#x2F;runtimes-walkthrough.html&quot;&gt;tutorial on publishing a custom runtime&lt;&#x2F;a&gt; is
also very useful - covering an example of an AWS Lambda custom runtime in bash.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;example-lambda-function&quot;&gt;Example Lambda function&lt;&#x2F;h2&gt;
&lt;p&gt;Using the above library crate, a Lambda function might look like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;micro_lambda::lambda;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Put one-time initialisations (loggers, etc.)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; before calling lambda()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;(handler);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; std::result::Result&amp;lt;String, String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, event);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; event.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fail&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;Err(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ERROR&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SUCCESS&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can then upload this to AWS Lambda, and verify that it works for a
successful test case:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;lambda-runtime&#x2F;lambda_success.png&quot; alt=&quot;Success test case&quot; title=&quot;Success test case&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And for an error test case:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;lambda-runtime&#x2F;lambda_error.png&quot; alt=&quot;Error test case&quot; title=&quot;Error test case&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Note when deploying, you will likely want to use static linking by using
the musl target to avoid issues with glibc version mismatches:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cargo build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --release --target&lt;&#x2F;span&gt;&lt;span&gt;=x86_64-unknown-linux-musl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; cp .&#x2F;target&#x2F;x86_64-unknown-linux-musl&#x2F;release&#x2F;bootstrap .&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; strip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --strip-all&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;bootstrap
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; zip bootstrap.zip bootstrap
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you do use dynamic linking with glibc, then consider setting the
Lambda function to use Amazon Linux 2 (AL2) in the AWS Lambda Console, so the
container will have a newer version of glibc at least.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;lambda-runtime-and-lambda&quot;&gt;lambda_runtime and #[lambda]&lt;&#x2F;h2&gt;
&lt;p&gt;Now we can understand the comment about the &lt;code&gt;#[lambda]&lt;&#x2F;code&gt; macro in the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;awslabs&#x2F;aws-lambda-rust-runtime&#x2F;issues&#x2F;259&quot;&gt;aforementioned Github issue&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Due to how cold&#x2F;warm starts work on Lambda,
the naive approach of setting up resources (such as loggers)
within a #[lambda]-decorated block will cause the logger initializer
to panic in a warm start.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The &lt;code&gt;#[lambda]&lt;&#x2F;code&gt; macro allows you to write &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;awslabs&#x2F;aws-lambda-rust-runtime&#x2F;blob&#x2F;master&#x2F;lambda&#x2F;examples&#x2F;hello.rs&quot;&gt;simple code&lt;&#x2F;a&gt; like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lambda&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;: Value, _: Context) -&amp;gt; Result&amp;lt;Value, Error&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(event)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But it is important to note that in this case the function being wrapped
is treated as the &lt;em&gt;handler function&lt;&#x2F;em&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;awslabs&#x2F;aws-lambda-rust-runtime&#x2F;blob&#x2F;master&#x2F;lambda&#x2F;examples&#x2F;hello-without-macro.rs&quot;&gt;here is the relevant code&lt;&#x2F;a&gt;).
That is, any initialisation should take
place &lt;em&gt;before&lt;&#x2F;em&gt; the handler function is called, so that it is only run
once even if there are multiple invocations before the runtime is
terminated (this is a &amp;quot;warm start&amp;quot;).&lt;&#x2F;p&gt;
&lt;p&gt;This causes problems when new users see the above example, and put
logger intialisation code, etc. in there directly, which will then fail
in the cases of warm starts - which might appear as sporadic and
confusing failures to the developer.&lt;&#x2F;p&gt;
&lt;p&gt;This can be fixed by 
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;awslabs&#x2F;aws-lambda-rust-runtime&#x2F;blob&#x2F;master&#x2F;lambda&#x2F;examples&#x2F;hello-without-macro.rs&quot;&gt;separating out the handler invocation&lt;&#x2F;a&gt;,
just like we did in our earlier code. In this case it could be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;(), Error&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Put any one-time initialisation code up here
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Before lambda::run is called!
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; func = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;handler_fn&lt;&#x2F;span&gt;&lt;span&gt;(func);
&lt;&#x2F;span&gt;&lt;span&gt;    lambda::run(func).await?;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;: Value, _: Context) -&amp;gt; Result&amp;lt;Value, Error&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(event)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;I hope it&#x27;s clear now how the &lt;code&gt;#[lambda]&lt;&#x2F;code&gt; macro can cause confusion, and
how to avoid this issue if you write your own Lambda functions.&lt;&#x2F;p&gt;
&lt;p&gt;This might seem a bit overkill for covering such a simple issue, but as
Richard Feynman said:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;What I cannot create, I do not understand.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;If you look at the the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;micro_lambda&quot;&gt;micro_lambda repository&lt;&#x2F;a&gt;,
you&#x27;ll see I tried to reduce the binary size by some means. I&#x27;d
originally wanted to write this as 
a &lt;a href=&quot;https:&#x2F;&#x2F;rust-embedded.github.io&#x2F;book&#x2F;intro&#x2F;no-std.html&quot;&gt;#[no_std] crate&lt;&#x2F;a&gt;
but the requirement to make HTTP requests made this too difficult,
considering the networking required. If you do know how to handle this
well please create an issue or PR on the repo!&lt;&#x2F;p&gt;
&lt;p&gt;Another possible extension of this would be to support the 
&lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;lambda&#x2F;latest&#x2F;dg&#x2F;runtimes-extensions-api.html&quot;&gt;AWS Lambda Extensions API&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>My Rust 2021 roadmap: crates, concision, and community</title>
		<published>2020-09-24T00:00:00+00:00</published>
		<updated>2020-09-24T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jamesmcm.github.io/blog/rust2021/" type="text/html"/>
		<id>https://jamesmcm.github.io/blog/rust2021/</id>
		<content type="html">&lt;p&gt;The Rust core team recently released a &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2020&#x2F;09&#x2F;03&#x2F;Planning-2021-Roadmap.html&quot;&gt;call for blog posts&lt;&#x2F;a&gt; as part of
the 2021 roadmap for Rust. In this post I will detail my own experience
with Rust, and areas I&#x27;d like to
see improved during 2021.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Opinions expressed are solely my own and do not express the views or opinions of my employer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-background&quot;&gt;My background&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m currently a Data Engineer and over the last few months I have
proposed and started implementing the migration of our serverless data
ingestion pipelines to Rust. The requirements of these pipelines vary
but usually involve receiving some external data (e.g. via email or S3, possibly
via &lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;blogs&#x2F;aws&#x2F;new-aws-transfer-for-sftp-fully-managed-sftp-service-for-amazon-s3&#x2F;&quot;&gt;SFTP to S3&lt;&#x2F;a&gt;), 
validating and transforming that data (with AWS Lambda) and loading it to a data
warehouse.&lt;&#x2F;p&gt;
&lt;p&gt;I originally proposed switching to Rust due to having deployment issues
with Python (when depending on native modules, like NumPy) due to
possible glibc version mismatches as well as the total size of the deployed
package.&lt;&#x2F;p&gt;
&lt;p&gt;Rust solves these issues by allowing us to compile a statically linked
binary with musl, and feature flags allow us to include useful code from
a shared crate without building in the entire crate and its
dependencies (for parts we don&#x27;t need). &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ctz&#x2F;rustls&quot;&gt;Rustls&lt;&#x2F;a&gt; also allows us to avoid any OpenSSL-related deployment
issues.&lt;&#x2F;p&gt;
&lt;p&gt;Carrying out this proposal has given me direct experience in solving
business problems in Rust, working with other team members to introduce
Rust to the team, and deployment in an enterprise environment (although
the hard parts of deployment are largely handled by other teams).&lt;&#x2F;p&gt;
&lt;p&gt;I have published two personal programs written in Rust: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&quot;&gt;vopono&lt;&#x2F;a&gt; for
running specific applications through VPN connections, and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;s3rename&quot;&gt;s3rename&lt;&#x2F;a&gt;
for mass-renaming keys in an S3 bucket. I have also written a few prior
blog posts on Rust, the most popular being &lt;a href=&quot;http:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;2020&#x2F;07&#x2F;25&#x2F;intro-dod&#x2F;#en&quot;&gt;about data-oriented design in Rust&lt;&#x2F;a&gt;
and &lt;a href=&quot;http:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;2020&#x2F;05&#x2F;06&#x2F;a-practical-introduction-to-async-programming-in-rust&#x2F;#en&quot;&gt;an introduction to async programming&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To summarise: As a data engineer, I want to be able to easily test and
deploy statically linked Rust binaries on various platforms and
architectures, and interact with popular services and protocols without
friction.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;considerations&quot;&gt;Considerations&lt;&#x2F;h2&gt;
&lt;p&gt;When working as an engineer in an agile team, sprint velocity and
speed of delivery is key. Engineers want to use the language and tooling
that will help them to complete their tasks as quickly as possible,
without frustration or the need to dig deep in to the implementations of
dependencies.&lt;&#x2F;p&gt;
&lt;p&gt;Amongst engineers I have seen two main reasons for push-back against
Rust deployment:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The language is perceived to be very difficult to write (mostly due to
lifetimes), low-level and slow to develop in.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The language is perceived to be very new, with an immature and
unstable ecosystem that might be lacking critical functionality and
could lead to a loss of development time if some dependencies have to
be created in-house.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These aren&#x27;t issues that can be solved directly necessarily (especially
the perception itself), but we can consider how the community can help
to turn around these perceptions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;development-speed&quot;&gt;Development speed&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;low-level&quot;&gt;Low-level?&lt;&#x2F;h4&gt;
&lt;p&gt;The first misconception is that Rust is a low-level language and that
the experience might be similar to writing C (i.e. dealing directly with
malloc, etc.). I think a lot of this comes from Rust often being
compared to C and C++ implementations in benchmarks, and being more
strongly adopted in the systems programming community. &lt;&#x2F;p&gt;
&lt;p&gt;I think this will largely be countered by Rust usage becoming more widespread in other
domains, such as Web Development with crates like Actix, Rocket, Hyper, etc. on the
backend and Seed and Yew on the frontend, and Data Engineering with crates
like ndarray, Serde, Polars, Calamine, Amadeus and Ballista.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;difficult-to-write&quot;&gt;Difficult to write?&lt;&#x2F;h4&gt;
&lt;p&gt;Rust is also often perceived as difficult to write, particularly due to
the lifetime notation. Here I think a lot of great work has already
been done with non-lexical lifetimes greatly simplifying the necessary
notation in many cases, and rust-analyzer providing a fast debug loop
(along with the ongoing efforts to improve error messages). &lt;&#x2F;p&gt;
&lt;p&gt;The main thing to note here for the future, in my opinion, is just how much
language and syntax improvements can help new users and further adoption. I hope Rust
continues to work on making the code more concise for the developer in
the majority of use cases. For Rust 2021 and beyond this might include
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;pull&#x2F;2909&quot;&gt;assignment with destructuring&lt;&#x2F;a&gt;,
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;44762&quot;&gt;auto-dereferencing in operators&lt;&#x2F;a&gt;,
and &lt;a href=&quot;https:&#x2F;&#x2F;internals.rust-lang.org&#x2F;t&#x2F;pre-rfc-lifetime-elision-1-1-structs-with-one-reference-field&#x2F;4914&quot;&gt;lifetime elision in structs&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;slower-to-implement&quot;&gt;Slower to implement?&lt;&#x2F;h4&gt;
&lt;p&gt;Related to the above point, Rust is often considered slower to develop
in (usually when compared to dynamic scripting languages like Python or
JavaScript). Here I think it&#x27;s important to note that hitting lots of error messages
from the compiler or borrow checker during development doesn&#x27;t
necessarily mean development is slower - as those errors are probably
catching lots of issues that might go unnoticed in other languages
(until you hit an issue in production).&lt;&#x2F;p&gt;
&lt;p&gt;In German there is a saying &amp;quot;Wenn schon, denn schon.&amp;quot;, which roughly translates
to &amp;quot;if you&#x27;re going to do it, do it properly&amp;quot;. This is where I believe Rust
excels - whilst you might hit a few lifetime and ownership issues during
the development of your program, in the end you are saved from a whole
class of bugs and also aren&#x27;t bound by issues like the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Global_interpreter_lock&quot;&gt;Global Interpreter Lock&lt;&#x2F;a&gt; 
or the lack of type safety as in simpler scripting languages.&lt;&#x2F;p&gt;
&lt;p&gt;But it is important to ensure
that the feedback loop is fast for the developer. Here I think the great
improvements in rust-analyzer have helped already, and hopefully there
will be further improvements to compile speeds to make this even faster
in the future.&lt;&#x2F;p&gt;
&lt;p&gt;Ultimately with the great tooling available, I think the development
speed can actually be faster in Rust than Python or Ruby when you
consider the whole software life cycle including fixing bugs and scaling
up the system.&lt;&#x2F;p&gt;
&lt;p&gt;However, development speed is also greatly affected by the availability
of relevant libraries.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;crates-and-ecosystem&quot;&gt;Crates and ecosystem&lt;&#x2F;h3&gt;
&lt;p&gt;Rust &lt;em&gt;is&lt;&#x2F;em&gt; still a very new language, with the first stable release in
2015 and more widespread adoption with the release of Rust 2018. This
leads to a common concern that Rust may be lacking some libraries, and
so could cost significant developer time compared to languages with a
larger and more mature ecosystem.&lt;&#x2F;p&gt;
&lt;p&gt;There are already many excellent crates unique to Rust, such as Serde
which I miss when working with other languages. The great accessibility
of cargo, &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;&quot;&gt;crates.io&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;&quot;&gt;docs.rs&lt;&#x2F;a&gt; also make it easy to discover new crates.&lt;&#x2F;p&gt;
&lt;p&gt;However, there are still some areas for improvement for the ecosystem as
a whole. For example, Rusoto is still slightly less user-friendly than
&lt;a href=&quot;https:&#x2F;&#x2F;boto3.amazonaws.com&#x2F;v1&#x2F;documentation&#x2F;api&#x2F;latest&#x2F;index.html&quot;&gt;boto3&lt;&#x2F;a&gt; (i.e. having to create &lt;code&gt;_Request&lt;&#x2F;code&gt; structs for each client
request).&lt;&#x2F;p&gt;
&lt;p&gt;Another example would be the need to provide root CA certificates (i.e. in a
PEM file) to rustls for use with &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;tokio-postgres-rustls&quot;&gt;tokio-postgres-rustls&lt;&#x2F;a&gt; for example.
This is a minor issue, but one that is not necessary in more &amp;quot;batteries-included&amp;quot; libraries in other
languages (e.g. psycopg2 in Python).&lt;&#x2F;p&gt;
&lt;p&gt;These are small examples but can impact the learning curve for new
developers. As a community, I think we should try to create issues for
any such &amp;quot;paper-cuts&amp;quot; we come across and contribute pull requests where
possible.&lt;&#x2F;p&gt;
&lt;p&gt;Documentation is also relevant to this. Overall, Rust has excellent
documentation with the combination of rustdoc and mdBook being used to
provide crate documentation and detailed developer and contributor
guides. Throughout 2021 we should aim to expand existing documentation,
and ensure that it is accessible for new developers to do so too - for
example, contributing common use cases to &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang-nursery.github.io&#x2F;rust-cookbook&#x2F;&quot;&gt;the Rust cookbook&lt;&#x2F;a&gt;. 
Myself, I struggled greatly with Serde&#x27;s &lt;code&gt;deserialize_with&lt;&#x2F;code&gt; field attribute until looking at examples.&lt;&#x2F;p&gt;
&lt;p&gt;Hopefully in the future, the establishment of the &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2020&#x2F;08&#x2F;18&#x2F;laying-the-foundation-for-rusts-future.html&quot;&gt;Rust foundation&lt;&#x2F;a&gt;
will eventually be able to provide commercial support to critical projects like
Rustls, Serde, and Tokio to ensure the crates are maintained and
improved in the long-term. I think this would help a lot with the adoption
of Rust in enterprise.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;d also be great if Rust support were added to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;jsii&quot;&gt;jsii&lt;&#x2F;a&gt;
so Rust could be used with the AWS &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;aws-cdk&quot;&gt;Cloud Development Kit&lt;&#x2F;a&gt; directly.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;other-small-issues&quot;&gt;Other small issues&lt;&#x2F;h2&gt;
&lt;p&gt;There are some other small issues I&#x27;d love to see improved during 2021.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;auto-ref-in-pattern-matching&quot;&gt;Auto Ref in pattern matching&lt;&#x2F;h3&gt;
&lt;p&gt;I couldn&#x27;t find an RFC for this, but it&#x27;d great to be able to use a
static &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; when matching on an enum containing a &lt;code&gt;String&lt;&#x2F;code&gt;. i.e. so
&lt;a href=&quot;https:&#x2F;&#x2F;play.rust-lang.org&#x2F;?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=284089e5b13b5925449574ce2c5e41f2&quot;&gt;this would be possible&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;MyEnum {
&lt;&#x2F;span&gt;&lt;span&gt;    WithString(String),
&lt;&#x2F;span&gt;&lt;span&gt;    Other,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; myenum = MyEnum::WithString(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; myenum {
&lt;&#x2F;span&gt;&lt;span&gt;        MyEnum::WithString(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) =&amp;gt; {println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Was string&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)},
&lt;&#x2F;span&gt;&lt;span&gt;        _ =&amp;gt; {},
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Currently it is necessary to use a match guard (as far as I know). The
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust&#x2F;issues&#x2F;42640&quot;&gt;closest RFC I could find&lt;&#x2F;a&gt; handles auto deref but not ref. 
Note that is already implemented.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;blocking-futures-without-an-async-runtime&quot;&gt;Blocking Futures without an async runtime&lt;&#x2F;h3&gt;
&lt;p&gt;At the moment if any crate returns a Future, the developer has to use an
async runtime even if just to block on the future synchronously - i.e. &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.2.22&#x2F;tokio&#x2F;runtime&#x2F;struct.Runtime.html#method.block_on&quot;&gt;tokio&#x27;s
block_on&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;d be nice if this were built in to the standard library (for the
blocking, synchronous case only) if possible.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lifetimes-of-trait-objects-defaults-to-static&quot;&gt;Lifetimes of trait objects defaults to &#x27;static&lt;&#x2F;h3&gt;
&lt;p&gt;I have been caught out a few times by the lifetime of a trait object
defaulting to &lt;code&gt;&#x27;static&lt;&#x2F;code&gt;. Recently, in this &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mitsuhiko&#x2F;dialoguer&#x2F;pull&#x2F;81&#x2F;files#diff-25c234b5525af56f20a73cb80796026bR47&quot;&gt;PR to the dialoguer crate&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Specifically the original struct:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Input&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prompt&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;T&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;show_default&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;initial_text&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;theme&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt; dyn Theme,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;permit_empty&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;validator&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;Box&amp;lt;dyn Fn(&amp;amp;T) -&amp;gt; Option&amp;lt;String&amp;gt;&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Requires that the validator closure has a &lt;code&gt;&#x27;static&lt;&#x2F;code&gt; lifetime, not the
&lt;code&gt;&#x27;a&lt;&#x2F;code&gt; of the struct. This can be fixed by specifying the &lt;code&gt;&#x27;a&lt;&#x2F;code&gt; lifetime
explicitly:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    validator: Option&amp;lt;Box&amp;lt;dyn Fn(&amp;amp;T) -&amp;gt; Option&amp;lt;String&amp;gt; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, I found the fact that it defaults to &lt;code&gt;&#x27;static&lt;&#x2F;code&gt; quite
unintuitive, this seems to be decided by the
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;lifetime-elision.html#default-trait-object-lifetimes&quot;&gt;default trait object lifetime rules&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;d be nice if this could be adjusted similar to the
&lt;a href=&quot;https:&#x2F;&#x2F;internals.rust-lang.org&#x2F;t&#x2F;pre-rfc-lifetime-elision-1-1-structs-with-one-reference-field&#x2F;4914&quot;&gt;lifetime elision in structs&lt;&#x2F;a&gt; 
RFC mentioned above so that if the containing struct has a specified
lifetime then the trait object would default to that lifetime (the
developer could always specify &lt;code&gt;&#x27;static&lt;&#x2F;code&gt; if required). Perhaps
this is impractical or undesirable due to other consequences though.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;deref-in-closure-signature&quot;&gt;Deref in closure signature&lt;&#x2F;h3&gt;
&lt;p&gt;Related to the PR mentioned in the previous section, we have a
&lt;code&gt;Validator&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; that must implement the validate method:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;Validator&amp;lt;T&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Err: Debug + Display;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;validate&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;T) -&amp;gt; Result&amp;lt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self::&lt;&#x2F;span&gt;&lt;span&gt;Err&amp;gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, this means if we want to validate a &lt;code&gt;String&lt;&#x2F;code&gt; we must pass a
&lt;code&gt;&amp;amp;String&lt;&#x2F;code&gt; to validate. We cannot pass an &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;. If &lt;code&gt;T&lt;&#x2F;code&gt; were an &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;
itself then we could use &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;beta&#x2F;std&#x2F;convert&#x2F;trait.AsRef.html&quot;&gt;AsRef&lt;&#x2F;a&gt;
to accept a &lt;code&gt;String&lt;&#x2F;code&gt; in the signature, but the other way around doesn&#x27;t
seem possible even though in the end the &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; and &lt;code&gt;&amp;amp;String&lt;&#x2F;code&gt; are
equivalent for our purposes. &lt;&#x2F;p&gt;
&lt;p&gt;That is, we&#x27;d like to accept any type which
&lt;code&gt;T&lt;&#x2F;code&gt; could ref in to, not any type which could ref in to &lt;code&gt;T&lt;&#x2F;code&gt; (which is
what &lt;code&gt;AsRef&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; provides us). Perhaps there are reasons this isn&#x27;t
viable and the type arguments used above should change, but it was a
frustrating issue to hit as a developer.&lt;&#x2F;p&gt;
&lt;p&gt;As a side note related to &lt;code&gt;AsRef&lt;&#x2F;code&gt;, it&#x27;d be nice to &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;3ntsbn&#x2F;whats_the_point_of_asref&#x2F;cvr5n5f&#x2F;&quot;&gt;introduce the syntax
mentioned here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve covered a lot of different issues here, but I really wanted to
emphasise my own experience in introducing Rust to a team and the common
concerns that come up.&lt;&#x2F;p&gt;
&lt;p&gt;In summary, during 2021 I&#x27;d like to see:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Rust expand to more domains outside of systems programming (i.e. web
development and data engineering).&lt;&#x2F;li&gt;
&lt;li&gt;Further language syntax improvements to keep Rust concise.&lt;&#x2F;li&gt;
&lt;li&gt;Continued improvements in IDE support (especially outside of VS Code).&lt;&#x2F;li&gt;
&lt;li&gt;Expanded documentation of common crates and use case examples (i.e.
&lt;a href=&quot;https:&#x2F;&#x2F;rust-lang-nursery.github.io&#x2F;rust-cookbook&#x2F;&quot;&gt;the Rust cookbook&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In my opinion, a major part of making this possible is making it easier
for newer Rust developers to contribute to Rust itself (and major
crates). For example, I have written about some issues I&#x27;ve had above
and linked to some related RFCs - but I would have no idea where to
start with testing implementations to solve any of those issues.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;forge.rust-lang.org&#x2F;&quot;&gt;Rust Forge&lt;&#x2F;a&gt; is a good start for this,
but I&#x27;d also love to see some worked examples of implementing features
and bug fixes. For example, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jonhoo&quot;&gt;Jon Gjengset&lt;&#x2F;a&gt;&#x27;s Crust of Rust series
has been excellent for covering the basics of the implementations of
some common Rust concepts, and it&#x27;d be great to see more blog posts focussed
on making improvements to Rust itself (or major crates).&lt;&#x2F;p&gt;
&lt;p&gt;Other possibilities are to host specific training sessions for new
contributors like &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=aS26sqT09Pw&quot;&gt;the Veloren project has done&lt;&#x2F;a&gt;,
or to host community bug-squashing days aimed at new contributors like
Arch Linux and KDE have done.&lt;&#x2F;p&gt;
&lt;p&gt;Having a larger pool of contributors would help to alleviate the
workload on current maintainers, and bring a more diverse range of
perspectives from different problem domains and platforms.&lt;&#x2F;p&gt;
&lt;p&gt;Overall, Rust is already in an excellent position with the most
welcoming community and most comprehensive documentation that I have
seen in any ecosystem. I look forward to what 2021 will bring!&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Retrospective of my first useful Rust project</title>
		<published>2020-09-05T00:00:00+00:00</published>
		<updated>2020-09-05T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jamesmcm.github.io/blog/vopono/" type="text/html"/>
		<id>https://jamesmcm.github.io/blog/vopono/</id>
		<content type="html">&lt;p&gt;This post is a retrospective of my first &amp;quot;useful&amp;quot; Rust project. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&quot;&gt;vopono&lt;&#x2F;a&gt; 
is a Linux program to launch applications in temporary network
namespaces (managed by vopono), in order to run specific applications
through VPN connections, without affecting the rest of your system.&lt;&#x2F;p&gt;
&lt;p&gt;vopono is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&quot;&gt;available on Github&lt;&#x2F;a&gt; (and in the &lt;a href=&quot;https:&#x2F;&#x2F;aur.archlinux.org&#x2F;packages&#x2F;vopono&#x2F;&quot;&gt;AUR on Arch Linux&lt;&#x2F;a&gt;) and
licensed under the GPLv3 license (&lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;philosophy&#x2F;pragmatic.html&quot;&gt;see reasoning here&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ll consider the motivation and background to creating vopono, the
upsides and downsides of writing it in Rust (and existing issues), and
some points about starting new side projects in general. I hope this
helps new Rust programmers starting their own first projects, or for
other programmers to consider using Rust.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Opinions expressed are solely my own and do not express the views or opinions of my employer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;background&quot;&gt;Background&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve used VPN services for many years, previously as a customer of
PrivateInternetAccess, and now with Mullvad (since
&lt;a href=&quot;https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=21584958&quot;&gt;PrivateInternetAccess was purchased by a less scrupulous parent company&lt;&#x2F;a&gt;), as it is very
useful for working around network traffic restrictions (e.g. SSH access
restrictions or blocked websites) whilst travelling.&lt;&#x2F;p&gt;
&lt;p&gt;However, I often wanted to be able to quickly connect to the VPN without
disrupting other ongoing connections (i.e. video calls, etc.). In 2015,
I learnt how network namespaces could do this (on Linux), and pieced together some
bash scripts for OpenVPN &lt;a href=&quot;https:&#x2F;&#x2F;unix.stackexchange.com&#x2F;questions&#x2F;149293&#x2F;feed-all-traffic-through-openvpn-for-a-specific-network-namespace-only&quot;&gt;from this StackExchange post&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I used this for a few years, but it was a bit inconvenient having to
manually launch the network namespace. Especially if you wanted to
connect to different servers in order to test geolocation for example.&lt;&#x2F;p&gt;
&lt;p&gt;In April 2020, Wireguard was merged in to the Linux kernel
5.6, and became much more readily available with VPN providers. This,
combined with the switch to Mullvad, inspired me to add Wireguard
support to the scripts I was using. But I thought it would be best to
also address the issues of manually managing the network namespaces and
create a comprehensive application to handle OpenVPN and Wireguard
connections for various VPN providers, and create and destroy the
network namespaces on demand. &lt;&#x2F;p&gt;
&lt;p&gt;This was the start of vopono, my first
useful Rust project (I suppose &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;s3rename&quot;&gt;s3rename&lt;&#x2F;a&gt; was also useful, but a much smaller
scope).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;benefits-of-rust&quot;&gt;Benefits of Rust&lt;&#x2F;h2&gt;
&lt;p&gt;I chose to write vopono in Rust as I am still learning the language, and
greatly appreciate the ease of debugging with tools like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-analyzer&#x2F;rust-analyzer&quot;&gt;rust-analyzer&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&quot;&gt;clippy&lt;&#x2F;a&gt;. There are many
other benefits too:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;enums&quot;&gt;Enums&lt;&#x2F;h3&gt;
&lt;p&gt;Rust&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch06-01-defining-an-enum.html&quot;&gt;native enum support&lt;&#x2F;a&gt; makes reasoning and debugging much easier
when dealing with enumerated values (like the choice between the TCP and
UDP protocols for OpenVPN connections). The Rust compiler forces us to
handle every possible value helping to prevent bugs from ever being
written.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;structopt&quot;&gt;StructOpt&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;structopt&quot;&gt;StructOpt&lt;&#x2F;a&gt; is a great crate for handling command-line options and
arguments via derived trait implementations over your structs defining
commands and subcommands. This allows you to abstract away dealing with command-line arguments directly,
and for the relevant code to be somewhat self-documenting (as &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;rust-by-example&#x2F;meta&#x2F;doc.html&quot;&gt;doc comments&lt;&#x2F;a&gt; are used to provide the user-facing help output).&lt;&#x2F;p&gt;
&lt;p&gt;Note that some developers prefer to use &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;clap&quot;&gt;clap&lt;&#x2F;a&gt; directly.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;result-and-anyhow&quot;&gt;Result and anyhow&lt;&#x2F;h3&gt;
&lt;p&gt;Rust&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;result&#x2F;enum.Result.html&quot;&gt;Result enum&lt;&#x2F;a&gt; 
and &lt;code&gt;?&lt;&#x2F;code&gt; operator (the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;edition-guide&#x2F;rust-2018&#x2F;error-handling-and-panics&#x2F;the-question-mark-operator-for-easier-error-handling.html&quot;&gt;try operator&lt;&#x2F;a&gt;)
make it simple and ergonomic to handle operations which may fail
(which are almost all operations when dealing with disk IO and
launching processes).&lt;&#x2F;p&gt;
&lt;p&gt;It is also very convenient when working with fallible operations over a
collection, where we may want to return to the user a list of operations
which failed. In Rust, we can 
&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;rust-by-example&#x2F;error&#x2F;iter_result.html&quot;&gt;filter and map over a collection of Results&lt;&#x2F;a&gt; 
to a collection of Errors and then return that to the user - this feels
very natural compared to other languages.&lt;&#x2F;p&gt;
&lt;p&gt;Combined with the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;anyhow&quot;&gt;anyhow crate&lt;&#x2F;a&gt;, it is easy to provide useful error
messages to the end-user whilst also keeping the code very concise.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;serde&quot;&gt;Serde&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;serde&quot;&gt;Serde crate&lt;&#x2F;a&gt; provides traits you can derive on your structs,
allowing for easy serialization and deserialization. &lt;&#x2F;p&gt;
&lt;p&gt;In vopono this is used to serialize and deserialize lockfiles, so that
if you launch a new application in an existing network namespace (via
vopono), the namespace will not be destroyed until &lt;em&gt;both&lt;&#x2F;em&gt; applications
have terminated.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;drop&quot;&gt;Drop&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;ops&#x2F;trait.Drop.html&quot;&gt;Drop trait&lt;&#x2F;a&gt; allows us to run a destructor when a struct is
dropped (i.e. goes out of scope). This is used in vopono to
automatically destroy the network namespaces when the application is
closed. I initially got the idea for using &lt;code&gt;Drop&lt;&#x2F;code&gt; this way from the
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;r-darwish&#x2F;alma&quot;&gt;ALMA source code&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Note this causes some issues (discussed below) when we want to skip
destructors in some cases. Also if vopono is instantly terminated (i.e.
&lt;code&gt;kill -9&lt;&#x2F;code&gt;) these will likely not run, so vopono is written to clean up
any orphaned resources when it is executed - i.e. namespaces or
lockfiles with no running applications.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cargo&quot;&gt;Cargo&lt;&#x2F;h3&gt;
&lt;p&gt;The Cargo package manager itself is a great benefit of using Rust. For
example, when writing vopono it made it trivial to add the
&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;compound_duration&quot;&gt;compound_duration&lt;&#x2F;a&gt; crate,
used only for reporting the uptime of running network namespaces.&lt;&#x2F;p&gt;
&lt;p&gt;The specification of the software license in the &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; file is
also a great feature, making it easy to verify that your dependencies
have compatible licenses.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;include-str-macro&quot;&gt;include_str macro&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;macro.include_str.html&quot;&gt;include_str macro&lt;&#x2F;a&gt; can be used to include a file on disk as a
static string in the binary at compile time. This is used in vopono for
providers where we cannot download certain files by other means e.g.
with TigerVPN because the configuration details are behind a login with
a captcha and there is no API.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rustls&quot;&gt;Rustls&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;rustls&quot;&gt;Rustls&lt;&#x2F;a&gt; is a TLS library which can be
used in place of OpenSSL. This is used in the &lt;code&gt;vopono sync&lt;&#x2F;code&gt; command,
which gets provider configuration files.&lt;&#x2F;p&gt;
&lt;p&gt;This subcommand relies on the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;reqwest&quot;&gt;reqwest crate&lt;&#x2F;a&gt;
to make HTTPS requests, but we want to avoid depending on OpenSSL to make it easier to
build a statically linked binary that will be independent of the runtime
environment. Fortunately we only need to set the &amp;quot;rustls&amp;quot; feature flag
in the reqwest dependency.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;musl-and-static-linking&quot;&gt;musl and static linking&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;x86_64-unknown-linux-musl&lt;&#x2F;code&gt; target can be used to (cross-)compile,
&lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2016&#x2F;05&#x2F;13&#x2F;rustup.html&quot;&gt;statically linking with musl&lt;&#x2F;a&gt; instead of dynamically linking to glibc
(the default target). This means we can deploy the resulting binary
without worrying about glibc version mismatches (if we deploy to a
platform with an earlier version of glibc).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;difficulties&quot;&gt;Difficulties&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;small-standard-library&quot;&gt;Small standard library&lt;&#x2F;h3&gt;
&lt;p&gt;If you come from scripting languages, you may find that Rust has a
smaller standard library compared to those languages. For example, there
is no recursive copy (&lt;code&gt;cp -r&lt;&#x2F;code&gt; equivalent) in the standard library
directly, and I had to do this using the 
&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;walkdir&quot;&gt;walkdir crate&lt;&#x2F;a&gt; and copying each item.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;compile-times&quot;&gt;Compile times&lt;&#x2F;h3&gt;
&lt;p&gt;Rust has longer compile times than most other languages (except perhaps
C++) this is particularly true when using crates which include
procedural macros.&lt;&#x2F;p&gt;
&lt;p&gt;There a few options to &lt;a href=&quot;https:&#x2F;&#x2F;vfoley.xyz&#x2F;rust-compile-speed-tips&#x2F;&quot;&gt;reduce compile times&lt;&#x2F;a&gt;
(also &lt;a href=&quot;https:&#x2F;&#x2F;endler.dev&#x2F;2020&#x2F;rust-compile-times&#x2F;&quot;&gt;see this more recent post&lt;&#x2F;a&gt;),
such as using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mozilla&#x2F;sccache&quot;&gt;sccache&lt;&#x2F;a&gt; to cache build artifacts.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;binary-size-and-feature-creep&quot;&gt;Binary size and feature creep&lt;&#x2F;h3&gt;
&lt;p&gt;As more dependencies are added, the final binary size can grow
considerably. To control this, it&#x27;s recommended to use &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;features.html&quot;&gt;feature flags&lt;&#x2F;a&gt;
in your &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; file (and disabling default features) to
include only what you need from large dependencies.&lt;&#x2F;p&gt;
&lt;p&gt;You can also use &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;cargo-udeps&quot;&gt;cargo-udeps&lt;&#x2F;a&gt; to
detect unused dependencies.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;minimum-rust-version-and-dependencies&quot;&gt;Minimum Rust version and dependencies&lt;&#x2F;h3&gt;
&lt;p&gt;The Rust features and parts of the standard library that you use will
result in an effective minimum Rust version for your project. I had &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&#x2F;issues&#x2F;2&quot;&gt;one
issue&lt;&#x2F;a&gt; result from the
&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;compound_duration&quot;&gt;compound_duration crate&lt;&#x2F;a&gt; mentioned above which raised the minimum Rust
version to 1.43.&lt;&#x2F;p&gt;
&lt;p&gt;As far as I know there is no way to automatically determine the minimum
Rust version, although &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;8kkigi&#x2F;how_to_find_out_a_minimum_rust_compiler_version&#x2F;&quot;&gt;this discussion on Reddit&lt;&#x2F;a&gt;
has scripts for compiling with many minor versions until you build
successfully.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ongoing-issues&quot;&gt;Ongoing issues&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;dialoguer-validation-and-passing-references-to-closures&quot;&gt;dialoguer validation and passing references to closures&lt;&#x2F;h3&gt;
&lt;p&gt;vopono uses the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;dialoguer&quot;&gt;dialoguer crate&lt;&#x2F;a&gt; for user input for the &lt;code&gt;vopono sync&lt;&#x2F;code&gt;
command. I also validate the input using the &lt;code&gt;validate_with()&lt;&#x2F;code&gt; method so
that the user gets feedback immediately and can correct any errors.&lt;&#x2F;p&gt;
&lt;p&gt;However, the &lt;code&gt;validate_with()&lt;&#x2F;code&gt; method &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;dialoguer&#x2F;0.6.2&#x2F;dialoguer&#x2F;struct.Input.html#method.validate_with&quot;&gt;requires that the closure used has
a static lifetime&lt;&#x2F;a&gt;.
This is problematic for checking whether the user-entered Wireguard private key
matches the chosen public key, since we need to include the previously-chosen
public key in the closure - but this doesn&#x27;t have a static lifetime.&lt;&#x2F;p&gt;
&lt;p&gt;For now I worked around this with extra clones (&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&#x2F;blob&#x2F;master&#x2F;src&#x2F;providers&#x2F;mozilla&#x2F;wireguard.rs#L65&quot;&gt;see devices_clone&lt;&#x2F;a&gt;)
but hopefully a better solution is possible. Perhaps the static lifetime
restriction in dialoguer could also be relaxed (since we know the
closure will terminate before we receive the input and continue).&lt;&#x2F;p&gt;
&lt;p&gt;This is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&#x2F;issues&#x2F;19&quot;&gt;tracked in this issue&lt;&#x2F;a&gt;. If you have any suggestions please add a comment there!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;skipping-destructors&quot;&gt;Skipping destructors&lt;&#x2F;h3&gt;
&lt;p&gt;As mentioned previously, vopono uses the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;ops&#x2F;trait.Drop.html&quot;&gt;Drop trait&lt;&#x2F;a&gt; to
automatically clean up resources when the relevant structs go out of
scope. However, sometimes we don&#x27;t want to trigger these destructors but
still have the structs go out of scope - for example, if we have
multiple vopono processes running applications in the same network
namespace, then we don&#x27;t want to destroy the network namespace until the
final application has terminated. So if other lockfiles still exist, we need
to prevent the clean-up destructors from firing.&lt;&#x2F;p&gt;
&lt;p&gt;For now this is done by putting the relevant structs in a Box, and then
calling &lt;code&gt;Box::leak()&lt;&#x2F;code&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;boxed&#x2F;struct.Box.html#method.leak&quot;&gt;docs here&lt;&#x2F;a&gt;).
This works but feels a bit clunky when dealing with multiple structs&#x2F;fields (e.g. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&#x2F;blob&#x2F;4ebf4b6bdc493c4d95bf6e237136b330723aaf27&#x2F;src&#x2F;netns.rs#L308&quot;&gt;here preventing the destructors when another vopono instance is using the same namespace&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;debug!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Skipping destructors since other vopono instance using this namespace!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; openvpn = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.openvpn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; openvpn = Box::new(openvpn);
&lt;&#x2F;span&gt;&lt;span&gt;Box::leak(openvpn);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One possible alternative might be to use &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;mem&#x2F;struct.ManuallyDrop.html&quot;&gt;std::mem::ManuallyDrop&lt;&#x2F;a&gt;
, however then the &lt;code&gt;drop()&lt;&#x2F;code&gt; method is unsafe, so this might end up being
even less ergonomic.&lt;&#x2F;p&gt;
&lt;p&gt;This is tracked &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&#x2F;issues&#x2F;20&quot;&gt;in this issue&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;vpn-providers-enum-or-structs-with-traits&quot;&gt;VPN Providers - enum or structs with traits?&lt;&#x2F;h3&gt;
&lt;p&gt;The most difficult design decision was regarding how to handle VPN
provider specific code (i.e. the code that generates the OpenVPN and
Wireguard configuration files when using &lt;code&gt;vopono sync&lt;&#x2F;code&gt;), such that it
would be easy for contributors to add support for new VPN providers.&lt;&#x2F;p&gt;
&lt;p&gt;Ideally we would get as close as possible to the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Contributors only need to add new source code files to add support for a new VPN
provider.&lt;&#x2F;li&gt;
&lt;li&gt;The VPN provider specific code is independent of other VPN provider code.&lt;&#x2F;li&gt;
&lt;li&gt;The interfaces that the code must provide are clear to the contributor,
so they know what they need to implement.&lt;&#x2F;li&gt;
&lt;li&gt;They do not need to edit the shared&#x2F;core parts of vopono.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Initially I had planned to use an enum for providers (since we need one
to handle command line arguments anyway) and implement the
code directly on that enum. However, then all the implementation code
would be together in the enum Impl, since we cannot do separate Impl blocks for different
enum variants (note that even the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;varkor&#x2F;rfcs&#x2F;blob&#x2F;enum-variant-types&#x2F;text&#x2F;0000-enum-variant-types.md&quot;&gt;enum variant type RFC&lt;&#x2F;a&gt;
would prohibit this). This breaks the first 2 points above.&lt;&#x2F;p&gt;
&lt;p&gt;Therefore I chose to use traits, creating a base VpnProvider trait, and
then OpenVpnProvider and WireguardProvider traits which have that as a
supertrait. This way the interfaces are clear to any contributors and
each VPN provider can be a separate struct implementing these traits (it
also gives contributors a lot of freedom in how they implement them - as
they can store state in the struct, etc.).&lt;&#x2F;p&gt;
&lt;p&gt;The idea was that we could then pass trait objects to the functions that
use the VPN provider objects with dynamic dispatch, i.e. as &lt;code&gt;Box&amp;lt;dyn VpnProvider&amp;gt;&lt;&#x2F;code&gt;, and then check if the actual struct implements the
necessary &lt;code&gt;WireguardProvider&lt;&#x2F;code&gt; or &lt;code&gt;OpenVpnProvider&lt;&#x2F;code&gt; traits depending on
the command line arguments, and return an error if not.&lt;&#x2F;p&gt;
&lt;p&gt;The problem is that there is no way to try to downcast from a supertrait
trait object to a subtrait. We want something like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;myfn&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span&gt;: Box&amp;lt;dyn VpnProvider&amp;gt;) -&amp;gt; anyhow::Result&amp;lt;()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; as_wireguard: Box&amp;lt;dyn WireguardProvider&amp;gt; = try_downcast&amp;lt;WireguardProvider&amp;gt;(obj)?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But no such function exists and, as far as I can tell, the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;downcast-rs&quot;&gt;downcast-rs&lt;&#x2F;a&gt;
crate is for downcasting to concrete types, not subtrait trait objects.
&lt;a href=&quot;https:&#x2F;&#x2F;users.rust-lang.org&#x2F;t&#x2F;casting-from-dyn-t-to-dyn-u-where-u-t-solved&#x2F;32213&quot;&gt;This forum post&lt;&#x2F;a&gt; offers
some possibilities using &lt;code&gt;std::mem::transmute&lt;&#x2F;code&gt; but it is unsafe, and not
guaranteed to be stable (note the need for &lt;code&gt;#[repr(C)]&lt;&#x2F;code&gt; for example).&lt;&#x2F;p&gt;
&lt;p&gt;For now I worked around this by using the fact that we have the enum
from the command line arguments, so &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&#x2F;blob&#x2F;master&#x2F;src&#x2F;providers&#x2F;mod.rs#L42&quot;&gt;we can use that to try to generate
the trait object we want&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Do this since we can&amp;#39;t downcast from Provider to other trait objects
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;VpnProvider {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_dyn_wireguard_provider&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; anyhow::Result&amp;lt;Box&amp;lt;dyn WireguardProvider&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;::Mullvad =&amp;gt; Ok(Box::new(mullvad::Mullvad {})),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;::MozillaVpn =&amp;gt; Ok(Box::new(mozilla::MozillaVPN {})),
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span&gt;::Custom =&amp;gt; Err(anyhow!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Custom provider uses separate logic&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)),
&lt;&#x2F;span&gt;&lt;span&gt;            _ =&amp;gt; Err(anyhow!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Wireguard not implemented&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But this is a painful workaround as we have a fair amount of boilerplate
code and some extra allocation of trait objects.&lt;&#x2F;p&gt;
&lt;p&gt;This also slightly violates the 4th point in the above requirements,
that contributes now have to also add the enum variant entry to
&lt;code&gt;providers&#x2F;mod.rs&lt;&#x2F;code&gt;, but at least this is just a small boilerplate change
and the rest of the implementation code can be in its own files with a
lot of freedom regarding implementation.&lt;&#x2F;p&gt;
&lt;p&gt;This &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&#x2F;issues&#x2F;21&quot;&gt;issue is tracked on Github here&lt;&#x2F;a&gt;,
please add a comment if you have any suggestions as this is quite a
generic problem.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;releases&quot;&gt;Releases&lt;&#x2F;h2&gt;
&lt;p&gt;Releases of vopono are made &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&#x2F;releases&quot;&gt;on Github&lt;&#x2F;a&gt;, and published to &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;vopono&quot;&gt;crates.io&lt;&#x2F;a&gt;
and &lt;a href=&quot;https:&#x2F;&#x2F;aur.archlinux.org&#x2F;packages&#x2F;vopono-bin&#x2F;&quot;&gt;the AUR&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;github-actions&quot;&gt;Github Actions&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;ebbflow.io&#x2F;&quot;&gt;ebbflow project&lt;&#x2F;a&gt; released &lt;a href=&quot;https:&#x2F;&#x2F;ebbflow.io&#x2F;blog&#x2F;vending-linux-2&quot;&gt;Github action workflow files&lt;&#x2F;a&gt;, which I &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&#x2F;blob&#x2F;master&#x2F;.github&#x2F;workflows&#x2F;rust.yml&quot;&gt;adapted for use in vopono&lt;&#x2F;a&gt;
to generate .deb packages with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mmstick&#x2F;cargo-deb&quot;&gt;cargo-deb&lt;&#x2F;a&gt;,
.rpm packages with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;iqlusioninc&#x2F;cargo-rpm&quot;&gt;cargo-rpm&lt;&#x2F;a&gt; and the stand-alone binaries for release.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;arch-user-repository&quot;&gt;Arch User Repository&lt;&#x2F;h3&gt;
&lt;p&gt;Releasing a package on &lt;a href=&quot;https:&#x2F;&#x2F;aur.archlinux.org&#x2F;&quot;&gt;the AUR&lt;&#x2F;a&gt; is very simple. Review &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;AUR_submission_guidelines&quot;&gt;this wiki
page for submitting packages&lt;&#x2F;a&gt;,
and &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;index.php&#x2F;PKGBUILD&quot;&gt;this wiki page for the PKGBUILD syntax&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;Overall it has been a longer project than I originally envisioned, but
I&#x27;m glad I chose to use Rust and add the extra features like automatic
killswitches (so traffic outside the VPN in the network namespace is
blocked) and Wireguard support.&lt;&#x2F;p&gt;
&lt;p&gt;If you are considering starting a new project in Rust, I hope the issues
covered above are useful. Finally, when
considering new projects my main advice would be to build something
that you can use yourself, and that will be useful to you. There will be
times when you hit difficult problems and have little time to spend on the
project, and it&#x27;s very helpful to be able to use the result day-to-day
to maintain motivation.&lt;&#x2F;p&gt;
&lt;p&gt;Furthermore, not all feedback will be positive. To quote one comment on
Reddit from a post for the first vopono release:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Looking at the monstrosity of the code, this looks like a bash script that someone decided to write in Rust for no apparent reason.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Fortunately, I was later able to get some useful advice on parts of the code
to improve (mainly where the design had been copied from the initial
shell scripts), despite the commenter&#x27;s hostility to Rust. If I&#x27;d
written something that I wasn&#x27;t using myself, I think this would be much harder
to handle. But since I use vopono myself every day, I know that it is
useful, and can be sure that it will be useful for others too (even if
not for that specific commenter).&lt;&#x2F;p&gt;
&lt;p&gt;I chose to call this post a retrospective instead of a post-mortem, as
vopono isn&#x27;t dead or finished. Hopefully I&#x27;ll find better solutions to
the issues mentioned above, and there are &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;vopono&#x2F;issues&#x2F;10&quot;&gt;always more VPN providers to support!&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Serverless Data Ingestion with Rust and AWS SES</title>
		<published>2020-08-29T00:00:00+00:00</published>
		<updated>2020-08-29T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jamesmcm.github.io/blog/rust-ses/" type="text/html"/>
		<id>https://jamesmcm.github.io/blog/rust-ses/</id>
		<content type="html">&lt;p&gt;In this post we will set up a simple, serverless data ingestion pipeline using Rust,
AWS Lambda and AWS SES with Workmail. &lt;&#x2F;p&gt;
&lt;p&gt;We will handle multiple types of
AWS events with one Lambda function, parse received emails
with the mailparse crate, and send email with SES and the lettre crate.&lt;&#x2F;p&gt;
&lt;p&gt;The complete code for this example is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;rust_ses_example&quot;&gt;available on GitHub here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Opinions expressed are solely my own and do not express the views or opinions of my employer.&lt;&#x2F;p&gt;
&lt;p&gt;You can follow along using the AWS Free Tier, in this case all resources
are within the AWS Free Tier (at least for new users). Note the Workmail
free trial is only for 30 days (but will only cost $4 a month for one
user after that).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;process-requirements&quot;&gt;Process Requirements&lt;&#x2F;h2&gt;
&lt;p&gt;In this process we would like to send an email to a recipient, prompting
them to send us some CSV data as an attachment. When we receive that
email we need to parse the attachment, validate its contents, save the
parsed content in S3 (if we are able to parse it) and email the
recipient with either a confirmation of success, or a list of
encountered errors (either in deserialization of the attachment or
validation) and their file for reference.&lt;&#x2F;p&gt;
&lt;p&gt;Note that in &lt;a href=&quot;http:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;2020&#x2F;04&#x2F;19&#x2F;data-engineering-with-rust-and-aws-lambda&#x2F;#en&quot;&gt;a previous post&lt;&#x2F;a&gt; 
I dealt with creating a Lambda based
pipeline for parsing Excel files and loading the resulting CSV to Redshift. There are a
few differences and things to note in this process:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We will use &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;rustls&quot;&gt;rustls&lt;&#x2F;a&gt; not OpenSSL (so it is easier to statically link
with musl) - in this case, we only need to select that feature in
Rusoto.&lt;&#x2F;li&gt;
&lt;li&gt;The Rusoto API &lt;a href=&quot;https:&#x2F;&#x2F;users.rust-lang.org&#x2F;t&#x2F;rusoto-how-to-make-sync-calls&#x2F;41317&quot;&gt;no longer provides the .sync() method&lt;&#x2F;a&gt;, so we must instantiate
an async runtime to block on the Future returned.&lt;&#x2F;li&gt;
&lt;li&gt;I am still using the crates.io version of the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;lambda_runtime&quot;&gt;lambda_runtime&lt;&#x2F;a&gt;
crate (currently v0.2.1), so we do not have complete async support (the Github master branch version &lt;em&gt;does&lt;&#x2F;em&gt;
allow you to just use async functions directly!)&lt;&#x2F;li&gt;
&lt;li&gt;Here we will deal with parsing MIME-formatted emails.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Note that the reasoning for using Rust is the same - mainly that we
can deploy a statically linked binary with musl, and we can easily share Rust code
between different Lambda functions via crates with feature gates, so we can
include only what we need - helping to control binary size.&lt;&#x2F;p&gt;
&lt;p&gt;Overall, we can break this process down in to the following steps:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Parsing a received email (we will set up Workmail to save all emails
directly to an S3 bucket, and trigger our Lambda function with the S3
CreateObject event).&lt;&#x2F;li&gt;
&lt;li&gt;Deserializing and validating the attached CSV file.&lt;&#x2F;li&gt;
&lt;li&gt;Reading and writing a file to an S3 bucket.&lt;&#x2F;li&gt;
&lt;li&gt;Sending an email with an attachment (this is harder than it sounds,
since we have to use SES&#x27;s SendRawEmail API)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;&#x2F;h2&gt;
&lt;p&gt;We will follow the order of the steps above (i.e. handling the receipt
of emails first, and then sending emails). First we need to set up our
AWS resources.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;aws-resources&quot;&gt;AWS resources&lt;&#x2F;h3&gt;
&lt;p&gt;Create an AWS Workmail organisation (note this will charge $4 a month
after 30 days) in the &lt;a href=&quot;https:&#x2F;&#x2F;eu-west-1.console.aws.amazon.com&#x2F;workmail&#x2F;home&quot;&gt;Workmail console&lt;&#x2F;a&gt;. 
We only need the default user and domain. Now in the SES console in
&lt;code&gt;Email Receiving &amp;gt; Rule Sets&lt;&#x2F;code&gt;, edit the &lt;code&gt;INBOUND_MAIL&lt;&#x2F;code&gt; Rule Set, and
edit the existing rule to write to an S3 bucket (create a bucket if you
don&#x27;t have one). You can also specify specific recipients for which to
apply the rule.&lt;&#x2F;p&gt;
&lt;p&gt;Note the same effect can be achieved by setting a rule in the Workmail
organisation to &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;workmail&#x2F;latest&#x2F;adminguide&#x2F;lambda.html&quot;&gt;trigger a Lambda directly&lt;&#x2F;a&gt;, we would then need to use
the &lt;code&gt;GetRawMessageContent&lt;&#x2F;code&gt; call in the Workmail Message Flow API with the message ID in the event. Since it&#x27;s
useful to have an archive of all received emails on S3, we use the S3
trigger approach here.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mime-format&quot;&gt;MIME format&lt;&#x2F;h3&gt;
&lt;p&gt;You can now test sending an email to the domain you created (and a
specific recipient if you set the rule to be specific). You should see a
file created like the following, containing the MIME-formatted message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;MIME-Version: 1.0
&lt;&#x2F;span&gt;&lt;span&gt;From: SENDER NAME &amp;lt;SENDER_EMAIL@gmail.com&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;Date: Sat, 8 Aug 2020 22:54:58 +0200
&lt;&#x2F;span&gt;&lt;span&gt;Message-ID: &amp;lt;CAMJE-1uq35qGwMeMvryzpLXuN4htOHTDHt4kiLD-7K97XwFE7A@mail.gmail.com&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;Subject: testmail
&lt;&#x2F;span&gt;&lt;span&gt;To: test@testses.awsapps.com
&lt;&#x2F;span&gt;&lt;span&gt;Content-Type: multipart&#x2F;alternative; boundary=&amp;quot;000000000000d2fb5805ac63efb8&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;--000000000000d2fb5805ac63efb8
&lt;&#x2F;span&gt;&lt;span&gt;Content-Type: text&#x2F;plain; charset=&amp;quot;UTF-8&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;testbody
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;--000000000000d2fb5805ac63efb8
&lt;&#x2F;span&gt;&lt;span&gt;Content-Type: text&#x2F;html; charset=&amp;quot;UTF-8&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;div dir=&amp;quot;ltr&amp;quot;&amp;gt;testbody&amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;--000000000000d2fb5805ac63efb8--
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this case &lt;code&gt;testses&lt;&#x2F;code&gt; was the Workmail domain, and the email was sent
via Gmail (in practice, there are a load of DKIM headers, etc. prior to
this part - but we will not use those).&lt;&#x2F;p&gt;
&lt;p&gt;The MIME format consists of many headers (containing some of the most
relevant information such as sender address, message ID, subject and
recipient), and a body split up in to parts. Each part is terminated
with a boundary separator: &lt;code&gt;--000000000000d2fb5805ac63efb8&lt;&#x2F;code&gt; in the above case
(note this is specified where the multipart begins).&lt;&#x2F;p&gt;
&lt;p&gt;In the above case we can see the email
contains both a plaintext and HTML version. The body is
&lt;code&gt;multipart&#x2F;alternative&lt;&#x2F;code&gt; so that the client knows it should choose
between the two parts. If it were &lt;code&gt;multipart&#x2F;mixed&lt;&#x2F;code&gt; then the client
would show both parts, in this case effectively duplicating the body for
the reader. You can read about the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;MIME&quot;&gt;MIME specification&lt;&#x2F;a&gt;
in detail but we won&#x27;t need much more than this for our purposes.&lt;&#x2F;p&gt;
&lt;p&gt;The most important thing to note is that multiparts can be nested
(as different multiparts will have different boundary strings). If we
send an email with a simple plaintext attachment we see the following:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Content-Type: multipart&#x2F;mixed; boundary=&amp;quot;00000000000025ab0605ac643145&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;--00000000000025ab0605ac643145
&lt;&#x2F;span&gt;&lt;span&gt;Content-Type: multipart&#x2F;alternative; boundary=&amp;quot;00000000000025ab0305ac643143&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;--00000000000025ab0305ac643143
&lt;&#x2F;span&gt;&lt;span&gt;Content-Type: text&#x2F;plain; charset=&amp;quot;UTF-8&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;attachtest body
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;--00000000000025ab0305ac643143
&lt;&#x2F;span&gt;&lt;span&gt;Content-Type: text&#x2F;html; charset=&amp;quot;UTF-8&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;div dir=&amp;quot;ltr&amp;quot;&amp;gt;attachtest body&amp;lt;&#x2F;div&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;--00000000000025ab0305ac643143--
&lt;&#x2F;span&gt;&lt;span&gt;--00000000000025ab0605ac643145
&lt;&#x2F;span&gt;&lt;span&gt;Content-Type: text&#x2F;plain; charset=&amp;quot;US-ASCII&amp;quot;; name=&amp;quot;test_attachment.txt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Content-Disposition: attachment; filename=&amp;quot;test_attachment.txt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Content-Transfer-Encoding: base64
&lt;&#x2F;span&gt;&lt;span&gt;Content-ID: &amp;lt;f_kdm5n1pg0&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;X-Attachment-Id: f_kdm5n1pg0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;cGxhaW50ZXh0Cgo=
&lt;&#x2F;span&gt;&lt;span&gt;--00000000000025ab0605ac643145--
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have the first multipart which is mixed and contains:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A nested multipart for the actual body, this is an alternative multipart so
the client chooses between showing the HTML email or the plaintext
email.&lt;&#x2F;li&gt;
&lt;li&gt;A single part which is the plaintext attachment, encoded in base64.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So the client will choose to display either the HTML or plaintext body, and always
include the attachment.&lt;&#x2F;p&gt;
&lt;p&gt;Already we can start to imagine how we could parse this. Fortunately
there are already crates to do this! In this post we will use the
&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;mailparse&quot;&gt;mailparse crate&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;reading-received-emails-with-mailparse&quot;&gt;Reading received emails with mailparse&lt;&#x2F;h3&gt;
&lt;p&gt;We use the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;mailparse&#x2F;0.13.0&#x2F;mailparse&#x2F;fn.parse_mail.html&quot;&gt;parse_mail function&lt;&#x2F;a&gt;
to parse the MIME message (from bytes) in to a usable struct, and
extract the attachment body and attachment filename for the first
attachment:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cap = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse_mail&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;file)?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; attachment = cap
&lt;&#x2F;span&gt;&lt;span&gt;        .subparts
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_content_disposition&lt;&#x2F;span&gt;&lt;span&gt;().disposition == mailparse::DispositionType::Attachment)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;No attachment&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; attachment_name = attachment
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_content_disposition&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .params
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;filename&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;No filename&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; attachment = attachment.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_body&lt;&#x2F;span&gt;&lt;span&gt;()?;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This gives us the first attachment as a &lt;code&gt;String&lt;&#x2F;code&gt;. Note if we were not dealing
with a plaintext format, i.e. we had a zipped file, etc., we would use
&lt;code&gt;get_body_raw()&lt;&#x2F;code&gt; to get a &lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;&#x2F;code&gt; of bytes. This already handles
the base64 decoding for us in both cases!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;deserializing-and-validating-the-csv&quot;&gt;Deserializing and validating the CSV&lt;&#x2F;h3&gt;
&lt;p&gt;In our case we expect one attachment, which will be a CSV file. If we
have any errors reading the file we want to return these to the sender.
For this simple example, we have a CSV with three fields:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A positive ID number (i.e. &lt;code&gt;u32&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;A start date&lt;&#x2F;li&gt;
&lt;li&gt;An end date&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We will use the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;chrono&quot;&gt;chrono crate&lt;&#x2F;a&gt; to deserialize the dates,
and the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;csv&quot;&gt;csv crate&lt;&#x2F;a&gt; with &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;serde&quot;&gt;Serde&lt;&#x2F;a&gt;
to do the overall deserialization.&lt;&#x2F;p&gt;
&lt;p&gt;We set up for deserialization (and serialization for the dates for
later, so we maintain the same format) as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug, Deserialize, Serialize, PartialEq)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Entry {
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serde&lt;&#x2F;span&gt;&lt;span&gt;(alias = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serde&lt;&#x2F;span&gt;&lt;span&gt;(deserialize_with = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;de_datetime&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, serialize_with = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;se_datetime&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start_date&lt;&#x2F;span&gt;&lt;span&gt;: NaiveDateTime,
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serde&lt;&#x2F;span&gt;&lt;span&gt;(deserialize_with = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;de_datetime&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, serialize_with = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;se_datetime&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end_date&lt;&#x2F;span&gt;&lt;span&gt;: NaiveDateTime,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;de_datetime&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;de&lt;&#x2F;span&gt;&lt;span&gt;, D&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deserializer&lt;&#x2F;span&gt;&lt;span&gt;: D) -&amp;gt; Result&amp;lt;NaiveDateTime, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;D::&lt;&#x2F;span&gt;&lt;span&gt;Error&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    D: serde::Deserializer&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;de&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s = String::deserialize(deserializer)?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;NaiveDateTime::parse_from_str(&amp;amp;s, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;%Y-%m-%d %H:%M:%S&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(x) =&amp;gt; Ok(x),
&lt;&#x2F;span&gt;&lt;span&gt;        Err(x) =&amp;gt; Err(serde::de::Error::custom(x)),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;se_datetime&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;S&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dt&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;NaiveDateTime, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serializer&lt;&#x2F;span&gt;&lt;span&gt;: S) -&amp;gt; Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;S::&lt;&#x2F;span&gt;&lt;span&gt;Ok, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;S::&lt;&#x2F;span&gt;&lt;span&gt;Error&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    S: serde::Serializer,
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; t = dt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;%Y-%m-%d %H:%M:%S&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    serializer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect_str&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;t)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We specify the deserialization and serialization functions for the dates
so that we can specify the format to match the original input. Note the
alias attribute means we can deserialize from either &amp;quot;ID&amp;quot; or &amp;quot;id&amp;quot;, see
&lt;a href=&quot;https:&#x2F;&#x2F;serde.rs&#x2F;field-attrs.html&quot;&gt;the Serde field attributes for more details&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Then to deserialize we use:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;deserialize_csv&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attachment&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; (Vec&amp;lt;Entry&amp;gt;, Vec&amp;lt;csv::Error&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; rdr = csv::Reader::from_reader(Cursor::new(attachment.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;trim&lt;&#x2F;span&gt;&lt;span&gt;()));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; records: Vec&amp;lt;Entry&amp;gt; = Vec::with_capacity(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; de_errors: Vec&amp;lt;csv::Error&amp;gt; = Vec::new();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; result in rdr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;deserialize&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; result {
&lt;&#x2F;span&gt;&lt;span&gt;            Ok(record) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                records.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(record);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            Err(error) =&amp;gt; de_errors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(error),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    (records, de_errors)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note we put any errors in to the &lt;code&gt;de_errors&lt;&#x2F;code&gt; Vec, so if there are any,
we can later parse them to return to the sender.&lt;&#x2F;p&gt;
&lt;p&gt;We validate the records with the following functions, passing in a
reference to the &lt;code&gt;Vec&amp;lt;Entry&amp;gt;&lt;&#x2F;code&gt; from above (since we can choose our error
type here, we use &lt;code&gt;anyhow::Error&lt;&#x2F;code&gt; for simplicity):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;validate_record&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;Entry) -&amp;gt; Result&amp;lt;()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; r.start_date &amp;gt; r.end_date {
&lt;&#x2F;span&gt;&lt;span&gt;        Err(anyhow!(
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Start date after end date for entry: {}, {}, {}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            r.id,
&lt;&#x2F;span&gt;&lt;span&gt;            r.start_date,
&lt;&#x2F;span&gt;&lt;span&gt;            r.end_date
&lt;&#x2F;span&gt;&lt;span&gt;        ))
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;validate_all_records&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;records&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[Entry]) -&amp;gt; Vec&amp;lt;anyhow::Error&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    records
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;validate_record&lt;&#x2F;span&gt;&lt;span&gt;(x))
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;filter_map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can use the above Vectors of errors to generate an error email if
there are any errors present. But first we need to deal with sending an
email with SES.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sending-an-email&quot;&gt;Sending an email&lt;&#x2F;h3&gt;
&lt;p&gt;To send an email with SES, there are two options:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;ses&#x2F;latest&#x2F;APIReference&#x2F;API_SendEmail.html&quot;&gt;SendEmail&lt;&#x2F;a&gt; for sending emails without attachments. This is easy-to-use but unfortunately we need to send attachments.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;ses&#x2F;latest&#x2F;APIReference&#x2F;API_SendRawEmail.html&quot;&gt;SendRawEmail&lt;&#x2F;a&gt; for sending a raw MIME email, including attachments.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;So we will use &lt;a href=&quot;https:&#x2F;&#x2F;rusoto.github.io&#x2F;rusoto&#x2F;rusoto_ses&#x2F;struct.SendRawEmailRequest.html&quot;&gt;SendRawEmailRequest&lt;&#x2F;a&gt; in Rusoto
to send MIME emails. But first of all we need to construct our MIME
email. To do this, we will use the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;lettre&quot;&gt;lettre crate&lt;&#x2F;a&gt;,
specifically the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;lettre&#x2F;0.10.0-alpha.1&#x2F;lettre&#x2F;message&#x2F;struct.MessageBuilder.html&quot;&gt;MessageBuilder&lt;&#x2F;a&gt;
in the current alpha version (note we use the 0.10 alpha in order to
use rustls).&lt;&#x2F;p&gt;
&lt;p&gt;By default SES will be in &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;ses&#x2F;latest&#x2F;DeveloperGuide&#x2F;request-production-access.html&quot;&gt;Sandbox mode&lt;&#x2F;a&gt;. This means you must
verify the email addresses that you want to send to (and from) in the
SES console.&lt;&#x2F;p&gt;
&lt;p&gt;The full code is available in 
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;rust_ses_example&#x2F;blob&#x2F;master&#x2F;src&#x2F;email.rs&quot;&gt;the Github repo&lt;&#x2F;a&gt;.
Here is an excerpt showing how to handle adding the attachment part
if necessary:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Set headers from arguments
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; email = Message::builder()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span&gt;(recipient.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;subject&lt;&#x2F;span&gt;&lt;span&gt;(subject);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Deal with text and HTML body - omitted here
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; let mpart =  ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Add attachment if present
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; mpart = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span&gt;Some(attachment) = attachment {
&lt;&#x2F;span&gt;&lt;span&gt;        mpart.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;singlepart&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            SinglePart::base64()
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;header&lt;&#x2F;span&gt;&lt;span&gt;(header::ContentType(attachment.mime.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()))
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;header&lt;&#x2F;span&gt;&lt;span&gt;(lettre::message::header::ContentDisposition {
&lt;&#x2F;span&gt;&lt;span&gt;                    disposition: DispositionType::Attachment,
&lt;&#x2F;span&gt;&lt;span&gt;                    parameters: vec![DispositionParam::Filename(
&lt;&#x2F;span&gt;&lt;span&gt;                        Charset::Us_Ascii,
&lt;&#x2F;span&gt;&lt;span&gt;                        None,
&lt;&#x2F;span&gt;&lt;span&gt;                        attachment.name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_vec&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; the bytes of the filename
&lt;&#x2F;span&gt;&lt;span&gt;                    )],
&lt;&#x2F;span&gt;&lt;span&gt;                })
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;(attachment.attachment),
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        mpart
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; email = email.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;multipart&lt;&#x2F;span&gt;&lt;span&gt;(mpart)?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; msg_string = email.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;formatted&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note that we don&#x27;t need to base64 encode the attachment ourselves,
lettre will do this for us.&lt;&#x2F;p&gt;
&lt;p&gt;Then we make the request with Rusoto, note that we must base64 encode
our message in the request in the &lt;code&gt;RawMessage&lt;&#x2F;code&gt; struct! Also note that we
need to block on the Future returned from &lt;code&gt;send_raw_email()&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; raw_message = rusoto_ses::RawMessage {
&lt;&#x2F;span&gt;&lt;span&gt;        data: bytes::Bytes::from(base64::encode(msg_string)),
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; request = rusoto_ses::SendRawEmailRequest {
&lt;&#x2F;span&gt;&lt;span&gt;        configuration_set_name: None,
&lt;&#x2F;span&gt;&lt;span&gt;        destinations: None,
&lt;&#x2F;span&gt;&lt;span&gt;        from_arn: None,
&lt;&#x2F;span&gt;&lt;span&gt;        raw_message,
&lt;&#x2F;span&gt;&lt;span&gt;        return_path_arn: None,
&lt;&#x2F;span&gt;&lt;span&gt;        source: None,
&lt;&#x2F;span&gt;&lt;span&gt;        source_arn: None,
&lt;&#x2F;span&gt;&lt;span&gt;        tags: None,
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; fut = ses_client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send_raw_email&lt;&#x2F;span&gt;&lt;span&gt;(request);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; response = rt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;block_on&lt;&#x2F;span&gt;&lt;span&gt;(fut)?;
&lt;&#x2F;span&gt;&lt;span&gt;    info!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Email sent: {:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, response);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can receive and send emails, and parse and validate the CSV
attachments, we only need to put it together for the Lambda function.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;s3&quot;&gt;S3&lt;&#x2F;h3&gt;
&lt;p&gt;First we need to be able to read and write objects to S3, in order to
write the CSV we receive after validation, and read it when we send the
prompt email triggered with a Cloudwatch event.&lt;&#x2F;p&gt;
&lt;p&gt;This is simple to achieve with Rusoto, but note we need to block on the
returned futures just as in the SES case:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_file_from_s3&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bucket&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s3_client&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;S3Client,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rt&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;tokio::runtime::Runtime,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    info!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Reading bucket: {}, key: {}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, bucket, key);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s3file_fut = s3_client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_object&lt;&#x2F;span&gt;&lt;span&gt;(GetObjectRequest {
&lt;&#x2F;span&gt;&lt;span&gt;        bucket: bucket.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        key: key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        ..Default::default()
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s3file = rt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;block_on&lt;&#x2F;span&gt;&lt;span&gt;(s3file_fut)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; buffer: Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = Vec::new();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _file = s3file
&lt;&#x2F;span&gt;&lt;span&gt;        .body
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_blocking_read&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read_to_end&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; buffer)?;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(buffer)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;write_file_to_s3&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bucket&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s3_client&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;S3Client,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rt&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;tokio::runtime::Runtime,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; fut = s3_client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;put_object&lt;&#x2F;span&gt;&lt;span&gt;(PutObjectRequest {
&lt;&#x2F;span&gt;&lt;span&gt;        bucket: bucket.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        key: key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        body: Some(file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;()),
&lt;&#x2F;span&gt;&lt;span&gt;        ..Default::default()
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _response = rt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;block_on&lt;&#x2F;span&gt;&lt;span&gt;(fut)?;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can actually operate on the S3 event the Lambda function will
receive as a trigger for received emails (by extracting the S3 key from
the event and reading it).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;aws-events-and-lambda&quot;&gt;AWS events and Lambda&lt;&#x2F;h3&gt;
&lt;p&gt;We will use the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;aws_lambda_events&quot;&gt;aws_lambda_events&lt;&#x2F;a&gt;
crate for deserializing the events we receive. In this case we want to
handle two different events - the Cloudwatch event from a fixed time
trigger to send a prompt email, and the S3 event from received emails
(being written to S3 via the SES&#x2F;Workmail inbound mail rule).&lt;&#x2F;p&gt;
&lt;p&gt;We can do this by using the untagged Serde attribute and our own enum,
acting as a wrapper over the possibilities:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Serialize, Deserialize, Debug)]
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serde&lt;&#x2F;span&gt;&lt;span&gt;(untagged)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;EventEnum {
&lt;&#x2F;span&gt;&lt;span&gt;    S3Event(aws_lambda_events::event::s3::S3Event),
&lt;&#x2F;span&gt;&lt;span&gt;    CloudWatchEvent(aws_lambda_events::event::cloudwatch_events::CloudWatchEvent),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;See the &lt;a href=&quot;https:&#x2F;&#x2F;serde.rs&#x2F;enum-representations.html&quot;&gt;Serde enum representations docs&lt;&#x2F;a&gt;
for more details and handling other possibilities.&lt;&#x2F;p&gt;
&lt;p&gt;Then we can deserialize to &lt;code&gt;EventEnum&lt;&#x2F;code&gt; in our handler function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;()&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; builder = pretty_env_logger::formatted_timed_builder();
&lt;&#x2F;span&gt;&lt;span&gt;    builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;filter_level&lt;&#x2F;span&gt;&lt;span&gt;(log::LevelFilter::Debug);
&lt;&#x2F;span&gt;&lt;span&gt;    builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    lambda_runtime::lambda!(my_handler);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;my_handler&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;: EventEnum, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_c&lt;&#x2F;span&gt;&lt;span&gt;: lambda_runtime::Context) -&amp;gt; Result&amp;lt;(), HandlerError&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Create clients here once since we will use them in all cases
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s3_client = S3Client::new(Region::EuWest1);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; ses_client = SesClient::new(Region::EuWest1);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; rt = tokio::runtime::Runtime::new().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; e {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Match on different events here...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;deployment&quot;&gt;Deployment&lt;&#x2F;h3&gt;
&lt;p&gt;Now we are ready to deploy our Lambda function. In order to use Rustls
and the Tokio&#x27;s &lt;code&gt;block_on&lt;&#x2F;code&gt; method we should set the following features in our dependencies in
&lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rusoto_core &lt;&#x2F;span&gt;&lt;span&gt;= {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.44&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;default_features &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rustls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rusoto_s3 &lt;&#x2F;span&gt;&lt;span&gt;= {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.44&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;default_features &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rustls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rusoto_ses &lt;&#x2F;span&gt;&lt;span&gt;= {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.44&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;default_features &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rustls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lettre &lt;&#x2F;span&gt;&lt;span&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.10.0-alpha.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;default_features &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rustls-tls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;builder&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tokio &lt;&#x2F;span&gt;&lt;span&gt;= {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;default_features &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;blocking&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rt-threaded&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can compile with the musl target (here I assume a GNU&#x2F;Linux platform,
for OS X you &lt;a href=&quot;https:&#x2F;&#x2F;hackernoon.com&#x2F;cross-compiling-rust-on-macos-to-run-as-a-unikernel-ff1w3ypi&quot;&gt;will need to install musl-cross&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ cargo build --release --target=x86_64-unknown-linux-musl
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then zip up the resulting binary, to upload it in the AWS Lambda
console:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ zip bootstrap.zip .&#x2F;target&#x2F;x86_64-unknown-linux-musl&#x2F;release&#x2F;bootstrap
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Upload this zip file to the Lambda console and add the S3 trigger for
the bucket set in the Inbound rule, then add a Cloudwatch trigger on a
schedule for sending the prompt email.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;In this post we have seen how to build a simple serverless data pipeline
in Rust, based around ingesting and sending data via email.&lt;&#x2F;p&gt;
&lt;p&gt;Note that we use &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;lambda_runtime&quot;&gt;lambda_runtime&lt;&#x2F;a&gt; v0.2.1 in the above code. Soon v0.3
will release which will allow us to use async functions directly. I
think even in v0.2.1 there is a way of passing the Tokio runtime in the
handler Context so we wouldn&#x27;t need to pass it manually, but I didn&#x27;t
investigate it much since the new changes will be stable very soon (see
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;awslabs&#x2F;aws-lambda-rust-runtime&#x2F;pull&#x2F;111&quot;&gt;this PR for example&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;We used the alpha version of the new &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;lettre&#x2F;0.10.0-alpha.1&quot;&gt;lettre&lt;&#x2F;a&gt;
release so that we could use &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;rustls&quot;&gt;rustls&lt;&#x2F;a&gt; everywhere. In the
future the new API will change and hopefully become more ergonomic like
v0.9.3.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;possible-improvements&quot;&gt;Possible Improvements&lt;&#x2F;h3&gt;
&lt;p&gt;If we were to extend this example, a simple task would be to handle zip
file attachments with the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;zip&quot;&gt;zip&lt;&#x2F;a&gt; crate. We
could also send responses as actual email replies using the &lt;code&gt;In-Reply-To&lt;&#x2F;code&gt;
and &lt;code&gt;References&lt;&#x2F;code&gt; headers, this would help to ensure the sent emails are
appropriately viewable in the recipient&#x27;s client (i.e. otherwise Gmail
might thread our new messages with older ones since they share the same
Subject).&lt;&#x2F;p&gt;
&lt;p&gt;We should also better handle the case where we receive no attachment, or
multiple attachments. This could be handled elegantly by moving the
error email sending outside of the &lt;code&gt;handle_email()&lt;&#x2F;code&gt; function and adding
custom error types for these different cases. So in the case of any
error we could send an appropriate notification email.&lt;&#x2F;p&gt;
&lt;p&gt;It would also be good to deploy the Lambda function with the &lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;cdk&#x2F;&quot;&gt;AWS Cloud
Development Kit (CDK)&lt;&#x2F;a&gt; so we can create all resources necessary, and
keep the necessary infrastructure steps with the code. Unfortunately
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;aws&#x2F;jsii&#x2F;issues&#x2F;1684&quot;&gt;jsii does not yet have Rust bindings&lt;&#x2F;a&gt; so
the actual CDK code would need to be written in a supported language
such as TypeScript.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Many thanks to all of the contributors to the crates used in this
example, and especially to the maintainers of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;awslabs&#x2F;aws-lambda-rust-runtime&quot;&gt;lambda_runtime&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rusoto&#x2F;rusoto&quot;&gt;Rusoto&lt;&#x2F;a&gt;
whose efforts have made Rust a viable choice in this space.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>An introduction to Data Oriented Design with Rust</title>
		<published>2020-07-25T00:00:00+00:00</published>
		<updated>2020-07-25T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jamesmcm.github.io/blog/intro-dod/" type="text/html"/>
		<id>https://jamesmcm.github.io/blog/intro-dod/</id>
		<content type="html">&lt;p&gt;In the post we will investigate the main concepts of &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Data-oriented_design&quot;&gt;Data-oriented
Design&lt;&#x2F;a&gt; using Rust.&lt;&#x2F;p&gt;
&lt;p&gt;The source code for this example is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;data-oriented-example&quot;&gt;available on Github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;what-is-data-oriented-design&quot;&gt;What is data-oriented design?&lt;&#x2F;h2&gt;
&lt;p&gt;Data-oriented design is an approach to optimising programs by carefully
considering the memory layout of data structures, and their implications
for auto-vectorisation and use of the CPU cache. I highly recommend
watching Mike Acton&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=rX0ItVEVjHc&quot;&gt;&amp;quot;Data-Oriented Design and C++&amp;quot;&lt;&#x2F;a&gt; talk
if you haven&#x27;t seen it already.&lt;&#x2F;p&gt;
&lt;p&gt;In this post we will cover 4 cases, using &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;criterion&#x2F;0.3.3&#x2F;criterion&#x2F;&quot;&gt;criterion&lt;&#x2F;a&gt; for
benchmarking. The cases are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Struct of arrays vs. array of structs&lt;&#x2F;li&gt;
&lt;li&gt;The cost of branching inside a hot loop&lt;&#x2F;li&gt;
&lt;li&gt;Linked List vs. Vector iteration&lt;&#x2F;li&gt;
&lt;li&gt;The cost of dynamic dispatch vs. monomorphisation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;struct-of-arrays-vs-array-of-structs&quot;&gt;Struct of Arrays vs. Array of Structs&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;AoS_and_SoA&quot;&gt;Struct of Arrays vs. Array of Structs&lt;&#x2F;a&gt; 
refers to two contrasting ways of organising entity data to be operated
over.&lt;&#x2F;p&gt;
&lt;p&gt;For example, imagine we are writing a video game and we would like to
have a Player struct with the following fields:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Player {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;health&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;location&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;velocity&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;acceleration&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then at each frame, we want to update the locations and velocities of all
Players. We could write something like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run_oop&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;players&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Vec&amp;lt;Player&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; player in players.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        player.location = (
&lt;&#x2F;span&gt;&lt;span&gt;            player.location.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;+ player.velocity.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            player.location.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;+ player.velocity.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        );
&lt;&#x2F;span&gt;&lt;span&gt;        player.velocity = (
&lt;&#x2F;span&gt;&lt;span&gt;            player.velocity.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;+ player.acceleration.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            player.velocity.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;+ player.acceleration.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        );
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This would be the usual object-oriented approach to this problem. The
issue here is that in memory the structs are stored as follows (assuming
no field re-ordering i.e. &lt;code&gt;#[repr(C)]&lt;&#x2F;code&gt;), on a 64-bit architecture each field will be 64
bits (8 bytes, so each Player is 64 bytes):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;-- Vec&amp;lt;Player&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;name  (pointer to heap)  -- Player 1
&lt;&#x2F;span&gt;&lt;span&gt;health    
&lt;&#x2F;span&gt;&lt;span&gt;location0  (tuple split for clarity) 
&lt;&#x2F;span&gt;&lt;span&gt;location1
&lt;&#x2F;span&gt;&lt;span&gt;velocity0
&lt;&#x2F;span&gt;&lt;span&gt;velocity1
&lt;&#x2F;span&gt;&lt;span&gt;acceleration0
&lt;&#x2F;span&gt;&lt;span&gt;acceleration1
&lt;&#x2F;span&gt;&lt;span&gt;name  (pointer to heap)  -- Player 2
&lt;&#x2F;span&gt;&lt;span&gt;location0    
&lt;&#x2F;span&gt;&lt;span&gt;location1
&lt;&#x2F;span&gt;&lt;span&gt;velocity0
&lt;&#x2F;span&gt;&lt;span&gt;velocity1
&lt;&#x2F;span&gt;&lt;span&gt;acceleration0
&lt;&#x2F;span&gt;&lt;span&gt;acceleration1
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note the parts we want to operate on (locations, velocities and
accelerations) are not stored contiguously across different Players.
This prevents us from using vector operations to operate on multiple
players at once (since they cannot be loaded in the same CPU cache
line, usually ~64 bytes).&lt;&#x2F;p&gt;
&lt;p&gt;In contrast, the data-oriented approach is to design around this
limitation and optimise for auto-vectorisation. Instead of using a
struct per Player, we now use one struct for all Players and each Player
has their values stored at their index in the separate attribute Vectors:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;DOPlayers {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;names&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;health&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;locations&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;velocities&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;acceleration&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;)&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can do the same calculation as in the OOP case as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run_dop&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;world&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; DOPlayers) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(pos, (vel, acc)) in world
&lt;&#x2F;span&gt;&lt;span&gt;        .locations
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span&gt;(world.velocities.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span&gt;(world.acceleration.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()))
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        *pos = (pos.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;+ vel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, pos.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;+ vel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        *vel = (vel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;+ acc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, vel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;+ acc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this case the memory layout is as follows:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;-- DOPlayers
&lt;&#x2F;span&gt;&lt;span&gt;name1    -- names
&lt;&#x2F;span&gt;&lt;span&gt;name2
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;health1    -- health
&lt;&#x2F;span&gt;&lt;span&gt;health2
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;location1    -- locations
&lt;&#x2F;span&gt;&lt;span&gt;location2
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The relevant fields are now stored contiguously. Given that each
location tuple will be 16 bytes, we could now feasibly load 4 location
tuples on the same cache line to operate on them simultaneously with
SIMD instructions.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;benchmark&quot;&gt;Benchmark&lt;&#x2F;h3&gt;
&lt;p&gt;Here are the results of the criterion benchmark for the above code (the
full code and benchmark code is available &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;data-oriented-example&quot;&gt;in the Github repo&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;intro-dod&#x2F;soa.svg&quot; alt=&quot;AoS vs. SoA benchmark&quot; title=&quot;AoS vs. SoA benchmark&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Overall, we see that the data-oriented approach finishes in half the
time. This would seem to be due to the data-oriented case operating on
two Players at a time - we can confirm this by reviewing the compiled
assembly.&lt;&#x2F;p&gt;
&lt;p&gt;Reviewing the &lt;a href=&quot;https:&#x2F;&#x2F;godbolt.org&#x2F;z&#x2F;d8bjMb&quot;&gt;output on Godbolt&lt;&#x2F;a&gt; we see the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;asm&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-asm &quot;&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;&#x2F;&#x2F; Relevant OOP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.LBB0_2:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;48&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;addpd   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;addpd   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;48&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;add     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;cmp     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;jne     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.LBB0_2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;&#x2F;&#x2F; Relevant DOP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.LBB1_7:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;addpd   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r9 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;addpd   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;add     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdi&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;addpd   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r9 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;addpd   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;movupd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmm1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;add     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;cmp     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rsi&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;jne     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.LBB1_7
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;test    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r8&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;je      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.LBB1_5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can see in the data-oriented case, the loop is unrolled to operate on
two elements at once - resulting in the 50% speed up overall!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Addendum&lt;&#x2F;strong&gt;: As noted by &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;hxqwom&#x2F;an_introduction_to_data_oriented_design_with_rust&#x2F;fz8lxcq&#x2F;&quot;&gt;&#x2F;u&#x2F;five9a2 on Reddit&lt;&#x2F;a&gt;
the above output is specifically for the default target, which is
misleading since &lt;code&gt;cargo bench&lt;&#x2F;code&gt; uses the native target by default (i.e.
all possible features on your CPU), so our benchmarks are not using the
above assembly code.&lt;&#x2F;p&gt;
&lt;p&gt;By setting the compiler flag to &lt;code&gt;-C target-cpu=skylake-avx512&lt;&#x2F;code&gt; to enable 
Skylake features, we get the &lt;a href=&quot;https:&#x2F;&#x2F;godbolt.org&#x2F;z&#x2F;PEPdvn&quot;&gt;following output&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;asm&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-asm &quot;&gt;&lt;code class=&quot;language-asm&quot; data-lang=&quot;asm&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;&#x2F;&#x2F; OOP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.LBB0_2:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vmovupd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ymm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ymmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vaddpd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ymm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ymm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ymmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;48&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vmovupd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;ymmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ymm0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;add     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;cmp     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;jne     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.LBB0_2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;&#x2F;&#x2F; DOP &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.LBB1_19:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vmovupd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rsi &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vaddpd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vmovupd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rsi &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vmovupd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vaddpd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r10 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vmovupd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vmovupd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rsi &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vaddpd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vmovupd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rsi &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vmovupd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vaddpd  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r10 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;vmovupd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmmword &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rcx &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;zmm0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;add     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r11&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;add     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rax&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;32
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;add     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rdi&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;jne     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.LBB1_19
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;test    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r9&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;r9
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;je      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.LBB1_22
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we see the OOP loop making use of the 256-bit ymm registers for the
position tuple and velocity tuple, and another for the velocity tuple
and acceleration tuple. This is possible because they are adjacent in
memory (due to the ordering of the fields). In the DOP loop,
the 512-bit zmm register is used.&lt;&#x2F;p&gt;
&lt;p&gt;It seems the performance differences comes from the bandwidth between
cache levels, since the performance is identical for the small examples.
This can be demonstrated further by removing the extra fields from the
struct - in this case we see only a 25% performance difference (&lt;a href=&quot;https:&#x2F;&#x2F;godbolt.org&#x2F;z&#x2F;Th91Wa&quot;&gt;godbolt
link&lt;&#x2F;a&gt;), and this
corresponds to Player struct now being 384 bits (and so 1&#x2F;4 of the
512-bit read&#x2F;write is unused).&lt;&#x2F;p&gt;
&lt;p&gt;This emphasises how important it is to consider your deployment target,
and if deploying performance-sensitive code, to consider setting the
target-cpu explicitly to benefit from all of its features.&lt;&#x2F;p&gt;
&lt;p&gt;It also demonstrates how the ordering of fields can be important to
performance. By default Rust will re-order fields automatically, but you can set
&lt;code&gt;#[repr(C)]&lt;&#x2F;code&gt; to disable this (necessary for C interoperability for
example).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;&#x2F;h3&gt;
&lt;p&gt;This example demonstrates the importance of considering memory layout
when aiming for performant code and auto-vectorisation. &lt;&#x2F;p&gt;
&lt;p&gt;Note that the same logic can also apply when working with arrays of
structs - making your struct smaller will allow you to load more
elements on the same cache line and possibly lead to autovectorisation.
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Rene-007&#x2F;flake_growth&#x2F;blob&#x2F;master&#x2F;src&#x2F;helpers.rs&quot;&gt;Here is an example&lt;&#x2F;a&gt; of
a crate (which was shared on the &lt;a href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;rust&#x2F;comments&#x2F;hmqjvs&#x2F;growing_gold_with_rust&#x2F;&quot;&gt;Rust subreddit&lt;&#x2F;a&gt;) that achieved a 40% performance
improvement by doing just that.&lt;&#x2F;p&gt;
&lt;p&gt;This particular re-organisation has a direct analogue in database design. A
major difference between databases aimed at transactional (OLTP)
workloads and analytical (OLAP) workloads is that the latter tend to use
columnar-based storage. Just like the case above, this means that
operations on one column can take advantage of the contiguous storage
and use vector operations, which tends to be the main access pattern for
analytical workloads (e.g. calculate the average purchase size across all rows,
rather than updating and retrieving entire, specific rows).&lt;&#x2F;p&gt;
&lt;p&gt;In the case of analytical databases this is actually a double win, since it also
applies to the serialisation of the data to disk, where compression can
now be applied along the column (where the data is guaranteed to be of the
same type) leading to much better compression ratios.&lt;&#x2F;p&gt;
&lt;p&gt;If you are working on a problem that might benefit from the struct of
arrays approach, and want to run a quick benchmark, you might be
interested in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;lumol-org&#x2F;soa-derive&quot;&gt;soa-derive&lt;&#x2F;a&gt;
crate that will allow you to derive the struct of arrays from your
struct.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;branching-in-a-hot-loop&quot;&gt;Branching in a hot loop&lt;&#x2F;h2&gt;
&lt;p&gt;Another optimisation tactic is to avoid branching in any &amp;quot;hot&amp;quot; parts of
the code (i.e. any part that will be executed many, many times).&lt;&#x2F;p&gt;
&lt;p&gt;Branching can arise in subtle ways, often by trying to use one struct for many
different cases. For example, we might define some general Node type as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span&gt;NodeType {
&lt;&#x2F;span&gt;&lt;span&gt;  Player,
&lt;&#x2F;span&gt;&lt;span&gt;  PhysicsObject,
&lt;&#x2F;span&gt;&lt;span&gt;  Script,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Node {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node_type&lt;&#x2F;span&gt;&lt;span&gt;: NodeType,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;position&lt;&#x2F;span&gt;&lt;span&gt;: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then pattern match on &lt;code&gt;node_type&lt;&#x2F;code&gt; when we need to operate on a Node.
The problem comes when we have a &lt;code&gt;Vec&amp;lt;Node&amp;gt;&lt;&#x2F;code&gt; with tens of thousands of
elements, which we might need to operate on every frame. By using
&lt;code&gt;node.node_type&lt;&#x2F;code&gt; to decide the logic to use, we need to check
that for every element (since the order of the &lt;code&gt;node_type&lt;&#x2F;code&gt;&#x27;s within the
&lt;code&gt;Vec&amp;lt;Node&amp;gt;&lt;&#x2F;code&gt; is unknown).&lt;&#x2F;p&gt;
&lt;p&gt;Not only does this comparison mean we must do an extra operation for
every element, but it also impedes auto-vectorisation, since our
relevant nodes (of the same &lt;code&gt;node_type&lt;&#x2F;code&gt;) may not be stored contiguously.&lt;&#x2F;p&gt;
&lt;p&gt;The data-oriented approach is to split these nodes up by &lt;code&gt;node_type&lt;&#x2F;code&gt;.
Ideally creating a separate struct per node type, or at least
separating them in separate Vectors before the hot loop. This means we
don&#x27;t need to check the &lt;code&gt;node_type&lt;&#x2F;code&gt; inside the hot loop, and we can take
advantage of the fact that the nodes we do operate on will be stored in
contiguous memory.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;benchmark-1&quot;&gt;Benchmark&lt;&#x2F;h3&gt;
&lt;p&gt;In this benchmark we use the following code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Copy, Clone)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Foo {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;calc_type&lt;&#x2F;span&gt;&lt;span&gt;: CalcType,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Copy, Clone)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;CalcType {
&lt;&#x2F;span&gt;&lt;span&gt;    Identity,
&lt;&#x2F;span&gt;&lt;span&gt;    Square,
&lt;&#x2F;span&gt;&lt;span&gt;    Cube,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run_mixed&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[Foo]) -&amp;gt; Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; x.calc_type {
&lt;&#x2F;span&gt;&lt;span&gt;            CalcType::Identity =&amp;gt; x.x,
&lt;&#x2F;span&gt;&lt;span&gt;            CalcType::Square =&amp;gt; x.x * x.x,
&lt;&#x2F;span&gt;&lt;span&gt;            CalcType::Cube =&amp;gt; x.x * x.x * x.x,
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run_separate&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[Foo], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[Foo], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;[Foo]) -&amp;gt; (Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; x = x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x.x).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; y = y.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x.x * x.x).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; z = z.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x.x * x.x * x.x).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    (x, y, z)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Comparing the case of a mixed vector of Foos, and separate vector of
Foos split by &lt;code&gt;calc_type&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The results of the benchmark are as follows:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;intro-dod&#x2F;innercheck.svg&quot; alt=&quot;Loop branch benchmark&quot; title=&quot;Loop branch benchmark&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Overall, we see that the data-oriented approach finishes in about a 
quarter of the time.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;godbolt.org&#x2F;z&#x2F;6ocTx8&quot;&gt;output on Godbolt&lt;&#x2F;a&gt; is less clear this
time, but we can see that there seems to be some unrolling in the
separate case that isn&#x27;t possible in the mixed case due to the need to
check the &lt;code&gt;calc_type&lt;&#x2F;code&gt; in that case.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;summary-1&quot;&gt;Summary&lt;&#x2F;h3&gt;
&lt;p&gt;The concept of moving any instructions you can outside of hot loops
should be familiar, but this example also demonstrates how it can impact
vectorisation. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;indirection-iteration-in-a-linked-list&quot;&gt;Indirection: Iteration in a Linked List&lt;&#x2F;h2&gt;
&lt;p&gt;In this example we will compare iterating through a (doubly) linked list
vs. a vector. This case is well-known and mentioned in &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;beta&#x2F;std&#x2F;collections&#x2F;struct.LinkedList.html&quot;&gt;Rust&#x27;s
LinkedList docs&lt;&#x2F;a&gt;,
in &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;beta&#x2F;std&#x2F;collections&#x2F;index.html#use-a-linkedlist-when&quot;&gt;Rust&#x27;s std::collections docs&lt;&#x2F;a&gt;
and in &lt;a href=&quot;https:&#x2F;&#x2F;rust-unofficial.github.io&#x2F;too-many-lists&#x2F;#an-obligatory-public-service-announcement&quot;&gt;Learn Rust With Entirely Too Many Linked Lists&#x27; Public Service Announcement&lt;&#x2F;a&gt;.
The latter Public Service Announcement covers a lot of cases where
Linked Lists are commonly used, so I recommend reading that if you
haven&#x27;t already. Nevertheless, the proof is in the pudding, so I think
it&#x27;s useful to see a benchmark directly.&lt;&#x2F;p&gt;
&lt;p&gt;A Linked List stores elements &lt;em&gt;indirectly&lt;&#x2F;em&gt;, that is, it stores an
element and a pointer to the next element. This means that consecutive
elements in the linked list are &lt;em&gt;not&lt;&#x2F;em&gt; stored in consecutive memory
locations.&lt;&#x2F;p&gt;
&lt;p&gt;This leads to two issues that impede vectorisation:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The elements of the linked list may be stored arbitrarily far apart, so
we cannot just load a block of memory to the CPU cache to operate on
them simultaneously.&lt;&#x2F;li&gt;
&lt;li&gt;We have to dereference a pointer to get the next element in the list.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For example, we might store a vector of i32s on the heap as follows
(holding a pointer to the start of the vector, the vector capacity and
the vector length, on the stack):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;0x00 1
&lt;&#x2F;span&gt;&lt;span&gt;0x01 2
&lt;&#x2F;span&gt;&lt;span&gt;0x02 3
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The values are stored contiguously, whereas for a (singly) linked list, we could
have the following case.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;0x00 1
&lt;&#x2F;span&gt;&lt;span&gt;0x01 0x14
&lt;&#x2F;span&gt;&lt;span&gt;0x0C 3
&lt;&#x2F;span&gt;&lt;span&gt;0x0D 0
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;0x14 2
&lt;&#x2F;span&gt;&lt;span&gt;0x15 0x0C
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here the values are not stored in contiguous memory (or even necessarily
in the same order as their pointers maintain in the list).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;benchmark-2&quot;&gt;Benchmark&lt;&#x2F;h3&gt;
&lt;p&gt;In this case the benchmark is very simple, simply squaring all of the
elements of a linked list and a vector:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run_list&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;LinkedList&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;        *x = *x * *x;
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run_vec&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| {
&lt;&#x2F;span&gt;&lt;span&gt;        *x = *x * *x;
&lt;&#x2F;span&gt;&lt;span&gt;    });
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The results are as follows:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;intro-dod&#x2F;linkedlist.svg&quot; alt=&quot;LinkedList benchmark&quot; title=&quot;LinkedList benchmark&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Overall, we see that the data-oriented approach finishes in about a
tenth of the time.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;godbolt.org&#x2F;z&#x2F;EzznM1&quot;&gt;output on Godbolt&lt;&#x2F;a&gt; shows the
unrolling in the Vec case that isn&#x27;t possible in the LinkedList case.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;summary-2&quot;&gt;Summary&lt;&#x2F;h2&gt;
&lt;p&gt;This case is well-known and demonstrates the biggest difference of all
of the benchmarks. Note that here we look only at iteration, and not at
other operations which could be considered to somewhat favour Linked
Lists such as insertion, where it avoids the (amortised) cost of vector
resizing, however as argued in &lt;a href=&quot;https:&#x2F;&#x2F;rust-unofficial.github.io&#x2F;too-many-lists&#x2F;#i-cant-afford-amortization&quot;&gt;Learn Rust With Entirely Too Many Linked
Lists&lt;&#x2F;a&gt;
this can be avoided in Vectors too.&lt;&#x2F;p&gt;
&lt;p&gt;Hopefully this will become common knowledge and we&#x27;ll see fewer
interview questions and practice problems based around linked lists and
indirection, considering only Big O complexity and not real world
performance.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;indirection-dynamic-dispatch-vs-monomorphisation&quot;&gt;Indirection: Dynamic Dispatch vs. Monomorphisation&lt;&#x2F;h2&gt;
&lt;p&gt;When writing generic functions (i.e. for any types implementing certain
Traits), we have the choice between &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch17-02-trait-objects.html&quot;&gt;dynamic dispatch&lt;&#x2F;a&gt;
and monomorphisation. &lt;&#x2F;p&gt;
&lt;p&gt;Dynamic dispatch allows us to work with a mixed
collection of trait objects, i.e. we can have a &lt;code&gt;Vec&amp;lt;Box&amp;lt;dyn MyTrait&amp;gt;&amp;gt;&lt;&#x2F;code&gt;
which can contain references to different types which all implement
MyTrait. The trait object contains a pointer to the instance of the
struct itself (implementing MyTrait) and a pointer to the struct&#x27;s virtual method table
(or vtable, a lookup table pointing to the implementation of each method
of MyTrait). Then when we call a method on one of these trait objects, at
runtime we work out which implementation of the method to use by
consulting the vtable.&lt;&#x2F;p&gt;
&lt;p&gt;Note that this implies indirection. Our vector has to be of pointers to
the struct instances themselves (since the different structs implementing
MyTrait can differ in size and fields), and we must also
dereference the pointer in the vtable to find out
which implementation to call.&lt;&#x2F;p&gt;
&lt;p&gt;Monomorphisation, on the other hand, creates a separate implementation
of the generic function for each possible type. For example, the
following code would actually create two separate functions for
&lt;code&gt;run_vecs_square()&lt;&#x2F;code&gt; for the &lt;code&gt;Foo&lt;&#x2F;code&gt; and &lt;code&gt;Bar&lt;&#x2F;code&gt; types respectively:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Foo {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Bar {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span&gt;MyTrait {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;square_id&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;MyTrait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Foo {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;square_id&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.id = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.id * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.id;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;MyTrait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;Bar {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;square_id&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.id = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.id * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.id * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.id;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run_vecs_square&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: MyTrait&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Vec&amp;lt;T&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;square_id&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This increases the binary size, but gives us an easy way of generating
multiple implementations of a function for different types and allows us
to avoid indirection (i.e. note we can use &lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; and don&#x27;t need to
use &lt;code&gt;Vec&amp;lt;Box&amp;lt;T&amp;gt;&amp;gt;&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;Whereas in the following code, we use dynamic dispatch. There is only
one implementation of &lt;code&gt;run_dyn_square&lt;&#x2F;code&gt; but exactly which implementation
of &lt;code&gt;square_id()&lt;&#x2F;code&gt; it should call is determined at runtime by consulting
the trait object&#x27;s vtable.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run_dyn_square&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span&gt;Vec&amp;lt;Box&amp;lt;dyn MyTrait&amp;gt;&amp;gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter_mut&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;square_id&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This can be more convenient, as we can create the vector containing
references to different types with no worry about what the actual types
are (only that they implement MyTrait), and we don&#x27;t inflate the binary
size. However, we are forced to use indirection, since the underlying
types could have different sizes, and as we saw with the LinkedList
example this can have significant implications for auto-vectorisation.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;benchmark-3&quot;&gt;Benchmark&lt;&#x2F;h3&gt;
&lt;p&gt;Using the example above, the benchmark results are as follows:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;jamesmcm.github.io&#x2F;blog&#x2F;intro-dod&#x2F;dyntrait.svg&quot; alt=&quot;Dynamic Dispatch benchmark&quot; title=&quot;Dynamic Dispatch benchmark&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Overall, we see that the monomorphised example finishes in about a
quarter of the time of the dynamic dispatch one. The monomorphised case
with indirection (&lt;code&gt;Vec&amp;lt;Box&amp;lt;T&amp;gt;&amp;gt;&lt;&#x2F;code&gt;) is only slightly faster than the
dynamic dispatch case which implies that most of the performance gap is
due to the added indirection impeding vectorisation, whereas the vtable lookup
itself only adds a small constant overhead.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, in this case &lt;a href=&quot;https:&#x2F;&#x2F;godbolt.org&#x2F;z&#x2F;46WYaP&quot;&gt;Godbolt&lt;&#x2F;a&gt;
doesn&#x27;t include the target functions in the generated output.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;summary-3&quot;&gt;Summary&lt;&#x2F;h3&gt;
&lt;p&gt;This benchmark showed that the main cost of dynamic dispatch is in
impeding vectorisation due to the necessary introduction of indirection,
and that the cost of the lookup in the vtable itself was relatively
small.&lt;&#x2F;p&gt;
&lt;p&gt;This means that you should definitely consider designing for
monomorphisation if your methods are doing operations that would greatly
benefit from vectorisation (such as the mathematical operations above).
On the other hand, if they are carrying out operations that are not
vectorised (for example, constructing Strings) then dynamic dispatch may
have a negligible cost overall.&lt;&#x2F;p&gt;
&lt;p&gt;As always, benchmark your specific use cases and access patterns when
comparing different possible implementations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;In this article we have seen four cases where considering data layout in
memory, and the realities and limitations of the CPU cache has lead to
significant performance improvements.&lt;&#x2F;p&gt;
&lt;p&gt;This only scratches the surface of data-oriented design and optimisation. For example,
&lt;a href=&quot;http:&#x2F;&#x2F;www.catb.org&#x2F;esr&#x2F;structure-packing&#x2F;&quot;&gt;structure packing&lt;&#x2F;a&gt;, padding
and alignment was not covered. The &lt;a href=&quot;https:&#x2F;&#x2F;www.dataorienteddesign.com&#x2F;dodbook&#x2F;&quot;&gt;data-oriented design book&lt;&#x2F;a&gt; by
Richard Fabian also covers some additional topics.&lt;&#x2F;p&gt;
&lt;p&gt;It is important to note that in all of our examples, we did not modify
the algorithms we used. All implementations for each case have the same
Big O complexity, and yet in practice the performance can vary greatly,
with speedups from 2x-10x available just by optimising for
vectorisation and other features of modern CPUs.&lt;&#x2F;p&gt;
&lt;p&gt;In summary:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Favour data structures with less&#x2F;no indirection and contiguous memory
(you&#x27;ll also have an easier time with the borrow checker!).&lt;&#x2F;li&gt;
&lt;li&gt;Avoid branching inside loops.&lt;&#x2F;li&gt;
&lt;li&gt;Benchmark your use cases and access patterns.&lt;&#x2F;li&gt;
&lt;li&gt;If deploying performance sensitive code, consider targeting the CPU
features of your destination machine (i.e. &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;packed_simd&#x2F;perf-guide&#x2F;target-feature&#x2F;rustflags.html&quot;&gt;use RUSTFLAGS&lt;&#x2F;a&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bheisler&#x2F;criterion.rs&quot;&gt;Criterion&lt;&#x2F;a&gt; is a great benchmarking tool.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gnzlbg&#x2F;cargo-asm&quot;&gt;cargo-asm&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;godbolt.org&#x2F;&quot;&gt;Godbolt&lt;&#x2F;a&gt; can be used to inspect the generated assembly (and
LLVM intermediate representation).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;packed_simd&#x2F;perf-guide&#x2F;prof&#x2F;linux.html&quot;&gt;perf&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;flamegraph-rs&#x2F;flamegraph&quot;&gt;flamegraph&lt;&#x2F;a&gt; can be used for performance profiling.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Data Ingestion with Rust and AWS Lambda</title>
		<published>2020-04-19T00:00:00+00:00</published>
		<updated>2020-04-19T00:00:00+00:00</updated>
		<link rel="alternate" href="https://jamesmcm.github.io/blog/data-engineering-with-rust-and-aws-lambda/" type="text/html"/>
		<id>https://jamesmcm.github.io/blog/data-engineering-with-rust-and-aws-lambda/</id>
		<content type="html">&lt;p&gt;In this post we will set up a very simple data ingestion process with Rust and AWS Lambda.&lt;&#x2F;p&gt;
&lt;p&gt;The complete code for this example is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;rust-lambda-test&quot;&gt;available on GitHub here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Opinions expressed are solely my own and do not express the views or opinions of my employer.&lt;&#x2F;p&gt;
&lt;p&gt;You should be able to follow along using the AWS Free Tier if you want, but you will need to use a Postgres 11.1+ RDS instance instead of Redshift (unless you qualify for the separate 12-month free trial of Amazon Redshift). AWS Lambda has an Always Free tier option, whereas S3 and RDS have only 12-month free trial options.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;process-requirements&quot;&gt;Process Requirements&lt;&#x2F;h2&gt;
&lt;p&gt;In this process we would like to parse, filter and import an Excel file to our database, on-demand when it is uploaded to S3.&lt;&#x2F;p&gt;
&lt;p&gt;We can split the problem down in to the following steps:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Parsing the Excel file and filtering rows - here we will use the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;calamine&quot;&gt;calamine&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;serde&quot;&gt;Serde&lt;&#x2F;a&gt; crates, note we need to handle possible parsing errors.&lt;&#x2F;li&gt;
&lt;li&gt;Serialising the data to a CSV - we will use the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;csv&quot;&gt;csv crate&lt;&#x2F;a&gt; with &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;serde&quot;&gt;Serde&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Uploading the CSV to S3 - we will use the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;rusoto&quot;&gt;rusoto crate&lt;&#x2F;a&gt; for interacting with AWS.&lt;&#x2F;li&gt;
&lt;li&gt;Getting database credentials from AWS Secrets Manager - we will use the rusoto crate.&lt;&#x2F;li&gt;
&lt;li&gt;Triggering the COPY from S3 in the Redshift&#x2F;RDS instance - we will use the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;postgres&quot;&gt;postgres crate&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;openssl&quot;&gt;OpenSSL&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Running this process in AWS Lambda and handling the events received - we will use the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;lambda_runtime&quot;&gt;lambda_runtime&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;aws_lambda_events&quot;&gt;aws_lambda_events&lt;&#x2F;a&gt; crates.&lt;&#x2F;li&gt;
&lt;li&gt;Cross-compiling and deploying the process - we need to build for the &lt;code&gt;x86_64-unknown-linux-musl&lt;&#x2F;code&gt; target so the binary will run on Amazon Linux.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;why-rust&quot;&gt;Why Rust?&lt;&#x2F;h2&gt;
&lt;p&gt;One could argue that Python is more suitable for this task, since pandas can parse Excel files and write to a CSV directly (using boto3 to interact with AWS). However there are a few reasons why I think Rust is better suited to this sort of serverless computing:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;With Rust we can deploy a statically linked binary - i.e. we don&#x27;t have any dependency on the runtime environment. In Python we would have to handle deploying the dependent pip packages with the Lambda artefact, for NumPy this is not trivial since it has compiled dependencies which would need to be cross-compiled or built on Amazon Linux (i.e. with CodeBuild) - Lambda Layers can automate this for popular dependencies, but it&#x27;s still more work than a static binary (and results in a larger artefact to deploy too).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;With Rust we get full type checking and static typing, in this case our example is simple serialisation and de-serialisation. However, if we were to do much more processing of the de-serialised data, it would be very useful to have all of that being type checked to avoid possible runtime errors.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Rust gives us greater control of performance, and the lambda_runtime crate allows us to use Tokio for asynchronous operations. With serverless computing we are paying by execution time (and memory usage with respect to the size of the instance) so better performance can directly lead to cost savings.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Rust offers a better, modern development experience. With rust-analyzer you can have immediate type-checking directly in your IDE&#x2F;text editor. Unit testing is built-in and easy to use in the same source file. Automatic generation of documentation is built-in with rustdoc. You also don&#x27;t need to deal with setting up virtual environments for dependencies.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;&#x2F;h2&gt;
&lt;p&gt;We will follow the steps outlined above, starting with parsing the Excel file, which can be tested independently.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;parsing-the-excel-file-with-calamine&quot;&gt;Parsing the Excel file with Calamine&lt;&#x2F;h3&gt;
&lt;p&gt;The Excel file we want to parse has the following structure in the &lt;code&gt;data&lt;&#x2F;code&gt; worksheet:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;location&lt;&#x2F;th&gt;&lt;th&gt;metric&lt;&#x2F;th&gt;&lt;th&gt;value&lt;&#x2F;th&gt;&lt;th&gt;date&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;UK&lt;&#x2F;td&gt;&lt;td&gt;conversion_rate&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;2020-02-01&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;ES&lt;&#x2F;td&gt;&lt;td&gt;conversion_rate&lt;&#x2F;td&gt;&lt;td&gt;0.634&lt;&#x2F;td&gt;&lt;td&gt;2020-02-01&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;DE&lt;&#x2F;td&gt;&lt;td&gt;conversion_rate&lt;&#x2F;td&gt;&lt;td&gt;#N&#x2F;A&lt;&#x2F;td&gt;&lt;td&gt;2020-02-01&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;FR&lt;&#x2F;td&gt;&lt;td&gt;conversion_rate&lt;&#x2F;td&gt;&lt;td&gt;#N&#x2F;A&lt;&#x2F;td&gt;&lt;td&gt;2020-02-01&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;UK&lt;&#x2F;td&gt;&lt;td&gt;conversion_rate&lt;&#x2F;td&gt;&lt;td&gt;0.723&lt;&#x2F;td&gt;&lt;td&gt;2020-01-31&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;We only want to import rows which have the same date as the first row in the Excel file.&lt;&#x2F;p&gt;
&lt;p&gt;Note the possibility of #N&#x2F;A and invalid values which we will need to handle.&lt;&#x2F;p&gt;
&lt;p&gt;This file will be uploaded to &lt;code&gt;s3:&#x2F;&#x2F;input-bucket-name&#x2F;label&#x2F;filename.xlsx&lt;&#x2F;code&gt; where the label allows multiple files to be uploaded (with different locations in each file).&lt;&#x2F;p&gt;
&lt;p&gt;See &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;rust-lambda-test&quot;&gt;the Github repo&lt;&#x2F;a&gt; for a test example.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;reading-the-excel-file&quot;&gt;Reading the Excel file&lt;&#x2F;h4&gt;
&lt;p&gt;First let&#x27;s write a test that will read an example of our Excel file to a buffer and create a calamine::Xlsx object from it. We do it like this (rather than using calamine&#x27;s &lt;code&gt;open_workbook()&lt;&#x2F;code&gt; function to read directly from a file) so we can maintain the same interface when reading the Excel file from S3 directly.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;calamine::{Reader, Xlsx};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;##[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span&gt;(test)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span&gt;tests {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use super&lt;&#x2F;span&gt;&lt;span&gt;::*;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::fs::File;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::io::Write;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::path::PathBuf;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test_local&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; buffer: Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = Vec::new();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; f = File::open(
&lt;&#x2F;span&gt;&lt;span&gt;            PathBuf::from(env!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;CARGO_MANIFEST_DIR&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(PathBuf::from(
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tests&#x2F;test_excel.xlsx&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            )),
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read_to_end&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; buffer).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; excel = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span&gt;Xlsx::new(Cursor::new(buffer)) {
&lt;&#x2F;span&gt;&lt;span&gt;            Ok(x) =&amp;gt; x,
&lt;&#x2F;span&gt;&lt;span&gt;            Err(x) =&amp;gt; panic!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, x),
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we use the &lt;code&gt;CARGO_MANIFEST_DIR&lt;&#x2F;code&gt; environment variable to get a relative path when we run &lt;code&gt;cargo test&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you create an example Excel file, this test should pass. This provides us with a calamine::Xlsx object we can use to call our parsing function.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;parsing-the-excel-file&quot;&gt;Parsing the Excel file&lt;&#x2F;h4&gt;
&lt;p&gt;We will implement the following function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;excel_to_csv_string&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;excel&lt;&#x2F;span&gt;&lt;span&gt;: Xlsx&amp;lt;Cursor&amp;lt;Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;(String, HashSet&amp;lt;String&amp;gt;, chrono::NaiveDate), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which will return a (Result of a) tuple of the CSV as a String, a HashSet of all found locations (for use in deleting existing rows before the database insertion), and the date of the first row that we used as the date of the file (also for use in the database insertion and logging).&lt;&#x2F;p&gt;
&lt;p&gt;Note the Xlsx object we pass is based on a Cursor in a Vec of u8 bytes - exactly what we generated above (and what we will later receive when reading the file on S3 with rusoto).&lt;&#x2F;p&gt;
&lt;p&gt;To do this, we will use calamine::RangeDeserializerBuilder, in our case since the Excel file has headers, we will use the &lt;code&gt;with_headers()&lt;&#x2F;code&gt; method and pass it a slice of static strings.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s first define the columns and the struct that we will deserialise the rows into:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;serde::{Deserialize, Serialize};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;COLUMNS&lt;&#x2F;span&gt;&lt;span&gt;: [&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;] = [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;location&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;metric&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;date&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;##[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Serialize, Deserialize, Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;RawExcelRow {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;location&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metric&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serde&lt;&#x2F;span&gt;&lt;span&gt;(deserialize_with = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;de_opt_f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: Option&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serde&lt;&#x2F;span&gt;&lt;span&gt;(deserialize_with = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;de_date&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;date&lt;&#x2F;span&gt;&lt;span&gt;: chrono::NaiveDate,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our columns array corresponds to the headers in the Excel file (you could probably read these dynamically, but in our case we have a fixed schema anyway).&lt;&#x2F;p&gt;
&lt;p&gt;The RawExcelRow is the struct we will deserialise each row to. Note the &lt;code&gt;deserialize_with&lt;&#x2F;code&gt; field attributes set for the &lt;code&gt;value&lt;&#x2F;code&gt; and &lt;code&gt;date&lt;&#x2F;code&gt; fields. We will need to implement both of these.&lt;&#x2F;p&gt;
&lt;p&gt;The custom deserialiser for &lt;code&gt;value&lt;&#x2F;code&gt; is required so that we when the field fails to parse we replace the field value with None (rather than skipping the entire row, as we would if we handled the Error later when filtering rows).&lt;&#x2F;p&gt;
&lt;p&gt;This is implemented as follows (note we also explicitly cast integers, for the case of 0 or 1):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;de_opt_f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;de&lt;&#x2F;span&gt;&lt;span&gt;, D&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deserializer&lt;&#x2F;span&gt;&lt;span&gt;: D) -&amp;gt; Result&amp;lt;Option&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;D::&lt;&#x2F;span&gt;&lt;span&gt;Error&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    D: serde::Deserializer&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;de&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; data_type = calamine::DataType::deserialize(deserializer);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; data_type {
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(calamine::DataType::Error(_)) =&amp;gt; Ok(None),
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(calamine::DataType::Float(f)) =&amp;gt; Ok(Some(f)),
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(calamine::DataType::Int(i)) =&amp;gt; Ok(Some(i as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;)),
&lt;&#x2F;span&gt;&lt;span&gt;        _ =&amp;gt; Ok(None),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For &lt;code&gt;date&lt;&#x2F;code&gt; the custom deserialiser is required since Excel stores dates as the number of days since January 1st 1900 (starting from 1).&lt;&#x2F;p&gt;
&lt;p&gt;Calamine has a function to do this conversion for us, but it won&#x27;t automatically apply it when trying to deserialise to a chrono::NaiveDate (I created &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tafia&#x2F;calamine&#x2F;issues&#x2F;168&quot;&gt;this issue&lt;&#x2F;a&gt; regarding this). &lt;&#x2F;p&gt;
&lt;p&gt;So we simply call Calamine&#x27;s &lt;code&gt;as_date()&lt;&#x2F;code&gt; conversion function explicitly:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;de_date&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;de&lt;&#x2F;span&gt;&lt;span&gt;, D&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;deserializer&lt;&#x2F;span&gt;&lt;span&gt;: D) -&amp;gt; Result&amp;lt;chrono::NaiveDate, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;D::&lt;&#x2F;span&gt;&lt;span&gt;Error&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;    D: serde::Deserializer&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;de&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; data_type = calamine::DataType::deserialize(deserializer);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; data_type {
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(x) =&amp;gt; x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_date&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ok_or&lt;&#x2F;span&gt;&lt;span&gt;(serde::de::Error::custom(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Invalid Date&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)),
&lt;&#x2F;span&gt;&lt;span&gt;        Err(x) =&amp;gt; Err(x),
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this in place we can implement the deserialisation step:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;calamine::{RangeDeserializerBuilder, Reader, Xlsx};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;csv::Writer;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::collections::HashSet;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::error::Error;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::io::Cursor;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::io::Read;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;excel_to_csv_string&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;excel&lt;&#x2F;span&gt;&lt;span&gt;: Xlsx&amp;lt;Cursor&amp;lt;Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;(String, HashSet&amp;lt;String&amp;gt;, chrono::NaiveDate), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; range = excel
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;worksheet_range&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ok_or&lt;&#x2F;span&gt;&lt;span&gt;(calamine::Error::Msg(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Cannot find data worksheet&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))??;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; iter_result =
&lt;&#x2F;span&gt;&lt;span&gt;        RangeDeserializerBuilder::with_headers(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;COLUMNS&lt;&#x2F;span&gt;&lt;span&gt;).from_range::&amp;lt;_, RawExcelRow&amp;gt;(&amp;amp;range)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note the double &lt;code&gt;??&lt;&#x2F;code&gt; on the line &lt;code&gt;.ok_or(calamine::Error::Msg(&amp;quot;Cannot find data worksheet&amp;quot;))??;&lt;&#x2F;code&gt; - this is used since
the &lt;code&gt;.worksheet_range()&lt;&#x2F;code&gt; method returns an &lt;code&gt;Option&amp;lt;Result&amp;lt;Range&amp;lt;DataType&amp;gt;, XlsxError&amp;gt;&amp;gt;&lt;&#x2F;code&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;calamine&#x2F;0.16.1&#x2F;calamine&#x2F;struct.Xlsx.html#method.worksheet_range&quot;&gt;see docs&lt;&#x2F;a&gt;), 
and we convert the Option to a Result using &lt;code&gt;.ok_or()&lt;&#x2F;code&gt; (&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;option&#x2F;enum.Option.html#method.ok_or&quot;&gt;see docs&lt;&#x2F;a&gt;) to convert the
None case to a &lt;code&gt;calamine::Error&lt;&#x2F;code&gt; (and the Some case to Ok). The double &lt;code&gt;??&lt;&#x2F;code&gt; unwraps both of these
errors to give us the &lt;code&gt;Range&amp;lt;DataType&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We start by getting the range for the &lt;code&gt;data&lt;&#x2F;code&gt; worksheet, and then we deserialise it to &lt;code&gt;RawExcelRow&lt;&#x2F;code&gt;s, giving us an Iterator over &lt;code&gt;RawExcelRow&lt;&#x2F;code&gt;s. With this iterator we can apply row-level filtering (or other transformations), as we serialise to CSV.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;serialisation-to-csv&quot;&gt;Serialisation to CSV&lt;&#x2F;h4&gt;
&lt;p&gt;We serialise the first row, and copy the date from it to filter the further rows (remember we want to filter only for rows which have the same date as the first row in the file).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Use date of first row as date for file
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; wtr = Writer::from_writer(vec![]);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; locations: HashSet&amp;lt;String&amp;gt; = HashSet::new();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; first_row = iter_result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; canonical_date = first_row.date.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    locations.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(first_row.location.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    wtr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;serialize&lt;&#x2F;span&gt;&lt;span&gt;(first_row)?;
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Canonical date: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, canonical_date);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We then serialise all rows where the date is equal to the date of the first row (&lt;code&gt;canonical_date&lt;&#x2F;code&gt;), and add their &lt;code&gt;location&lt;&#x2F;code&gt; to the &lt;code&gt;locations&lt;&#x2F;code&gt; HashSet.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, we convert the Writer object to a String, and return that, along with the &lt;code&gt;locations&lt;&#x2F;code&gt; HashSet and the &lt;code&gt;canonical_date&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(index, row) in iter_result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt; row {
&lt;&#x2F;span&gt;&lt;span&gt;            Ok(row) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; row.date == canonical_date {
&lt;&#x2F;span&gt;&lt;span&gt;                    locations.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(row.location.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;                    wtr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;serialize&lt;&#x2F;span&gt;&lt;span&gt;(row)?;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            Err(row) =&amp;gt; println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, index, row),
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; data = String::from_utf8(wtr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_inner&lt;&#x2F;span&gt;&lt;span&gt;()?)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok((data, locations, canonical_date))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can now test calling this function in our &lt;code&gt;test_local()&lt;&#x2F;code&gt; test, adding the following lines:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(data, locations, canonical_date) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;excel_to_csv_string&lt;&#x2F;span&gt;&lt;span&gt;(excel) {
&lt;&#x2F;span&gt;&lt;span&gt;            Ok(x) =&amp;gt; x,
&lt;&#x2F;span&gt;&lt;span&gt;            Err(x) =&amp;gt; panic!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, x),
&lt;&#x2F;span&gt;&lt;span&gt;        };
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;locations: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, locations);
&lt;&#x2F;span&gt;&lt;span&gt;        println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;canonical date: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, canonical_date);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; file = File::create(
&lt;&#x2F;span&gt;&lt;span&gt;            PathBuf::from(env!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;CARGO_MANIFEST_DIR&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(PathBuf::from(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tests&#x2F;test_output.csv&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)),
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_all&lt;&#x2F;span&gt;&lt;span&gt;(data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        assert_eq!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This test should pass, and write the CSV to &lt;code&gt;test_output.csv&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;uploading-the-csv-to-s3&quot;&gt;Uploading the CSV to S3&lt;&#x2F;h3&gt;
&lt;p&gt;We can upload the CSV to S3 using the rusoto_s3 crate.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rusoto_core::Region;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rusoto_s3::{GetObjectRequest, PutObjectRequest, S3Client, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;S3&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;OUTPUT_BUCKET&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;output-bucket-name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;upload_csv_to_s3&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;canonical_date&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;chrono::NaiveDate,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;(String), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; outputkey = format!(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;output&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.csv&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        label,
&lt;&#x2F;span&gt;&lt;span&gt;        canonical_date.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;%Y-%m-%d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Write CSV to S3
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s3_client = S3Client::new(Region::EuWest1);
&lt;&#x2F;span&gt;&lt;span&gt;    s3_client
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;put_object&lt;&#x2F;span&gt;&lt;span&gt;(PutObjectRequest {
&lt;&#x2F;span&gt;&lt;span&gt;            bucket: String::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;OUTPUT_BUCKET&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;            key: outputkey.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            body: Some(data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_bytes&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span&gt;()),
&lt;&#x2F;span&gt;&lt;span&gt;            ..Default::default()
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sync&lt;&#x2F;span&gt;&lt;span&gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(outputkey)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Remember to set the correct region for your use case. In this case we use the default credentials provider, so your AWS credentials will also need to be available (i.e. in &lt;code&gt;~&#x2F;.aws&#x2F;credentials&lt;&#x2F;code&gt;) or via the runtime environment.&lt;&#x2F;p&gt;
&lt;p&gt;Note that here we consume our CSV String since we don&#x27;t need it again. We also return the outputkey so we can use it later when triggering the load to the database.&lt;&#x2F;p&gt;
&lt;p&gt;We will get the &lt;code&gt;label&lt;&#x2F;code&gt; value from the path of the input file on S3 when the Lambda function is triggered. This allows for different files to be uploaded for the same day (i.e. splitting files by location).&lt;&#x2F;p&gt;
&lt;p&gt;Also note the call to &lt;code&gt;.sync()&lt;&#x2F;code&gt; since the result is a RusotoFuture object.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;getting-database-credentials-from-aws-secrets-manager&quot;&gt;Getting database credentials from AWS Secrets Manager&lt;&#x2F;h3&gt;
&lt;p&gt;In order to connect to our database and trigger the load from S3, we first need to get the credentials.&lt;&#x2F;p&gt;
&lt;p&gt;Using AWS Secrets Manager is a best practice, since it allows you to easily rotate credentials whilst storing and sharing them securely. &lt;&#x2F;p&gt;
&lt;p&gt;We will use the rusoto_secretsmanager crate to retrieve our credentials.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rusoto_core::Region;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rusoto_secretsmanager::{GetSecretValueRequest, SecretsManager, SecretsManagerClient};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;serde::Deserialize;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;serde::Serialize;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;##[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allow&lt;&#x2F;span&gt;&lt;span&gt;(non_snake_case)]
&lt;&#x2F;span&gt;&lt;span&gt;##[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Serialize, Deserialize, Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;DBCredentials {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;engine&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dbClusterIdentifier&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_db_credentials&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;DBCredentials, Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; sm_client = SecretsManagerClient::new(Region::EuWest1);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; secret = sm_client
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_secret_value&lt;&#x2F;span&gt;&lt;span&gt;(GetSecretValueRequest {
&lt;&#x2F;span&gt;&lt;span&gt;            secret_id: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;db_credentials_secret&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            version_id: None,
&lt;&#x2F;span&gt;&lt;span&gt;            version_stage: None,
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sync&lt;&#x2F;span&gt;&lt;span&gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; credentials: DBCredentials = serde_json::from_str(&amp;amp;secret.secret_string.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;())?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(credentials)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note here we have hardcoded the secret name &lt;code&gt;db_credentials_secret&lt;&#x2F;code&gt; and the AWS region.&lt;&#x2F;p&gt;
&lt;p&gt;We use the &lt;code&gt;serde_json&lt;&#x2F;code&gt; crate to deserialise the JSON returned from Secrets Manager into a DBCredentials struct we can use directly.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;load-the-csv-to-the-database&quot;&gt;Load the CSV to the database&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;connecting-to-the-database&quot;&gt;Connecting to the database&lt;&#x2F;h4&gt;
&lt;p&gt;Here we assume connecting to a Redshift cluster with SSL enabled. The requirement for SSL complicates things, here we will use OpenSSL.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;openssl::ssl::{SslConnector, SslMethod};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;postgres::Client;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;postgres_openssl::MakeTlsConnector;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;load_to_db&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;outputkey&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;canonical_date&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;chrono::NaiveDate,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;locations&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;HashSet&amp;lt;String&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; builder = SslConnector::builder(SslMethod::tls())?;
&lt;&#x2F;span&gt;&lt;span&gt;    builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set_ca_file&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;redshift-ssl-ca-cert.pem&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; connector = MakeTlsConnector::new(builder.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; credentials = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_db_credentials&lt;&#x2F;span&gt;&lt;span&gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; client = Client::connect(
&lt;&#x2F;span&gt;&lt;span&gt;        format!(
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;host=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; port=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; dbname=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; user=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; password=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; sslmode=require&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            credentials.host,
&lt;&#x2F;span&gt;&lt;span&gt;            credentials.port,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dbname&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            credentials.username,
&lt;&#x2F;span&gt;&lt;span&gt;            credentials.password
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        connector,
&lt;&#x2F;span&gt;&lt;span&gt;    )?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note we have hardcoded the database name &lt;code&gt;dbname&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The Redshift SSL CA certificate is available from AWS at &lt;a href=&quot;https:&#x2F;&#x2F;s3.amazonaws.com&#x2F;redshift-downloads&#x2F;redshift-ssl-ca-cert.pem&quot;&gt;https:&#x2F;&#x2F;s3.amazonaws.com&#x2F;redshift-downloads&#x2F;redshift-ssl-ca-cert.pem&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This file should be in the root directory of the crate to work with the above code, and we will also need to add it to the artefact we upload to AWS Lambda.&lt;&#x2F;p&gt;
&lt;p&gt;Note in order to get this to cross-compile, we need to enable the &lt;code&gt;vendored&lt;&#x2F;code&gt; feature in the openssl crate, i.e. in Cargo.toml:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[dependencies]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;postgres &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.17.2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;postgres-openssl &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.3.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;openssl &lt;&#x2F;span&gt;&lt;span&gt;= {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.10.28&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;features &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vendored&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;loading-the-data&quot;&gt;Loading the data&lt;&#x2F;h4&gt;
&lt;p&gt;Now we have a working connection with SSL, we can load the data from S3. Continuing the above code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; locations_vec: Vec&amp;lt;String&amp;gt; = locations
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cloned&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;| format!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, x))
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; target_table = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_table&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; location_string = &amp;amp;locations_vec.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; truncate_query = format!(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;DELETE FROM public.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; WHERE date = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39; AND location IN (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;);&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        target_table,
&lt;&#x2F;span&gt;&lt;span&gt;        canonical_date.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;%Y-%m-%d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        location_string
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; colstr = &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;COLUMNS&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, truncate_query);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; copy_query = format!(
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;COPY public.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;) from
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                 &amp;#39;s3:&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                  iam_role &amp;#39;arn:aws:iam::YOUR_ROLE_HERE&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                  FORMAT CSV
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                  EMPTYASNULL
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                  BLANKSASNULL
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                  IGNOREHEADER 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                  IGNOREBLANKLINES
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;                  ;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        target_table, colstr, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;OUTPUT_BUCKET&lt;&#x2F;span&gt;&lt;span&gt;, outputkey
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(truncate_query.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;(), &amp;amp;[]));
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(copy_query.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span&gt;(), &amp;amp;[]));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We have hardcoded the table name as &lt;code&gt;test_table&lt;&#x2F;code&gt;. We first delete from the table all rows which have the same date for each of the locations that we will insert. Then we trigger the load from S3 with the &lt;code&gt;COPY&lt;&#x2F;code&gt; statement.&lt;&#x2F;p&gt;
&lt;p&gt;Note you will need to use an appropriate IAM role in that statement.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;running-on-aws-lambda&quot;&gt;Running on AWS Lambda&lt;&#x2F;h3&gt;
&lt;p&gt;We are now able to run the entire process locally, with a local Excel file, however in order to deploy it to AWS Lambda we need to make a few changes.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;loading-the-input-excel-from-s3&quot;&gt;Loading the input Excel from S3&lt;&#x2F;h4&gt;
&lt;p&gt;First of all, we need to be able to load the input Excel from S3. Specifically: given an S3 key, return the calamine::Xlsx object.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;calamine::{RangeDeserializerBuilder, Reader, Xlsx};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rusoto_core::Region;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;rusoto_s3::{GetObjectRequest, PutObjectRequest, S3Client, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;S3&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::io::Cursor;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;std::io::Read;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_excel_from_s3&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bucket&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;Xlsx&amp;lt;Cursor&amp;lt;Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt;, Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; buffer: Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; = Vec::new();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s3_client = S3Client::new(Region::EuWest1);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Reading bucket: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, key: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, bucket, key);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; s3file = s3_client
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_object&lt;&#x2F;span&gt;&lt;span&gt;(GetObjectRequest {
&lt;&#x2F;span&gt;&lt;span&gt;            bucket: bucket.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            key: key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;            ..Default::default()
&lt;&#x2F;span&gt;&lt;span&gt;        })
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sync&lt;&#x2F;span&gt;&lt;span&gt;()?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; _file = s3file
&lt;&#x2F;span&gt;&lt;span&gt;        .body
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_blocking_read&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read_to_end&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; buffer)?;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(Xlsx::new(Cursor::new(buffer))?)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will return us the &lt;code&gt;Xlsx&amp;lt;Cursor&amp;lt;Vec&amp;lt;u8&amp;gt;&amp;gt;&lt;&#x2F;code&gt; object that we want.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;bringing-it-all-together&quot;&gt;Bringing it all together&lt;&#x2F;h4&gt;
&lt;p&gt;We now need to write the function that will call all of the above functions to run the process.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;calamine::{RangeDeserializerBuilder, Reader, Xlsx};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;INPUT_BUCKET&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;input-bucket-name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;handle_excel&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; label = key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;nth&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; excel: Xlsx&amp;lt;_&amp;gt; = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_excel_from_s3&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;INPUT_BUCKET&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;key)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(data, locations, canonical_date) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;excel_to_csv_string&lt;&#x2F;span&gt;&lt;span&gt;(excel)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; outputkey = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;upload_csv_to_s3&lt;&#x2F;span&gt;&lt;span&gt;(data, label, &amp;amp;canonical_date)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;load_to_db&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;outputkey, &amp;amp;canonical_date, &amp;amp;locations)?;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Remember the input file will be of the form: &lt;code&gt;s3:&#x2F;&#x2F;input-bucket-name&#x2F;label&#x2F;filename.xlsx&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;adding-the-lambda-handler&quot;&gt;Adding the lambda handler&lt;&#x2F;h4&gt;
&lt;p&gt;Finally we need to add the functions which will be the entry point for the Lambda function:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;lambda_runtime::error::HandlerError;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span&gt;percent_encoding::percent_decode_str;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    lambda_runtime::lambda!(my_handler);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;my_handler&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;: aws_lambda_events::event::s3::S3Event,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_c&lt;&#x2F;span&gt;&lt;span&gt;: lambda_runtime::Context,
&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; Result&amp;lt;(), HandlerError&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, e);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; decodedkey = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;percent_decode_str&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;(e.records[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].s3.object.key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_ref&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;decode_utf8&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;handle_excel&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;decodedkey) {
&lt;&#x2F;span&gt;&lt;span&gt;        Ok(_) =&amp;gt; (),
&lt;&#x2F;span&gt;&lt;span&gt;        Err(error) =&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;            panic!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error: {:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, error);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The events the Lambda will receive will come from S3 directly (i.e. forwarding PutObject events to this Lambda from the S3 bucket properties).&lt;&#x2F;p&gt;
&lt;p&gt;We use &lt;code&gt;aws_lambda_events&lt;&#x2F;code&gt; to get a template for this event, from which we extract the S3 key of the file uploaded which has triggered the function.&lt;&#x2F;p&gt;
&lt;p&gt;Note the use of the &lt;code&gt;percent_encoding&lt;&#x2F;code&gt; crate to decode the URL-encoded key we receive in the event itself.&lt;&#x2F;p&gt;
&lt;p&gt;The code for this example is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;rust-lambda-test&quot;&gt;available on GitHub here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;deployment&quot;&gt;Deployment&lt;&#x2F;h3&gt;
&lt;p&gt;To deploy the function, we follow the instructions on &lt;a href=&quot;https:&#x2F;&#x2F;aws.amazon.com&#x2F;blogs&#x2F;opensource&#x2F;rust-runtime-for-aws-lambda&#x2F;&quot;&gt;the AWS blog about the Rust runtime&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We first need to edit Cargo.toml to set the binary name to &lt;code&gt;bootstrap&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span&gt;[[bin]]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bootstrap&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;src&#x2F;main.rs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;os-x-cross-compilation&quot;&gt;OS X cross-compilation&lt;&#x2F;h4&gt;
&lt;p&gt;If you are building on OS X you need to cross-compile the binary, as per the instructions in the blog post.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rustup&lt;&#x2F;span&gt;&lt;span&gt; target add x86_64-unknown-linux-musl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;brew&lt;&#x2F;span&gt;&lt;span&gt; install filosottile&#x2F;musl-cross&#x2F;musl-cross
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span&gt; .cargo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[target.x86_64-unknown-linux-musl]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;linker = &amp;quot;x86_64-linux-musl-gcc&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;gt; .cargo&#x2F;config
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ln -s&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;x86_64-linux-musl-gcc &#x2F;usr&#x2F;local&#x2F;bin&#x2F;musl-gcc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Note the installation of musl-cross took almost 2 hours on my machine.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;build-zip-artefact&quot;&gt;Build zip artefact&lt;&#x2F;h4&gt;
&lt;p&gt;Remember to add the Redshift CA certificate to the zip archive:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cargo&lt;&#x2F;span&gt;&lt;span&gt; build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --release --target&lt;&#x2F;span&gt;&lt;span&gt; x86_64-unknown-linux-musl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;zip -j&lt;&#x2F;span&gt;&lt;span&gt; rust.zip .&#x2F;target&#x2F;x86_64-unknown-linux-musl&#x2F;release&#x2F;bootstrap .&#x2F;redshift-ssl-ca-cert.pem
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;upload-to-aws&quot;&gt;Upload to AWS&lt;&#x2F;h4&gt;
&lt;p&gt;Create a new Lambda function with a Custom runtime, and then upload the zip file.&lt;&#x2F;p&gt;
&lt;p&gt;Note if your Redshift cluster (or RDS instance) is behind a VPC you will need to add the Lambda function to the same VPC. See &lt;a href=&quot;https:&#x2F;&#x2F;docs.aws.amazon.com&#x2F;lambda&#x2F;latest&#x2F;dg&#x2F;configuration-vpc.html&quot;&gt;the documentation&lt;&#x2F;a&gt; for more details. &lt;&#x2F;p&gt;
&lt;p&gt;Then add the S3 trigger to the Lambda function (and you can test the function using the S3 event template).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;future-improvements&quot;&gt;Future Improvements&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;rustls&quot;&gt;RusTLS&lt;&#x2F;h3&gt;
&lt;p&gt;The dependency on OpenSSL can make it difficult to cross-compile, so it would be nice to use a pure Rust TLS library.&lt;&#x2F;p&gt;
&lt;p&gt;A good candidate would be &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;rustls&quot;&gt;RustTLS&lt;&#x2F;a&gt;, and the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;tokio-postgres-rustls&quot;&gt;tokio-postgres-rustls&lt;&#x2F;a&gt; crate apparently adds support for this to the postgres crate. &lt;&#x2F;p&gt;
&lt;p&gt;I tried &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;native-tls&quot;&gt;native-tls&lt;&#x2F;a&gt; which has built-in support in the postgres crate, but hit &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sfackler&#x2F;rust-native-tls&#x2F;issues&#x2F;132&quot;&gt;this issue when building on OS X&lt;&#x2F;a&gt;, and this utlimately uses OpenSSL on Linux anyway.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;apache-arrow-flatbuffers&quot;&gt;Apache Arrow + FlatBuffers&lt;&#x2F;h3&gt;
&lt;p&gt;It would be great if we could deserialise directly (via Calamine and Serde) from the rows of the Excel file to a columnar form in memory such as an Apache Arrow &lt;a href=&quot;https:&#x2F;&#x2F;arrow.apache.org&#x2F;docs&#x2F;r&#x2F;reference&#x2F;RecordBatch.html&quot;&gt;RecordBatch&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;arrow.apache.org&#x2F;docs&#x2F;cpp&#x2F;tables.html&quot;&gt;Table&lt;&#x2F;a&gt; (rather than deserialising to our &lt;code&gt;RawExcelRow&lt;&#x2F;code&gt; structs). This would allow us to use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;arrow&#x2F;tree&#x2F;master&#x2F;rust&#x2F;datafusion&quot;&gt;DataFusion&lt;&#x2F;a&gt; to query the loaded data.&lt;&#x2F;p&gt;
&lt;p&gt;Ideally we could also apply transformations to the data column-wise, and add or remove columns, transitioning between different defined schemas. So we could have a data manipulation tool as powerful as pandas, but with statically defined schemas where the interactions can be verified at compile time.&lt;&#x2F;p&gt;
&lt;p&gt;This could then be saved to disk in the Apache Arrow format without serialisation, or rapidly serialised to columnar formats such as Parquet (which is also well-suited for loading to a columnar database).&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately, even though &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;arrow&#x2F;tree&#x2F;master&#x2F;rust&quot;&gt;Arrow does have a Rust implementation&lt;&#x2F;a&gt;, it doesn&#x27;t seem this direct deserialisation with Serde is possible at the moment (although I am not very familiar with Apache Arrow, nor with Serde&#x27;s internals).&lt;&#x2F;p&gt;
&lt;p&gt;An alternative could be to deserialise to an &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;ndarray&#x2F;0.13.1&#x2F;ndarray&#x2F;&quot;&gt;ndarray&lt;&#x2F;a&gt;, however &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-ndarray&#x2F;ndarray&#x2F;issues&#x2F;771&quot;&gt;support for Arrow is still in progress&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;google.github.io&#x2F;flatbuffers&#x2F;&quot;&gt;FlatBuffers&lt;&#x2F;a&gt; (used for Arrow&#x27;s Table) &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;google&#x2F;flatbuffers&#x2F;issues&#x2F;5132&quot;&gt;also has an issue open for Serde serialisation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you have any ideas for how to achieve this direct deserialisation with Serde please add a comment here in Disqus or as a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;rust-lambda-test&quot;&gt;Github issue&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;compressed-parquet-output&quot;&gt;Compressed Parquet output&lt;&#x2F;h3&gt;
&lt;p&gt;As mentioned above, it&#x27;d be great to be able to write a columnar format such as Parquet directly for loading to Redshift.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately it seems serialising to Parquet is not currently supported in Serde, although the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;constellation-rs&#x2F;amadeus&quot;&gt;Amadeus&lt;&#x2F;a&gt; crate apparently supports reading Parquet.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Thanks for reading this blog post, I hope this toy example is useful, and that Rust adoption will continue to grow in serverless computing.&lt;&#x2F;p&gt;
&lt;p&gt;If you questions or comments, or notice any issues in the examples, please create an issue on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jamesmcm&#x2F;rust-lambda-test&quot;&gt;the Github repo&lt;&#x2F;a&gt; or leave a comment here in Disqus.&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
